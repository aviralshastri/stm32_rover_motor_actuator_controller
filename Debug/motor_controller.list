
motor_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800b4e4  0800b4e4  0000c4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5cc  0800b5cc  0000d1cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5cc  0800b5cc  0000c5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5d4  0800b5d4  0000d1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5d4  0800b5d4  0000c5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b5d8  0800b5d8  0000c5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800b5dc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014e8  200001cc  0800b7a8  0000d1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016b4  0800b7a8  0000d6b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001716f  00000000  00000000  0000d1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003740  00000000  00000000  00024364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  00027aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108d  00000000  00000000  00028ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae84  00000000  00000000  0002a07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab2f  00000000  00000000  00044f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092106  00000000  00000000  0005fa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1b36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006010  00000000  00000000  000f1b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f7b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001cc 	.word	0x200001cc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b4cc 	.word	0x0800b4cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d0 	.word	0x200001d0
 800014c:	0800b4cc 	.word	0x0800b4cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_f2uiz>:
 800099c:	0042      	lsls	r2, r0, #1
 800099e:	d20e      	bcs.n	80009be <__aeabi_f2uiz+0x22>
 80009a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80009a4:	d30b      	bcc.n	80009be <__aeabi_f2uiz+0x22>
 80009a6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80009aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009ae:	d409      	bmi.n	80009c4 <__aeabi_f2uiz+0x28>
 80009b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009b8:	fa23 f002 	lsr.w	r0, r3, r2
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr
 80009c4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80009c8:	d101      	bne.n	80009ce <__aeabi_f2uiz+0x32>
 80009ca:	0242      	lsls	r2, r0, #9
 80009cc:	d102      	bne.n	80009d4 <__aeabi_f2uiz+0x38>
 80009ce:	f04f 30ff 	mov.w	r0, #4294967295
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <PCA9685_SetBit>:
#define PCA9685_MODE1_SLEEP_BIT      4    // as in the datasheet page no 14/52
#define PCA9685_MODE1_AI_BIT         5    // as in the datasheet page no 14/52
#define PCA9685_MODE1_RESTART_BIT    7    // as in the datasheet page no 14/52

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af04      	add	r7, sp, #16
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
 80009e6:	460b      	mov	r3, r1
 80009e8:	71bb      	strb	r3, [r7, #6]
 80009ea:	4613      	mov	r3, r2
 80009ec:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	230a      	movs	r3, #10
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	2301      	movs	r3, #1
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	f107 030f 	add.w	r3, r7, #15
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2301      	movs	r3, #1
 8000a02:	2180      	movs	r1, #128	@ 0x80
 8000a04:	4819      	ldr	r0, [pc, #100]	@ (8000a6c <PCA9685_SetBit+0x90>)
 8000a06:	f001 fdbf 	bl	8002588 <HAL_I2C_Mem_Read>
  if (Value == 0) readValue &= ~(1 << Bit);
 8000a0a:	797b      	ldrb	r3, [r7, #5]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10d      	bne.n	8000a2c <PCA9685_SetBit+0x50>
 8000a10:	79bb      	ldrb	r3, [r7, #6]
 8000a12:	2201      	movs	r2, #1
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	b25a      	sxtb	r2, r3
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	4013      	ands	r3, r2
 8000a24:	b25b      	sxtb	r3, r3
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	e00a      	b.n	8000a42 <PCA9685_SetBit+0x66>
  else readValue |= (1 << Bit);
 8000a2c:	79bb      	ldrb	r3, [r7, #6]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	b25a      	sxtb	r2, r3
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	230a      	movs	r3, #10
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	f107 030f 	add.w	r3, r7, #15
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2301      	movs	r3, #1
 8000a56:	2180      	movs	r1, #128	@ 0x80
 8000a58:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <PCA9685_SetBit+0x90>)
 8000a5a:	f001 fc9b 	bl	8002394 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f001 f886 	bl	8001b70 <HAL_Delay>
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200001e8 	.word	0x200001e8

08000a70 <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af04      	add	r7, sp, #16
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;
  if(frequency >= 1526) prescale = 0x03;
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d902      	bls.n	8000a8a <PCA9685_SetPWMFrequency+0x1a>
 8000a84:	2303      	movs	r3, #3
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	e00c      	b.n	8000aa4 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24) prescale = 0xFF;
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	2b18      	cmp	r3, #24
 8000a8e:	d802      	bhi.n	8000a96 <PCA9685_SetPWMFrequency+0x26>
 8000a90:	23ff      	movs	r3, #255	@ 0xff
 8000a92:	73fb      	strb	r3, [r7, #15]
 8000a94:	e006      	b.n	8000aa4 <PCA9685_SetPWMFrequency+0x34>
  //  internal 25 MHz oscillator as in the datasheet page no 1/52
  else prescale = 25000000 / (4096 * frequency);
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	031b      	lsls	r3, r3, #12
 8000a9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <PCA9685_SetPWMFrequency+0x74>)
 8000a9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	73fb      	strb	r3, [r7, #15]
  // prescale changes 3 to 255 for 1526Hz to 24Hz as in the datasheet page no 1/52
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff ff97 	bl	80009dc <PCA9685_SetBit>
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8000aae:	230a      	movs	r3, #10
 8000ab0:	9302      	str	r3, [sp, #8]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	f107 030f 	add.w	r3, r7, #15
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2301      	movs	r3, #1
 8000abe:	22fe      	movs	r2, #254	@ 0xfe
 8000ac0:	2180      	movs	r1, #128	@ 0x80
 8000ac2:	4809      	ldr	r0, [pc, #36]	@ (8000ae8 <PCA9685_SetPWMFrequency+0x78>)
 8000ac4:	f001 fc66 	bl	8002394 <HAL_I2C_Mem_Write>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2104      	movs	r1, #4
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff ff85 	bl	80009dc <PCA9685_SetBit>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2107      	movs	r1, #7
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff ff80 	bl	80009dc <PCA9685_SetBit>
}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	017d7840 	.word	0x017d7840
 8000ae8:	200001e8 	.word	0x200001e8

08000aec <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ffb9 	bl	8000a70 <PCA9685_SetPWMFrequency>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2105      	movs	r1, #5
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff ff6a 	bl	80009dc <PCA9685_SetBit>
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af04      	add	r7, sp, #16
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	80bb      	strh	r3, [r7, #4]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	3306      	adds	r3, #6
 8000b2a:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 8000b2c:	88bb      	ldrh	r3, [r7, #4]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 8000b32:	88bb      	ldrh	r3, [r7, #4]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 8000b3c:	887b      	ldrh	r3, [r7, #2]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	230a      	movs	r3, #10
 8000b52:	9302      	str	r3, [sp, #8]
 8000b54:	2304      	movs	r3, #4
 8000b56:	9301      	str	r3, [sp, #4]
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2301      	movs	r3, #1
 8000b60:	2180      	movs	r1, #128	@ 0x80
 8000b62:	4803      	ldr	r0, [pc, #12]	@ (8000b70 <PCA9685_SetPWM+0x60>)
 8000b64:	f001 fc16 	bl	8002394 <HAL_I2C_Mem_Write>
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200001e8 	.word	0x200001e8
 8000b74:	00000000 	.word	0x00000000

08000b78 <PCA9685_SetServoAngle>:

void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  float Value;
  // 50 Hz servo then 4095 Value --> 20 milliseconds
  // 0 degree --> 0.5 ms(102.4 Value) and 180 degree --> 2.5 ms(511.9 Value)
  Value = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8000b84:	6838      	ldr	r0, [r7, #0]
 8000b86:	f7ff fc4f 	bl	8000428 <__aeabi_f2d>
 8000b8a:	a317      	add	r3, pc, #92	@ (adr r3, 8000be8 <PCA9685_SetServoAngle+0x70>)
 8000b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b90:	f7ff fca2 	bl	80004d8 <__aeabi_dmul>
 8000b94:	4602      	mov	r2, r0
 8000b96:	460b      	mov	r3, r1
 8000b98:	4610      	mov	r0, r2
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f04f 0200 	mov.w	r2, #0
 8000ba0:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <PCA9685_SetServoAngle+0x80>)
 8000ba2:	f7ff fdc3 	bl	800072c <__aeabi_ddiv>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	460b      	mov	r3, r1
 8000baa:	4610      	mov	r0, r2
 8000bac:	4619      	mov	r1, r3
 8000bae:	a310      	add	r3, pc, #64	@ (adr r3, 8000bf0 <PCA9685_SetServoAngle+0x78>)
 8000bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb4:	f7ff fada 	bl	800016c <__adddf3>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f7ff fe9c 	bl	80008fc <__aeabi_d2f>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60fb      	str	r3, [r7, #12]
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f7ff fee7 	bl	800099c <__aeabi_f2uiz>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff9a 	bl	8000b10 <PCA9685_SetPWM>
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	f3af 8000 	nop.w
 8000be8:	00000000 	.word	0x00000000
 8000bec:	40799800 	.word	0x40799800
 8000bf0:	9999999a 	.word	0x9999999a
 8000bf4:	40599999 	.word	0x40599999
 8000bf8:	40668000 	.word	0x40668000

08000bfc <MapPowerToPulse>:

uint16_t MapPowerToPulse(uint8_t power) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
      if (power > 100) power = 100;
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b64      	cmp	r3, #100	@ 0x64
 8000c0a:	d901      	bls.n	8000c10 <MapPowerToPulse+0x14>
 8000c0c:	2364      	movs	r3, #100	@ 0x64
 8000c0e:	71fb      	strb	r3, [r7, #7]
      return 1000 + (power * 10);
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	0092      	lsls	r2, r2, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000c22:	b29b      	uxth	r3, r3
  }
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <SendFeedback>:

  void SendFeedback(const char* message) {
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
      CDC_Transmit_FS((uint8_t*)message, strlen(message));
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fa8a 	bl	8000150 <strlen>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f009 fbb5 	bl	800a3b0 <CDC_Transmit_FS>
  }
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <Single_Esc_Control>:

  // Single ESC Control
  void Single_Esc_Control(uint8_t* channel, uint16_t* value) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	@ 0x50
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
      uint16_t pwmValue = MapPowerToPulse(*value);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ffcb 	bl	8000bfc <MapPowerToPulse>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      switch(*channel) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d832      	bhi.n	8000cdc <Single_Esc_Control+0x8c>
 8000c76:	a201      	add	r2, pc, #4	@ (adr r2, 8000c7c <Single_Esc_Control+0x2c>)
 8000c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7c:	08000c8d 	.word	0x08000c8d
 8000c80:	08000c99 	.word	0x08000c99
 8000c84:	08000ca5 	.word	0x08000ca5
 8000c88:	08000cb1 	.word	0x08000cb1
          case 1: TIM2->CCR1 = pwmValue; break;
 8000c8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000c94:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c96:	e011      	b.n	8000cbc <Single_Esc_Control+0x6c>
          case 2: TIM2->CCR2 = pwmValue; break;
 8000c98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000ca0:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ca2:	e00b      	b.n	8000cbc <Single_Esc_Control+0x6c>
          case 3: TIM2->CCR3 = pwmValue; break;
 8000ca4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ca8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000cac:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000cae:	e005      	b.n	8000cbc <Single_Esc_Control+0x6c>
          case 4: TIM2->CCR4 = pwmValue; break;
 8000cb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cba:	bf00      	nop
          default: return;
      }

      char msg[64];
      sprintf(msg, "ESC %d set to %d\r\n", *channel, pwmValue);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000cc6:	f107 000c 	add.w	r0, r7, #12
 8000cca:	4906      	ldr	r1, [pc, #24]	@ (8000ce4 <Single_Esc_Control+0x94>)
 8000ccc:	f009 ff4e 	bl	800ab6c <siprintf>
      SendFeedback(msg);
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ffaa 	bl	8000c2e <SendFeedback>
 8000cda:	e000      	b.n	8000cde <Single_Esc_Control+0x8e>
          default: return;
 8000cdc:	bf00      	nop
  }
 8000cde:	3750      	adds	r7, #80	@ 0x50
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	0800b4e4 	.word	0x0800b4e4

08000ce8 <Batch_Esc_Control>:

  // Batch ESC Control
  void Batch_Esc_Control(uint8_t* n, uint16_t* values) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b094      	sub	sp, #80	@ 0x50
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
      for(uint8_t i = 0; i < *n; i++) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000cf8:	e04c      	b.n	8000d94 <Batch_Esc_Control+0xac>
          uint16_t pwmValue = MapPowerToPulse(values[i]);
 8000cfa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff77 	bl	8000bfc <MapPowerToPulse>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
          switch(i+1) {
 8000d14:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d18:	3301      	adds	r3, #1
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d833      	bhi.n	8000d88 <Batch_Esc_Control+0xa0>
 8000d20:	a201      	add	r2, pc, #4	@ (adr r2, 8000d28 <Batch_Esc_Control+0x40>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000d39 	.word	0x08000d39
 8000d2c:	08000d45 	.word	0x08000d45
 8000d30:	08000d51 	.word	0x08000d51
 8000d34:	08000d5d 	.word	0x08000d5d
              case 1: TIM2->CCR1 = pwmValue; break;
 8000d38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000d40:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d42:	e011      	b.n	8000d68 <Batch_Esc_Control+0x80>
              case 2: TIM2->CCR2 = pwmValue; break;
 8000d44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d48:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000d4c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d4e:	e00b      	b.n	8000d68 <Batch_Esc_Control+0x80>
              case 3: TIM2->CCR3 = pwmValue; break;
 8000d50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000d58:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000d5a:	e005      	b.n	8000d68 <Batch_Esc_Control+0x80>
              case 4: TIM2->CCR4 = pwmValue; break;
 8000d5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d60:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d66:	bf00      	nop
              default: continue;
          }

          char msg[64];
          sprintf(msg, "ESC %d set to %d\r\n", i+1, pwmValue);
 8000d68:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000d72:	f107 000c 	add.w	r0, r7, #12
 8000d76:	490d      	ldr	r1, [pc, #52]	@ (8000dac <Batch_Esc_Control+0xc4>)
 8000d78:	f009 fef8 	bl	800ab6c <siprintf>
          SendFeedback(msg);
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff54 	bl	8000c2e <SendFeedback>
 8000d86:	e000      	b.n	8000d8a <Batch_Esc_Control+0xa2>
              default: continue;
 8000d88:	bf00      	nop
      for(uint8_t i = 0; i < *n; i++) {
 8000d8a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d8e:	3301      	adds	r3, #1
 8000d90:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d3ac      	bcc.n	8000cfa <Batch_Esc_Control+0x12>
      }
  }
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3750      	adds	r7, #80	@ 0x50
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	0800b4e4 	.word	0x0800b4e4

08000db0 <Burst_Esc_Control>:

  // Burst ESC Control
  void Burst_Esc_Control(uint8_t* n, uint16_t* value) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	@ 0x50
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
      uint16_t pwmValue = MapPowerToPulse(*value);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff1b 	bl	8000bfc <MapPowerToPulse>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
      for(uint8_t i = 0; i < *n; i++) {
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000dd2:	e03f      	b.n	8000e54 <Burst_Esc_Control+0xa4>
          switch(i+1) {
 8000dd4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000dd8:	3301      	adds	r3, #1
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d833      	bhi.n	8000e48 <Burst_Esc_Control+0x98>
 8000de0:	a201      	add	r2, pc, #4	@ (adr r2, 8000de8 <Burst_Esc_Control+0x38>)
 8000de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de6:	bf00      	nop
 8000de8:	08000df9 	.word	0x08000df9
 8000dec:	08000e05 	.word	0x08000e05
 8000df0:	08000e11 	.word	0x08000e11
 8000df4:	08000e1d 	.word	0x08000e1d
              case 1: TIM2->CCR1 = pwmValue; break;
 8000df8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dfc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000e00:	6353      	str	r3, [r2, #52]	@ 0x34
 8000e02:	e011      	b.n	8000e28 <Burst_Esc_Control+0x78>
              case 2: TIM2->CCR2 = pwmValue; break;
 8000e04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000e0c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e0e:	e00b      	b.n	8000e28 <Burst_Esc_Control+0x78>
              case 3: TIM2->CCR3 = pwmValue; break;
 8000e10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e14:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000e18:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e1a:	e005      	b.n	8000e28 <Burst_Esc_Control+0x78>
              case 4: TIM2->CCR4 = pwmValue; break;
 8000e1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e20:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e26:	bf00      	nop
              default: continue;
          }

          char msg[64];
          sprintf(msg, "ESC %d burst set to %d\r\n", i+1, pwmValue);
 8000e28:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000e32:	f107 000c 	add.w	r0, r7, #12
 8000e36:	490d      	ldr	r1, [pc, #52]	@ (8000e6c <Burst_Esc_Control+0xbc>)
 8000e38:	f009 fe98 	bl	800ab6c <siprintf>
          SendFeedback(msg);
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fef4 	bl	8000c2e <SendFeedback>
 8000e46:	e000      	b.n	8000e4a <Burst_Esc_Control+0x9a>
              default: continue;
 8000e48:	bf00      	nop
      for(uint8_t i = 0; i < *n; i++) {
 8000e4a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000e4e:	3301      	adds	r3, #1
 8000e50:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d3b9      	bcc.n	8000dd4 <Burst_Esc_Control+0x24>
      }
  }
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3750      	adds	r7, #80	@ 0x50
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	0800b4f8 	.word	0x0800b4f8

08000e70 <Control_Command_Handler>:

  // Command handler
  void Control_Command_Handler(uint8_t* Buf, uint32_t Len)
  {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	@ 0x30
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
      uint8_t escValue, escChannel, n;
      uint16_t valueArray[16];

      switch(Buf[1]){
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d042      	beq.n	8000f0a <Control_Command_Handler+0x9a>
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	dc54      	bgt.n	8000f32 <Control_Command_Handler+0xc2>
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d002      	beq.n	8000e92 <Control_Command_Handler+0x22>
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d015      	beq.n	8000ebc <Control_Command_Handler+0x4c>
 8000e90:	e04f      	b.n	8000f32 <Control_Command_Handler+0xc2>
          case 0x00: // Single ESC Control
              escValue = Buf[2];
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	789b      	ldrb	r3, [r3, #2]
 8000e96:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
              escChannel = Buf[3];
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	78db      	ldrb	r3, [r3, #3]
 8000e9e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
              {
                  uint16_t pwmValue = escValue;
 8000ea2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	817b      	strh	r3, [r7, #10]
                  Single_Esc_Control(&escChannel, &pwmValue);
 8000eaa:	f107 020a 	add.w	r2, r7, #10
 8000eae:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fecb 	bl	8000c50 <Single_Esc_Control>
              }
              break;
 8000eba:	e03e      	b.n	8000f3a <Control_Command_Handler+0xca>

          case 0x02: // Batch ESC Control
              for(uint8_t i=0; i<4; i++) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ec2:	e012      	b.n	8000eea <Control_Command_Handler+0x7a>
                  valueArray[i] = Buf[2+i];
 8000ec4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ec8:	3302      	adds	r3, #2
 8000eca:	461a      	mov	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781a      	ldrb	r2, [r3, #0]
 8000ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	3330      	adds	r3, #48	@ 0x30
 8000eda:	443b      	add	r3, r7
 8000edc:	f823 2c24 	strh.w	r2, [r3, #-36]
              for(uint8_t i=0; i<4; i++) {
 8000ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000eea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d9e8      	bls.n	8000ec4 <Control_Command_Handler+0x54>
              }
              n = 4;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
              Batch_Esc_Control(&n, valueArray);
 8000ef8:	f107 020c 	add.w	r2, r7, #12
 8000efc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fef0 	bl	8000ce8 <Batch_Esc_Control>
              break;
 8000f08:	e017      	b.n	8000f3a <Control_Command_Handler+0xca>

          case 0x04: // Burst ESC Control
              escValue = Buf[2];
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	789b      	ldrb	r3, [r3, #2]
 8000f0e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
              {
                  uint16_t pwmValue = escValue;
 8000f12:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	813b      	strh	r3, [r7, #8]
                  n = 4;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                  Burst_Esc_Control(&n, &pwmValue);
 8000f20:	f107 0208 	add.w	r2, r7, #8
 8000f24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff40 	bl	8000db0 <Burst_Esc_Control>
              }
              break;
 8000f30:	e003      	b.n	8000f3a <Control_Command_Handler+0xca>

          default:
              SendFeedback("Invalid Command\r\n");
 8000f32:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <Control_Command_Handler+0xd4>)
 8000f34:	f7ff fe7b 	bl	8000c2e <SendFeedback>
              break;
 8000f38:	bf00      	nop
      }
  }
 8000f3a:	bf00      	nop
 8000f3c:	3730      	adds	r7, #48	@ 0x30
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	0800b514 	.word	0x0800b514

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4e:	f000 fdad 	bl	8001aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f52:	f000 f88d 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f000 faeb 	bl	8001530 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000f5a:	f009 f967 	bl	800a22c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000f5e:	f000 f8e1 	bl	8001124 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000f62:	f000 f96f 	bl	8001244 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f66:	f000 f90b 	bl	8001180 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f6a:	f000 f9e5 	bl	8001338 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f6e:	f000 fa57 	bl	8001420 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000f72:	f000 fab3 	bl	80014dc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f76:	2100      	movs	r1, #0
 8000f78:	483a      	ldr	r0, [pc, #232]	@ (8001064 <main+0x11c>)
 8000f7a:	f004 fba3 	bl	80056c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f7e:	2104      	movs	r1, #4
 8000f80:	4838      	ldr	r0, [pc, #224]	@ (8001064 <main+0x11c>)
 8000f82:	f004 fb9f 	bl	80056c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f86:	2108      	movs	r1, #8
 8000f88:	4836      	ldr	r0, [pc, #216]	@ (8001064 <main+0x11c>)
 8000f8a:	f004 fb9b 	bl	80056c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000f8e:	210c      	movs	r1, #12
 8000f90:	4834      	ldr	r0, [pc, #208]	@ (8001064 <main+0x11c>)
 8000f92:	f004 fb97 	bl	80056c4 <HAL_TIM_PWM_Start>

  TIM2->CCR1=1500;
 8000f96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f9a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f9e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR2=1500;
 8000fa0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fa4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM2->CCR3=1500;
 8000faa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fae:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000fb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2->CCR4=1500;
 8000fb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fb8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000fbc:	641a      	str	r2, [r3, #64]	@ 0x40
  PCA9685_Init(50);
 8000fbe:	2032      	movs	r0, #50	@ 0x32
 8000fc0:	f7ff fd94 	bl	8000aec <PCA9685_Init>
  HAL_Delay(2000);
 8000fc4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fc8:	f000 fdd2 	bl	8001b70 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (uint8_t ch = 0; ch < 16; ch++) {
 8000fcc:	2300      	movs	r3, #0
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	e008      	b.n	8000fe4 <main+0x9c>
	          PCA9685_SetServoAngle(ch, 0);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f04f 0100 	mov.w	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fdcd 	bl	8000b78 <PCA9685_SetServoAngle>
	  for (uint8_t ch = 0; ch < 16; ch++) {
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b0f      	cmp	r3, #15
 8000fe8:	d9f3      	bls.n	8000fd2 <main+0x8a>
	      }
	      HAL_Delay(1000);  // Wait 1 second
 8000fea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fee:	f000 fdbf 	bl	8001b70 <HAL_Delay>

	      // Move all 16 channels to 90°
	      for (uint8_t ch = 0; ch < 16; ch++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	71bb      	strb	r3, [r7, #6]
 8000ff6:	e007      	b.n	8001008 <main+0xc0>
	          PCA9685_SetServoAngle(ch, 90);
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	491b      	ldr	r1, [pc, #108]	@ (8001068 <main+0x120>)
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fdbb 	bl	8000b78 <PCA9685_SetServoAngle>
	      for (uint8_t ch = 0; ch < 16; ch++) {
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	3301      	adds	r3, #1
 8001006:	71bb      	strb	r3, [r7, #6]
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	2b0f      	cmp	r3, #15
 800100c:	d9f4      	bls.n	8000ff8 <main+0xb0>
	      }
	      HAL_Delay(1000);
 800100e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001012:	f000 fdad 	bl	8001b70 <HAL_Delay>

	      // Move all 16 channels to 180°
	      for (uint8_t ch = 0; ch < 16; ch++) {
 8001016:	2300      	movs	r3, #0
 8001018:	717b      	strb	r3, [r7, #5]
 800101a:	e007      	b.n	800102c <main+0xe4>
	          PCA9685_SetServoAngle(ch, 180);
 800101c:	797b      	ldrb	r3, [r7, #5]
 800101e:	4913      	ldr	r1, [pc, #76]	@ (800106c <main+0x124>)
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fda9 	bl	8000b78 <PCA9685_SetServoAngle>
	      for (uint8_t ch = 0; ch < 16; ch++) {
 8001026:	797b      	ldrb	r3, [r7, #5]
 8001028:	3301      	adds	r3, #1
 800102a:	717b      	strb	r3, [r7, #5]
 800102c:	797b      	ldrb	r3, [r7, #5]
 800102e:	2b0f      	cmp	r3, #15
 8001030:	d9f4      	bls.n	800101c <main+0xd4>
	      }
	      HAL_Delay(1000);
 8001032:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001036:	f000 fd9b 	bl	8001b70 <HAL_Delay>

	      // Move all 16 channels back to 0°
	      for (uint8_t ch = 0; ch < 16; ch++) {
 800103a:	2300      	movs	r3, #0
 800103c:	713b      	strb	r3, [r7, #4]
 800103e:	e008      	b.n	8001052 <main+0x10a>
	          PCA9685_SetServoAngle(ch, 0);
 8001040:	793b      	ldrb	r3, [r7, #4]
 8001042:	f04f 0100 	mov.w	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fd96 	bl	8000b78 <PCA9685_SetServoAngle>
	      for (uint8_t ch = 0; ch < 16; ch++) {
 800104c:	793b      	ldrb	r3, [r7, #4]
 800104e:	3301      	adds	r3, #1
 8001050:	713b      	strb	r3, [r7, #4]
 8001052:	793b      	ldrb	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d9f3      	bls.n	8001040 <main+0xf8>
	      }
	      HAL_Delay(1000);
 8001058:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800105c:	f000 fd88 	bl	8001b70 <HAL_Delay>
	  for (uint8_t ch = 0; ch < 16; ch++) {
 8001060:	e7b4      	b.n	8000fcc <main+0x84>
 8001062:	bf00      	nop
 8001064:	20000284 	.word	0x20000284
 8001068:	42b40000 	.word	0x42b40000
 800106c:	43340000 	.word	0x43340000

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	@ 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800107a:	2228      	movs	r2, #40	@ 0x28
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f009 fd94 	bl	800abac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ae:	2301      	movs	r3, #1
 80010b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b2:	2302      	movs	r3, #2
 80010b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010bc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c6:	4618      	mov	r0, r3
 80010c8:	f003 fde6 	bl	8004c98 <HAL_RCC_OscConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010d2:	f000 fa93 	bl	80015fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	230f      	movs	r3, #15
 80010d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2102      	movs	r1, #2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f004 f852 	bl	800519c <HAL_RCC_ClockConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80010fe:	f000 fa7d 	bl	80015fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001102:	2310      	movs	r3, #16
 8001104:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4618      	mov	r0, r3
 800110e:	f004 f9d3 	bl	80054b8 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001118:	f000 fa70 	bl	80015fc <Error_Handler>
  }
}
 800111c:	bf00      	nop
 800111e:	3750      	adds	r7, #80	@ 0x50
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <MX_I2C1_Init+0x50>)
 800112a:	4a13      	ldr	r2, [pc, #76]	@ (8001178 <MX_I2C1_Init+0x54>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <MX_I2C1_Init+0x50>)
 8001130:	4a12      	ldr	r2, [pc, #72]	@ (800117c <MX_I2C1_Init+0x58>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001134:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <MX_I2C1_Init+0x50>)
 8001142:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001146:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	@ (8001174 <MX_I2C1_Init+0x50>)
 8001162:	f000 ffd3 	bl	800210c <HAL_I2C_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800116c:	f000 fa46 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200001e8 	.word	0x200001e8
 8001178:	40005400 	.word	0x40005400
 800117c:	000186a0 	.word	0x000186a0

08001180 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800119c:	4b27      	ldr	r3, [pc, #156]	@ (800123c <MX_TIM1_Init+0xbc>)
 800119e:	4a28      	ldr	r2, [pc, #160]	@ (8001240 <MX_TIM1_Init+0xc0>)
 80011a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011a2:	4b26      	ldr	r3, [pc, #152]	@ (800123c <MX_TIM1_Init+0xbc>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a8:	4b24      	ldr	r3, [pc, #144]	@ (800123c <MX_TIM1_Init+0xbc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011ae:	4b23      	ldr	r3, [pc, #140]	@ (800123c <MX_TIM1_Init+0xbc>)
 80011b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b6:	4b21      	ldr	r3, [pc, #132]	@ (800123c <MX_TIM1_Init+0xbc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <MX_TIM1_Init+0xbc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <MX_TIM1_Init+0xbc>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80011c8:	481c      	ldr	r0, [pc, #112]	@ (800123c <MX_TIM1_Init+0xbc>)
 80011ca:	f004 fb1d 	bl	8005808 <HAL_TIM_IC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011d4:	f000 fa12 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	4815      	ldr	r0, [pc, #84]	@ (800123c <MX_TIM1_Init+0xbc>)
 80011e8:	f004 ffe4 	bl	80061b4 <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011f2:	f000 fa03 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011fa:	2301      	movs	r3, #1
 80011fc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001206:	463b      	mov	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	480b      	ldr	r0, [pc, #44]	@ (800123c <MX_TIM1_Init+0xbc>)
 800120e:	f004 fb4a 	bl	80058a6 <HAL_TIM_IC_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001218:	f000 f9f0 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	2204      	movs	r2, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	@ (800123c <MX_TIM1_Init+0xbc>)
 8001224:	f004 fb3f 	bl	80058a6 <HAL_TIM_IC_ConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 800122e:	f000 f9e5 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000023c 	.word	0x2000023c
 8001240:	40012c00 	.word	0x40012c00

08001244 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001266:	4b33      	ldr	r3, [pc, #204]	@ (8001334 <MX_TIM2_Init+0xf0>)
 8001268:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800126c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800126e:	4b31      	ldr	r3, [pc, #196]	@ (8001334 <MX_TIM2_Init+0xf0>)
 8001270:	2247      	movs	r2, #71	@ 0x47
 8001272:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <MX_TIM2_Init+0xf0>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800127a:	4b2e      	ldr	r3, [pc, #184]	@ (8001334 <MX_TIM2_Init+0xf0>)
 800127c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001280:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b2c      	ldr	r3, [pc, #176]	@ (8001334 <MX_TIM2_Init+0xf0>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001288:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <MX_TIM2_Init+0xf0>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800128e:	4829      	ldr	r0, [pc, #164]	@ (8001334 <MX_TIM2_Init+0xf0>)
 8001290:	f004 f9c8 	bl	8005624 <HAL_TIM_PWM_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800129a:	f000 f9af 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	4619      	mov	r1, r3
 80012ac:	4821      	ldr	r0, [pc, #132]	@ (8001334 <MX_TIM2_Init+0xf0>)
 80012ae:	f004 ff81 	bl	80061b4 <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80012b8:	f000 f9a0 	bl	80015fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012bc:	2360      	movs	r3, #96	@ 0x60
 80012be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	4619      	mov	r1, r3
 80012d2:	4818      	ldr	r0, [pc, #96]	@ (8001334 <MX_TIM2_Init+0xf0>)
 80012d4:	f004 fb84 	bl	80059e0 <HAL_TIM_PWM_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80012de:	f000 f98d 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2204      	movs	r2, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4812      	ldr	r0, [pc, #72]	@ (8001334 <MX_TIM2_Init+0xf0>)
 80012ea:	f004 fb79 	bl	80059e0 <HAL_TIM_PWM_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012f4:	f000 f982 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2208      	movs	r2, #8
 80012fc:	4619      	mov	r1, r3
 80012fe:	480d      	ldr	r0, [pc, #52]	@ (8001334 <MX_TIM2_Init+0xf0>)
 8001300:	f004 fb6e 	bl	80059e0 <HAL_TIM_PWM_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800130a:	f000 f977 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	220c      	movs	r2, #12
 8001312:	4619      	mov	r1, r3
 8001314:	4807      	ldr	r0, [pc, #28]	@ (8001334 <MX_TIM2_Init+0xf0>)
 8001316:	f004 fb63 	bl	80059e0 <HAL_TIM_PWM_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001320:	f000 f96c 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001324:	4803      	ldr	r0, [pc, #12]	@ (8001334 <MX_TIM2_Init+0xf0>)
 8001326:	f000 faad 	bl	8001884 <HAL_TIM_MspPostInit>

}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	@ 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000284 	.word	0x20000284

08001338 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001348:	463b      	mov	r3, r7
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001354:	4b30      	ldr	r3, [pc, #192]	@ (8001418 <MX_TIM3_Init+0xe0>)
 8001356:	4a31      	ldr	r2, [pc, #196]	@ (800141c <MX_TIM3_Init+0xe4>)
 8001358:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800135a:	4b2f      	ldr	r3, [pc, #188]	@ (8001418 <MX_TIM3_Init+0xe0>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <MX_TIM3_Init+0xe0>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001366:	4b2c      	ldr	r3, [pc, #176]	@ (8001418 <MX_TIM3_Init+0xe0>)
 8001368:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800136c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <MX_TIM3_Init+0xe0>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001374:	4b28      	ldr	r3, [pc, #160]	@ (8001418 <MX_TIM3_Init+0xe0>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800137a:	4827      	ldr	r0, [pc, #156]	@ (8001418 <MX_TIM3_Init+0xe0>)
 800137c:	f004 fa44 	bl	8005808 <HAL_TIM_IC_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001386:	f000 f939 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	4619      	mov	r1, r3
 8001398:	481f      	ldr	r0, [pc, #124]	@ (8001418 <MX_TIM3_Init+0xe0>)
 800139a:	f004 ff0b 	bl	80061b4 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80013a4:	f000 f92a 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013a8:	2300      	movs	r3, #0
 80013aa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013ac:	2301      	movs	r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	4619      	mov	r1, r3
 80013be:	4816      	ldr	r0, [pc, #88]	@ (8001418 <MX_TIM3_Init+0xe0>)
 80013c0:	f004 fa71 	bl	80058a6 <HAL_TIM_IC_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80013ca:	f000 f917 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	2204      	movs	r2, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4810      	ldr	r0, [pc, #64]	@ (8001418 <MX_TIM3_Init+0xe0>)
 80013d6:	f004 fa66 	bl	80058a6 <HAL_TIM_IC_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80013e0:	f000 f90c 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	2208      	movs	r2, #8
 80013e8:	4619      	mov	r1, r3
 80013ea:	480b      	ldr	r0, [pc, #44]	@ (8001418 <MX_TIM3_Init+0xe0>)
 80013ec:	f004 fa5b 	bl	80058a6 <HAL_TIM_IC_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 80013f6:	f000 f901 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	220c      	movs	r2, #12
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_TIM3_Init+0xe0>)
 8001402:	f004 fa50 	bl	80058a6 <HAL_TIM_IC_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800140c:	f000 f8f6 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200002cc 	.word	0x200002cc
 800141c:	40000400 	.word	0x40000400

08001420 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800143c:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <MX_TIM4_Init+0xb4>)
 800143e:	4a26      	ldr	r2, [pc, #152]	@ (80014d8 <MX_TIM4_Init+0xb8>)
 8001440:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001442:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <MX_TIM4_Init+0xb4>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001448:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <MX_TIM4_Init+0xb4>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800144e:	4b21      	ldr	r3, [pc, #132]	@ (80014d4 <MX_TIM4_Init+0xb4>)
 8001450:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001454:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001456:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <MX_TIM4_Init+0xb4>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <MX_TIM4_Init+0xb4>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001462:	481c      	ldr	r0, [pc, #112]	@ (80014d4 <MX_TIM4_Init+0xb4>)
 8001464:	f004 f9d0 	bl	8005808 <HAL_TIM_IC_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800146e:	f000 f8c5 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	4619      	mov	r1, r3
 8001480:	4814      	ldr	r0, [pc, #80]	@ (80014d4 <MX_TIM4_Init+0xb4>)
 8001482:	f004 fe97 	bl	80061b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800148c:	f000 f8b6 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001490:	2300      	movs	r3, #0
 8001492:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001494:	2301      	movs	r3, #1
 8001496:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80014a0:	463b      	mov	r3, r7
 80014a2:	2208      	movs	r2, #8
 80014a4:	4619      	mov	r1, r3
 80014a6:	480b      	ldr	r0, [pc, #44]	@ (80014d4 <MX_TIM4_Init+0xb4>)
 80014a8:	f004 f9fd 	bl	80058a6 <HAL_TIM_IC_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80014b2:	f000 f8a3 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	220c      	movs	r2, #12
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_TIM4_Init+0xb4>)
 80014be:	f004 f9f2 	bl	80058a6 <HAL_TIM_IC_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80014c8:	f000 f898 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000314 	.word	0x20000314
 80014d8:	40000800 	.word	0x40000800

080014dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <MX_USART3_UART_Init+0x4c>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	@ (800152c <MX_USART3_UART_Init+0x50>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <MX_USART3_UART_Init+0x4c>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <MX_USART3_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <MX_USART3_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <MX_USART3_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <MX_USART3_UART_Init+0x4c>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <MX_USART3_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <MX_USART3_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <MX_USART3_UART_Init+0x4c>)
 8001514:	f004 feac 	bl	8006270 <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800151e:	f000 f86d 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000035c 	.word	0x2000035c
 800152c:	40004800 	.word	0x40004800

08001530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 0310 	add.w	r3, r7, #16
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001544:	4b2a      	ldr	r3, [pc, #168]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a29      	ldr	r2, [pc, #164]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 800154a:	f043 0310 	orr.w	r3, r3, #16
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b27      	ldr	r3, [pc, #156]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155c:	4b24      	ldr	r3, [pc, #144]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a23      	ldr	r2, [pc, #140]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 8001562:	f043 0320 	orr.w	r3, r3, #32
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0320 	and.w	r3, r3, #32
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b1e      	ldr	r3, [pc, #120]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a1d      	ldr	r2, [pc, #116]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158c:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a17      	ldr	r2, [pc, #92]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015aa:	4812      	ldr	r0, [pc, #72]	@ (80015f4 <MX_GPIO_Init+0xc4>)
 80015ac:	f000 fd96 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2302      	movs	r3, #2
 80015c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	4619      	mov	r1, r3
 80015c8:	480a      	ldr	r0, [pc, #40]	@ (80015f4 <MX_GPIO_Init+0xc4>)
 80015ca:	f000 fc03 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Extra_Setup_Button_Pin */
  GPIO_InitStruct.Pin = Extra_Setup_Button_Pin;
 80015ce:	2310      	movs	r3, #16
 80015d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Extra_Setup_Button_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <MX_GPIO_Init+0xc8>)
 80015e2:	f000 fbf7 	bl	8001dd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e6:	bf00      	nop
 80015e8:	3720      	adds	r7, #32
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40011000 	.word	0x40011000
 80015f8:	40010800 	.word	0x40010800

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <Error_Handler+0x8>

08001608 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_MspInit+0x5c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <HAL_MspInit+0x5c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6193      	str	r3, [r2, #24]
 800161a:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_MspInit+0x5c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <HAL_MspInit+0x5c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a0e      	ldr	r2, [pc, #56]	@ (8001664 <HAL_MspInit+0x5c>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <HAL_MspInit+0x5c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <HAL_MspInit+0x60>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <HAL_MspInit+0x60>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000

0800166c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a15      	ldr	r2, [pc, #84]	@ (80016dc <HAL_I2C_MspInit+0x70>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d123      	bne.n	80016d4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <HAL_I2C_MspInit+0x74>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a13      	ldr	r2, [pc, #76]	@ (80016e0 <HAL_I2C_MspInit+0x74>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <HAL_I2C_MspInit+0x74>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_CLOCK_Pin|I2C_DATA_Pin;
 80016a4:	23c0      	movs	r3, #192	@ 0xc0
 80016a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a8:	2312      	movs	r3, #18
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4619      	mov	r1, r3
 80016b6:	480b      	ldr	r0, [pc, #44]	@ (80016e4 <HAL_I2C_MspInit+0x78>)
 80016b8:	f000 fb8c 	bl	8001dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <HAL_I2C_MspInit+0x74>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	4a07      	ldr	r2, [pc, #28]	@ (80016e0 <HAL_I2C_MspInit+0x74>)
 80016c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016c6:	61d3      	str	r3, [r2, #28]
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <HAL_I2C_MspInit+0x74>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016d4:	bf00      	nop
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40005400 	.word	0x40005400
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010c00 	.word	0x40010c00

080016e8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08e      	sub	sp, #56	@ 0x38
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a4c      	ldr	r2, [pc, #304]	@ (8001834 <HAL_TIM_IC_MspInit+0x14c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d125      	bne.n	8001754 <HAL_TIM_IC_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001708:	4b4b      	ldr	r3, [pc, #300]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a4a      	ldr	r2, [pc, #296]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 800170e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b48      	ldr	r3, [pc, #288]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b45      	ldr	r3, [pc, #276]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a44      	ldr	r2, [pc, #272]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b42      	ldr	r3, [pc, #264]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	623b      	str	r3, [r7, #32]
 8001736:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_B1_Pin|Motor_B2_Pin;
 8001738:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800173c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173e:	2300      	movs	r3, #0
 8001740:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800174a:	4619      	mov	r1, r3
 800174c:	483b      	ldr	r0, [pc, #236]	@ (800183c <HAL_TIM_IC_MspInit+0x154>)
 800174e:	f000 fb41 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001752:	e06b      	b.n	800182c <HAL_TIM_IC_MspInit+0x144>
  else if(htim_ic->Instance==TIM3)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a39      	ldr	r2, [pc, #228]	@ (8001840 <HAL_TIM_IC_MspInit+0x158>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d13c      	bne.n	80017d8 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800175e:	4b36      	ldr	r3, [pc, #216]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a35      	ldr	r2, [pc, #212]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b33      	ldr	r3, [pc, #204]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	4b30      	ldr	r3, [pc, #192]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4a2f      	ldr	r2, [pc, #188]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6193      	str	r3, [r2, #24]
 8001782:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	4a29      	ldr	r2, [pc, #164]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6193      	str	r3, [r2, #24]
 800179a:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Motor_C1_Pin|Motor_C2_Pin;
 80017a6:	23c0      	movs	r3, #192	@ 0xc0
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017b6:	4619      	mov	r1, r3
 80017b8:	4820      	ldr	r0, [pc, #128]	@ (800183c <HAL_TIM_IC_MspInit+0x154>)
 80017ba:	f000 fb0b 	bl	8001dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Motor_D1_Pin|Motor_D2_Pin;
 80017be:	2303      	movs	r3, #3
 80017c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ce:	4619      	mov	r1, r3
 80017d0:	481c      	ldr	r0, [pc, #112]	@ (8001844 <HAL_TIM_IC_MspInit+0x15c>)
 80017d2:	f000 faff 	bl	8001dd4 <HAL_GPIO_Init>
}
 80017d6:	e029      	b.n	800182c <HAL_TIM_IC_MspInit+0x144>
  else if(htim_ic->Instance==TIM4)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001848 <HAL_TIM_IC_MspInit+0x160>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d124      	bne.n	800182c <HAL_TIM_IC_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a14      	ldr	r2, [pc, #80]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	6193      	str	r3, [r2, #24]
 8001806:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <HAL_TIM_IC_MspInit+0x150>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_A1_Pin|Motor_A2_Pin;
 8001812:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001824:	4619      	mov	r1, r3
 8001826:	4807      	ldr	r0, [pc, #28]	@ (8001844 <HAL_TIM_IC_MspInit+0x15c>)
 8001828:	f000 fad4 	bl	8001dd4 <HAL_GPIO_Init>
}
 800182c:	bf00      	nop
 800182e:	3738      	adds	r7, #56	@ 0x38
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40012c00 	.word	0x40012c00
 8001838:	40021000 	.word	0x40021000
 800183c:	40010800 	.word	0x40010800
 8001840:	40000400 	.word	0x40000400
 8001844:	40010c00 	.word	0x40010c00
 8001848:	40000800 	.word	0x40000800

0800184c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800185c:	d10b      	bne.n	8001876 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_TIM_PWM_MspInit+0x34>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a07      	ldr	r2, [pc, #28]	@ (8001880 <HAL_TIM_PWM_MspInit+0x34>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_TIM_PWM_MspInit+0x34>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018a2:	d117      	bne.n	80018d4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <HAL_TIM_MspPostInit+0x58>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a0c      	ldr	r2, [pc, #48]	@ (80018dc <HAL_TIM_MspPostInit+0x58>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_TIM_MspPostInit+0x58>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ESC1_Pin|ESC2_Pin|ESC3_Pin|ESC4_Pin;
 80018bc:	230f      	movs	r3, #15
 80018be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	4804      	ldr	r0, [pc, #16]	@ (80018e0 <HAL_TIM_MspPostInit+0x5c>)
 80018d0:	f000 fa80 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018d4:	bf00      	nop
 80018d6:	3720      	adds	r7, #32
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010800 	.word	0x40010800

080018e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001970 <HAL_UART_MspInit+0x8c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d131      	bne.n	8001968 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001904:	4b1b      	ldr	r3, [pc, #108]	@ (8001974 <HAL_UART_MspInit+0x90>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	4a1a      	ldr	r2, [pc, #104]	@ (8001974 <HAL_UART_MspInit+0x90>)
 800190a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800190e:	61d3      	str	r3, [r2, #28]
 8001910:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <HAL_UART_MspInit+0x90>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_UART_MspInit+0x90>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a14      	ldr	r2, [pc, #80]	@ (8001974 <HAL_UART_MspInit+0x90>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_UART_MspInit+0x90>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = Input_UART_Pin;
 8001934:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001938:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193e:	2303      	movs	r3, #3
 8001940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Input_UART_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	4619      	mov	r1, r3
 8001948:	480b      	ldr	r0, [pc, #44]	@ (8001978 <HAL_UART_MspInit+0x94>)
 800194a:	f000 fa43 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Input_UARTB11_Pin;
 800194e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Input_UARTB11_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	4619      	mov	r1, r3
 8001962:	4805      	ldr	r0, [pc, #20]	@ (8001978 <HAL_UART_MspInit+0x94>)
 8001964:	f000 fa36 	bl	8001dd4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001968:	bf00      	nop
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40004800 	.word	0x40004800
 8001974:	40021000 	.word	0x40021000
 8001978:	40010c00 	.word	0x40010c00

0800197c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <NMI_Handler+0x4>

08001984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <MemManage_Handler+0x4>

08001994 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019cc:	f000 f8b4 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80019da:	f001 fd18 	bl	800340e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20001074 	.word	0x20001074

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	@ (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	@ (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f009 f8d0 	bl	800abbc <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a05      	ldr	r2, [pc, #20]	@ (8001a4c <_sbrk+0x64>)
 8001a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20005000 	.word	0x20005000
 8001a48:	00000400 	.word	0x00000400
 8001a4c:	200003a4 	.word	0x200003a4
 8001a50:	200016b8 	.word	0x200016b8

08001a54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a60:	f7ff fff8 	bl	8001a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a64:	480b      	ldr	r0, [pc, #44]	@ (8001a94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a66:	490c      	ldr	r1, [pc, #48]	@ (8001a98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a68:	4a0c      	ldr	r2, [pc, #48]	@ (8001a9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a09      	ldr	r2, [pc, #36]	@ (8001aa0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a7c:	4c09      	ldr	r4, [pc, #36]	@ (8001aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f009 f89d 	bl	800abc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a8e:	f7ff fa5b 	bl	8000f48 <main>
  bx lr
 8001a92:	4770      	bx	lr
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001a9c:	0800b5dc 	.word	0x0800b5dc
  ldr r2, =_sbss
 8001aa0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001aa4:	200016b4 	.word	0x200016b4

08001aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC1_2_IRQHandler>
	...

08001aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <HAL_Init+0x28>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a07      	ldr	r2, [pc, #28]	@ (8001ad4 <HAL_Init+0x28>)
 8001ab6:	f043 0310 	orr.w	r3, r3, #16
 8001aba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f000 f947 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f000 f808 	bl	8001ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac8:	f7ff fd9e 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40022000 	.word	0x40022000

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_InitTick+0x54>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <HAL_InitTick+0x58>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f95f 	bl	8001dba <HAL_SYSTICK_Config>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00e      	b.n	8001b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	d80a      	bhi.n	8001b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f000 f927 	bl	8001d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b18:	4a06      	ldr	r2, [pc, #24]	@ (8001b34 <HAL_InitTick+0x5c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_IncTick+0x1c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <HAL_IncTick+0x20>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a03      	ldr	r2, [pc, #12]	@ (8001b58 <HAL_IncTick+0x20>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	20000008 	.word	0x20000008
 8001b58:	200003a8 	.word	0x200003a8

08001b5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b02      	ldr	r3, [pc, #8]	@ (8001b6c <HAL_GetTick+0x10>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	200003a8 	.word	0x200003a8

08001b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff fff0 	bl	8001b5c <HAL_GetTick>
 8001b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d005      	beq.n	8001b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <HAL_Delay+0x44>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b96:	bf00      	nop
 8001b98:	f7ff ffe0 	bl	8001b5c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d8f7      	bhi.n	8001b98 <HAL_Delay+0x28>
  {
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000008 	.word	0x20000008

08001bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bea:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	60d3      	str	r3, [r2, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c04:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <__NVIC_GetPriorityGrouping+0x18>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	f003 0307 	and.w	r3, r3, #7
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db0b      	blt.n	8001c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	4906      	ldr	r1, [pc, #24]	@ (8001c50 <__NVIC_EnableIRQ+0x34>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	@ (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	@ (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	@ 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
         );
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	@ 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d1c:	d301      	bcc.n	8001d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d22:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <SysTick_Config+0x40>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f7ff ff90 	bl	8001c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d34:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <SysTick_Config+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <SysTick_Config+0x40>)
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff2d 	bl	8001bb8 <__NVIC_SetPriorityGrouping>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d78:	f7ff ff42 	bl	8001c00 <__NVIC_GetPriorityGrouping>
 8001d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff ff90 	bl	8001ca8 <NVIC_EncodePriority>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff5f 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff35 	bl	8001c1c <__NVIC_EnableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffa2 	bl	8001d0c <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b08b      	sub	sp, #44	@ 0x2c
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de6:	e169      	b.n	80020bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de8:	2201      	movs	r2, #1
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 8158 	bne.w	80020b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4a9a      	ldr	r2, [pc, #616]	@ (8002074 <HAL_GPIO_Init+0x2a0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d05e      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e10:	4a98      	ldr	r2, [pc, #608]	@ (8002074 <HAL_GPIO_Init+0x2a0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d875      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e16:	4a98      	ldr	r2, [pc, #608]	@ (8002078 <HAL_GPIO_Init+0x2a4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d058      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e1c:	4a96      	ldr	r2, [pc, #600]	@ (8002078 <HAL_GPIO_Init+0x2a4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d86f      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e22:	4a96      	ldr	r2, [pc, #600]	@ (800207c <HAL_GPIO_Init+0x2a8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d052      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e28:	4a94      	ldr	r2, [pc, #592]	@ (800207c <HAL_GPIO_Init+0x2a8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d869      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e2e:	4a94      	ldr	r2, [pc, #592]	@ (8002080 <HAL_GPIO_Init+0x2ac>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d04c      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e34:	4a92      	ldr	r2, [pc, #584]	@ (8002080 <HAL_GPIO_Init+0x2ac>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d863      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e3a:	4a92      	ldr	r2, [pc, #584]	@ (8002084 <HAL_GPIO_Init+0x2b0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d046      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e40:	4a90      	ldr	r2, [pc, #576]	@ (8002084 <HAL_GPIO_Init+0x2b0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d85d      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e46:	2b12      	cmp	r3, #18
 8001e48:	d82a      	bhi.n	8001ea0 <HAL_GPIO_Init+0xcc>
 8001e4a:	2b12      	cmp	r3, #18
 8001e4c:	d859      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e54 <HAL_GPIO_Init+0x80>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001ecf 	.word	0x08001ecf
 8001e58:	08001ea9 	.word	0x08001ea9
 8001e5c:	08001ebb 	.word	0x08001ebb
 8001e60:	08001efd 	.word	0x08001efd
 8001e64:	08001f03 	.word	0x08001f03
 8001e68:	08001f03 	.word	0x08001f03
 8001e6c:	08001f03 	.word	0x08001f03
 8001e70:	08001f03 	.word	0x08001f03
 8001e74:	08001f03 	.word	0x08001f03
 8001e78:	08001f03 	.word	0x08001f03
 8001e7c:	08001f03 	.word	0x08001f03
 8001e80:	08001f03 	.word	0x08001f03
 8001e84:	08001f03 	.word	0x08001f03
 8001e88:	08001f03 	.word	0x08001f03
 8001e8c:	08001f03 	.word	0x08001f03
 8001e90:	08001f03 	.word	0x08001f03
 8001e94:	08001f03 	.word	0x08001f03
 8001e98:	08001eb1 	.word	0x08001eb1
 8001e9c:	08001ec5 	.word	0x08001ec5
 8001ea0:	4a79      	ldr	r2, [pc, #484]	@ (8002088 <HAL_GPIO_Init+0x2b4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ea6:	e02c      	b.n	8001f02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	623b      	str	r3, [r7, #32]
          break;
 8001eae:	e029      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	623b      	str	r3, [r7, #32]
          break;
 8001eb8:	e024      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	3308      	adds	r3, #8
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e01f      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	330c      	adds	r3, #12
 8001eca:	623b      	str	r3, [r7, #32]
          break;
 8001ecc:	e01a      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	623b      	str	r3, [r7, #32]
          break;
 8001eda:	e013      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	611a      	str	r2, [r3, #16]
          break;
 8001eee:	e009      	b.n	8001f04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	615a      	str	r2, [r3, #20]
          break;
 8001efa:	e003      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
          break;
 8001f00:	e000      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          break;
 8001f02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2bff      	cmp	r3, #255	@ 0xff
 8001f08:	d801      	bhi.n	8001f0e <HAL_GPIO_Init+0x13a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	e001      	b.n	8001f12 <HAL_GPIO_Init+0x13e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3304      	adds	r3, #4
 8001f12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2bff      	cmp	r3, #255	@ 0xff
 8001f18:	d802      	bhi.n	8001f20 <HAL_GPIO_Init+0x14c>
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	e002      	b.n	8001f26 <HAL_GPIO_Init+0x152>
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f22:	3b08      	subs	r3, #8
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	210f      	movs	r1, #15
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	401a      	ands	r2, r3
 8001f38:	6a39      	ldr	r1, [r7, #32]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	431a      	orrs	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80b1 	beq.w	80020b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f54:	4b4d      	ldr	r3, [pc, #308]	@ (800208c <HAL_GPIO_Init+0x2b8>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a4c      	ldr	r2, [pc, #304]	@ (800208c <HAL_GPIO_Init+0x2b8>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b4a      	ldr	r3, [pc, #296]	@ (800208c <HAL_GPIO_Init+0x2b8>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f6c:	4a48      	ldr	r2, [pc, #288]	@ (8002090 <HAL_GPIO_Init+0x2bc>)
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a40      	ldr	r2, [pc, #256]	@ (8002094 <HAL_GPIO_Init+0x2c0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d013      	beq.n	8001fc0 <HAL_GPIO_Init+0x1ec>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002098 <HAL_GPIO_Init+0x2c4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00d      	beq.n	8001fbc <HAL_GPIO_Init+0x1e8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3e      	ldr	r2, [pc, #248]	@ (800209c <HAL_GPIO_Init+0x2c8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d007      	beq.n	8001fb8 <HAL_GPIO_Init+0x1e4>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3d      	ldr	r2, [pc, #244]	@ (80020a0 <HAL_GPIO_Init+0x2cc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_GPIO_Init+0x1e0>
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e006      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	e004      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e002      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc4:	f002 0203 	and.w	r2, r2, #3
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	4093      	lsls	r3, r2
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fd2:	492f      	ldr	r1, [pc, #188]	@ (8002090 <HAL_GPIO_Init+0x2bc>)
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fec:	4b2d      	ldr	r3, [pc, #180]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	492c      	ldr	r1, [pc, #176]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	43db      	mvns	r3, r3
 8002002:	4928      	ldr	r1, [pc, #160]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002004:	4013      	ands	r3, r2
 8002006:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002014:	4b23      	ldr	r3, [pc, #140]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	4922      	ldr	r1, [pc, #136]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	60cb      	str	r3, [r1, #12]
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	43db      	mvns	r3, r3
 800202a:	491e      	ldr	r1, [pc, #120]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 800202c:	4013      	ands	r3, r2
 800202e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800203c:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4918      	ldr	r1, [pc, #96]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800204a:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	43db      	mvns	r3, r3
 8002052:	4914      	ldr	r1, [pc, #80]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002054:	4013      	ands	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d021      	beq.n	80020a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002064:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	490e      	ldr	r1, [pc, #56]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
 8002070:	e021      	b.n	80020b6 <HAL_GPIO_Init+0x2e2>
 8002072:	bf00      	nop
 8002074:	10320000 	.word	0x10320000
 8002078:	10310000 	.word	0x10310000
 800207c:	10220000 	.word	0x10220000
 8002080:	10210000 	.word	0x10210000
 8002084:	10120000 	.word	0x10120000
 8002088:	10110000 	.word	0x10110000
 800208c:	40021000 	.word	0x40021000
 8002090:	40010000 	.word	0x40010000
 8002094:	40010800 	.word	0x40010800
 8002098:	40010c00 	.word	0x40010c00
 800209c:	40011000 	.word	0x40011000
 80020a0:	40011400 	.word	0x40011400
 80020a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <HAL_GPIO_Init+0x304>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	4909      	ldr	r1, [pc, #36]	@ (80020d8 <HAL_GPIO_Init+0x304>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	3301      	adds	r3, #1
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f47f ae8e 	bne.w	8001de8 <HAL_GPIO_Init+0x14>
  }
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	372c      	adds	r7, #44	@ 0x2c
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020f8:	e003      	b.n	8002102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	611a      	str	r2, [r3, #16]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e12b      	b.n	8002376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fa9a 	bl	800166c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	@ 0x24
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800215e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800216e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002170:	f003 f95c 	bl	800542c <HAL_RCC_GetPCLK1Freq>
 8002174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4a81      	ldr	r2, [pc, #516]	@ (8002380 <HAL_I2C_Init+0x274>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d807      	bhi.n	8002190 <HAL_I2C_Init+0x84>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a80      	ldr	r2, [pc, #512]	@ (8002384 <HAL_I2C_Init+0x278>)
 8002184:	4293      	cmp	r3, r2
 8002186:	bf94      	ite	ls
 8002188:	2301      	movls	r3, #1
 800218a:	2300      	movhi	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e006      	b.n	800219e <HAL_I2C_Init+0x92>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4a7d      	ldr	r2, [pc, #500]	@ (8002388 <HAL_I2C_Init+0x27c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	bf94      	ite	ls
 8002198:	2301      	movls	r3, #1
 800219a:	2300      	movhi	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0e7      	b.n	8002376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4a78      	ldr	r2, [pc, #480]	@ (800238c <HAL_I2C_Init+0x280>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0c9b      	lsrs	r3, r3, #18
 80021b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002380 <HAL_I2C_Init+0x274>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d802      	bhi.n	80021e0 <HAL_I2C_Init+0xd4>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	3301      	adds	r3, #1
 80021de:	e009      	b.n	80021f4 <HAL_I2C_Init+0xe8>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	4a69      	ldr	r2, [pc, #420]	@ (8002390 <HAL_I2C_Init+0x284>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	3301      	adds	r3, #1
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002206:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	495c      	ldr	r1, [pc, #368]	@ (8002380 <HAL_I2C_Init+0x274>)
 8002210:	428b      	cmp	r3, r1
 8002212:	d819      	bhi.n	8002248 <HAL_I2C_Init+0x13c>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1e59      	subs	r1, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002222:	1c59      	adds	r1, r3, #1
 8002224:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002228:	400b      	ands	r3, r1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_I2C_Init+0x138>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1e59      	subs	r1, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fbb1 f3f3 	udiv	r3, r1, r3
 800223c:	3301      	adds	r3, #1
 800223e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002242:	e051      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 8002244:	2304      	movs	r3, #4
 8002246:	e04f      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d111      	bne.n	8002274 <HAL_I2C_Init+0x168>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1e58      	subs	r0, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	440b      	add	r3, r1
 800225e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002262:	3301      	adds	r3, #1
 8002264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	e012      	b.n	800229a <HAL_I2C_Init+0x18e>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1e58      	subs	r0, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	0099      	lsls	r1, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	fbb0 f3f3 	udiv	r3, r0, r3
 800228a:	3301      	adds	r3, #1
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Init+0x196>
 800229e:	2301      	movs	r3, #1
 80022a0:	e022      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10e      	bne.n	80022c8 <HAL_I2C_Init+0x1bc>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1e58      	subs	r0, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	440b      	add	r3, r1
 80022b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022c6:	e00f      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	0099      	lsls	r1, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	6809      	ldr	r1, [r1, #0]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002316:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6911      	ldr	r1, [r2, #16]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68d2      	ldr	r2, [r2, #12]
 8002322:	4311      	orrs	r1, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	430b      	orrs	r3, r1
 800232a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	000186a0 	.word	0x000186a0
 8002384:	001e847f 	.word	0x001e847f
 8002388:	003d08ff 	.word	0x003d08ff
 800238c:	431bde83 	.word	0x431bde83
 8002390:	10624dd3 	.word	0x10624dd3

08002394 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	4608      	mov	r0, r1
 800239e:	4611      	mov	r1, r2
 80023a0:	461a      	mov	r2, r3
 80023a2:	4603      	mov	r3, r0
 80023a4:	817b      	strh	r3, [r7, #10]
 80023a6:	460b      	mov	r3, r1
 80023a8:	813b      	strh	r3, [r7, #8]
 80023aa:	4613      	mov	r3, r2
 80023ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023ae:	f7ff fbd5 	bl	8001b5c <HAL_GetTick>
 80023b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b20      	cmp	r3, #32
 80023be:	f040 80d9 	bne.w	8002574 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2319      	movs	r3, #25
 80023c8:	2201      	movs	r2, #1
 80023ca:	496d      	ldr	r1, [pc, #436]	@ (8002580 <HAL_I2C_Mem_Write+0x1ec>)
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 fccd 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80023d8:	2302      	movs	r3, #2
 80023da:	e0cc      	b.n	8002576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_I2C_Mem_Write+0x56>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e0c5      	b.n	8002576 <HAL_I2C_Mem_Write+0x1e2>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d007      	beq.n	8002410 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800241e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2221      	movs	r2, #33	@ 0x21
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2240      	movs	r2, #64	@ 0x40
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a3a      	ldr	r2, [r7, #32]
 800243a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002440:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4a4d      	ldr	r2, [pc, #308]	@ (8002584 <HAL_I2C_Mem_Write+0x1f0>)
 8002450:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002452:	88f8      	ldrh	r0, [r7, #6]
 8002454:	893a      	ldrh	r2, [r7, #8]
 8002456:	8979      	ldrh	r1, [r7, #10]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	4603      	mov	r3, r0
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 fb04 	bl	8002a70 <I2C_RequestMemoryWrite>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d052      	beq.n	8002514 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e081      	b.n	8002576 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fd92 	bl	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00d      	beq.n	800249e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	2b04      	cmp	r3, #4
 8002488:	d107      	bne.n	800249a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e06b      	b.n	8002576 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a2:	781a      	ldrb	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d11b      	bne.n	8002514 <HAL_I2C_Mem_Write+0x180>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d017      	beq.n	8002514 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1aa      	bne.n	8002472 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fd85 	bl	8003030 <I2C_WaitOnBTFFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00d      	beq.n	8002548 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	2b04      	cmp	r3, #4
 8002532:	d107      	bne.n	8002544 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002542:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e016      	b.n	8002576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
  }
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	00100002 	.word	0x00100002
 8002584:	ffff0000 	.word	0xffff0000

08002588 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	@ 0x30
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	4608      	mov	r0, r1
 8002592:	4611      	mov	r1, r2
 8002594:	461a      	mov	r2, r3
 8002596:	4603      	mov	r3, r0
 8002598:	817b      	strh	r3, [r7, #10]
 800259a:	460b      	mov	r3, r1
 800259c:	813b      	strh	r3, [r7, #8]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a6:	f7ff fad9 	bl	8001b5c <HAL_GetTick>
 80025aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	f040 8250 	bne.w	8002a5a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2319      	movs	r3, #25
 80025c0:	2201      	movs	r2, #1
 80025c2:	4982      	ldr	r1, [pc, #520]	@ (80027cc <HAL_I2C_Mem_Read+0x244>)
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fbd1 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80025d0:	2302      	movs	r3, #2
 80025d2:	e243      	b.n	8002a5c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_I2C_Mem_Read+0x5a>
 80025de:	2302      	movs	r3, #2
 80025e0:	e23c      	b.n	8002a5c <HAL_I2C_Mem_Read+0x4d4>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d007      	beq.n	8002608 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002616:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2222      	movs	r2, #34	@ 0x22
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2240      	movs	r2, #64	@ 0x40
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002632:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002638:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4a62      	ldr	r2, [pc, #392]	@ (80027d0 <HAL_I2C_Mem_Read+0x248>)
 8002648:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800264a:	88f8      	ldrh	r0, [r7, #6]
 800264c:	893a      	ldrh	r2, [r7, #8]
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	9301      	str	r3, [sp, #4]
 8002654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	4603      	mov	r3, r0
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fa9e 	bl	8002b9c <I2C_RequestMemoryRead>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e1f8      	b.n	8002a5c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266e:	2b00      	cmp	r3, #0
 8002670:	d113      	bne.n	800269a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e1cc      	b.n	8002a34 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d11e      	bne.n	80026e0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026b2:	b672      	cpsid	i
}
 80026b4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026dc:	b662      	cpsie	i
}
 80026de:	e035      	b.n	800274c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d11e      	bne.n	8002726 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026f8:	b672      	cpsid	i
}
 80026fa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002720:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002722:	b662      	cpsie	i
}
 8002724:	e012      	b.n	800274c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002734:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800274c:	e172      	b.n	8002a34 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002752:	2b03      	cmp	r3, #3
 8002754:	f200 811f 	bhi.w	8002996 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275c:	2b01      	cmp	r3, #1
 800275e:	d123      	bne.n	80027a8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002762:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fcab 	bl	80030c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e173      	b.n	8002a5c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027a6:	e145      	b.n	8002a34 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d152      	bne.n	8002856 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b6:	2200      	movs	r2, #0
 80027b8:	4906      	ldr	r1, [pc, #24]	@ (80027d4 <HAL_I2C_Mem_Read+0x24c>)
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 fad6 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e148      	b.n	8002a5c <HAL_I2C_Mem_Read+0x4d4>
 80027ca:	bf00      	nop
 80027cc:	00100002 	.word	0x00100002
 80027d0:	ffff0000 	.word	0xffff0000
 80027d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80027d8:	b672      	cpsid	i
}
 80027da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800281e:	b662      	cpsie	i
}
 8002820:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002854:	e0ee      	b.n	8002a34 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285c:	2200      	movs	r2, #0
 800285e:	4981      	ldr	r1, [pc, #516]	@ (8002a64 <HAL_I2C_Mem_Read+0x4dc>)
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fa83 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0f5      	b.n	8002a5c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800287e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002880:	b672      	cpsid	i
}
 8002882:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80028b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002a68 <HAL_I2C_Mem_Read+0x4e0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	08db      	lsrs	r3, r3, #3
 80028bc:	4a6b      	ldr	r2, [pc, #428]	@ (8002a6c <HAL_I2C_Mem_Read+0x4e4>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0a1a      	lsrs	r2, r3, #8
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00da      	lsls	r2, r3, #3
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d118      	bne.n	800290e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f043 0220 	orr.w	r2, r3, #32
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80028fe:	b662      	cpsie	i
}
 8002900:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0a6      	b.n	8002a5c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b04      	cmp	r3, #4
 800291a:	d1d9      	bne.n	80028d0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800295e:	b662      	cpsie	i
}
 8002960:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002994:	e04e      	b.n	8002a34 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002998:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fb90 	bl	80030c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e058      	b.n	8002a5c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d124      	bne.n	8002a34 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d107      	bne.n	8002a02 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a00:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f47f ae88 	bne.w	800274e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
  }
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3728      	adds	r7, #40	@ 0x28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	00010004 	.word	0x00010004
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	14f8b589 	.word	0x14f8b589

08002a70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	4608      	mov	r0, r1
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	817b      	strh	r3, [r7, #10]
 8002a82:	460b      	mov	r3, r1
 8002a84:	813b      	strh	r3, [r7, #8]
 8002a86:	4613      	mov	r3, r2
 8002a88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f960 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac0:	d103      	bne.n	8002aca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ac8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e05f      	b.n	8002b8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002adc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	492d      	ldr	r1, [pc, #180]	@ (8002b98 <I2C_RequestMemoryWrite+0x128>)
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f9bb 	bl	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e04c      	b.n	8002b8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0c:	6a39      	ldr	r1, [r7, #32]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fa46 	bl	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00d      	beq.n	8002b36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d107      	bne.n	8002b32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e02b      	b.n	8002b8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b3c:	893b      	ldrh	r3, [r7, #8]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]
 8002b46:	e021      	b.n	8002b8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b48:	893b      	ldrh	r3, [r7, #8]
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b58:	6a39      	ldr	r1, [r7, #32]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fa20 	bl	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00d      	beq.n	8002b82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d107      	bne.n	8002b7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e005      	b.n	8002b8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b82:	893b      	ldrh	r3, [r7, #8]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	00010002 	.word	0x00010002

08002b9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	817b      	strh	r3, [r7, #10]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	813b      	strh	r3, [r7, #8]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bc4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f8c2 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00d      	beq.n	8002c0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bfc:	d103      	bne.n	8002c06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0aa      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c0a:	897b      	ldrh	r3, [r7, #10]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	6a3a      	ldr	r2, [r7, #32]
 8002c1e:	4952      	ldr	r1, [pc, #328]	@ (8002d68 <I2C_RequestMemoryRead+0x1cc>)
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f91d 	bl	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e097      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c48:	6a39      	ldr	r1, [r7, #32]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f9a8 	bl	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00d      	beq.n	8002c72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d107      	bne.n	8002c6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e076      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c78:	893b      	ldrh	r3, [r7, #8]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	611a      	str	r2, [r3, #16]
 8002c82:	e021      	b.n	8002cc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c84:	893b      	ldrh	r3, [r7, #8]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c94:	6a39      	ldr	r1, [r7, #32]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f982 	bl	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d107      	bne.n	8002cba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e050      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cbe:	893b      	ldrh	r3, [r7, #8]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cca:	6a39      	ldr	r1, [r7, #32]
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f967 	bl	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00d      	beq.n	8002cf4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d107      	bne.n	8002cf0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e035      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f82b 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00d      	beq.n	8002d38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d2a:	d103      	bne.n	8002d34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e013      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d38:	897b      	ldrh	r3, [r7, #10]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4a:	6a3a      	ldr	r2, [r7, #32]
 8002d4c:	4906      	ldr	r1, [pc, #24]	@ (8002d68 <I2C_RequestMemoryRead+0x1cc>)
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f886 	bl	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	00010002 	.word	0x00010002

08002d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d7c:	e048      	b.n	8002e10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d044      	beq.n	8002e10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d86:	f7fe fee9 	bl	8001b5c <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d302      	bcc.n	8002d9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d139      	bne.n	8002e10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	0c1b      	lsrs	r3, r3, #16
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d10d      	bne.n	8002dc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	43da      	mvns	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4013      	ands	r3, r2
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	e00c      	b.n	8002ddc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	43da      	mvns	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	bf0c      	ite	eq
 8002dd4:	2301      	moveq	r3, #1
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d116      	bne.n	8002e10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e023      	b.n	8002e58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	0c1b      	lsrs	r3, r3, #16
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d10d      	bne.n	8002e36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	43da      	mvns	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4013      	ands	r3, r2
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	e00c      	b.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	43da      	mvns	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4013      	ands	r3, r2
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf0c      	ite	eq
 8002e48:	2301      	moveq	r3, #1
 8002e4a:	2300      	movne	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d093      	beq.n	8002d7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e6e:	e071      	b.n	8002f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e7e:	d123      	bne.n	8002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	f043 0204 	orr.w	r2, r3, #4
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e067      	b.n	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ece:	d041      	beq.n	8002f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed0:	f7fe fe44 	bl	8001b5c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d302      	bcc.n	8002ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d136      	bne.n	8002f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10c      	bne.n	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4013      	ands	r3, r2
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e00b      	b.n	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	43da      	mvns	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4013      	ands	r3, r2
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d016      	beq.n	8002f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e021      	b.n	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	0c1b      	lsrs	r3, r3, #16
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d10c      	bne.n	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	43da      	mvns	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf14      	ite	ne
 8002f70:	2301      	movne	r3, #1
 8002f72:	2300      	moveq	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e00b      	b.n	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4013      	ands	r3, r2
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf14      	ite	ne
 8002f8a:	2301      	movne	r3, #1
 8002f8c:	2300      	moveq	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f47f af6d 	bne.w	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fac:	e034      	b.n	8003018 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f8e3 	bl	800317a <I2C_IsAcknowledgeFailed>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e034      	b.n	8003028 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d028      	beq.n	8003018 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc6:	f7fe fdc9 	bl	8001b5c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d302      	bcc.n	8002fdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d11d      	bne.n	8003018 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe6:	2b80      	cmp	r3, #128	@ 0x80
 8002fe8:	d016      	beq.n	8003018 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e007      	b.n	8003028 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003022:	2b80      	cmp	r3, #128	@ 0x80
 8003024:	d1c3      	bne.n	8002fae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800303c:	e034      	b.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f89b 	bl	800317a <I2C_IsAcknowledgeFailed>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e034      	b.n	80030b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d028      	beq.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003056:	f7fe fd81 	bl	8001b5c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	429a      	cmp	r2, r3
 8003064:	d302      	bcc.n	800306c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d11d      	bne.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b04      	cmp	r3, #4
 8003078:	d016      	beq.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	f043 0220 	orr.w	r2, r3, #32
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e007      	b.n	80030b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d1c3      	bne.n	800303e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030cc:	e049      	b.n	8003162 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b10      	cmp	r3, #16
 80030da:	d119      	bne.n	8003110 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0210 	mvn.w	r2, #16
 80030e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e030      	b.n	8003172 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003110:	f7fe fd24 	bl	8001b5c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	429a      	cmp	r2, r3
 800311e:	d302      	bcc.n	8003126 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d11d      	bne.n	8003162 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003130:	2b40      	cmp	r3, #64	@ 0x40
 8003132:	d016      	beq.n	8003162 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e007      	b.n	8003172 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800316c:	2b40      	cmp	r3, #64	@ 0x40
 800316e:	d1ae      	bne.n	80030ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003190:	d11b      	bne.n	80031ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800319a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	f043 0204 	orr.w	r2, r3, #4
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0e8      	b.n	80033ba <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d106      	bne.n	8003202 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f007 fa0b 	bl	800a618 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2203      	movs	r2, #3
 8003206:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f003 f92c 	bl	8006472 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3304      	adds	r3, #4
 8003222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003224:	f003 f902 	bl	800642c <USB_CoreInit>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2202      	movs	r2, #2
 8003232:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0bf      	b.n	80033ba <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f003 f930 	bl	80064a6 <USB_SetCurrentMode>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0b0      	b.n	80033ba <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003258:	2300      	movs	r3, #0
 800325a:	73fb      	strb	r3, [r7, #15]
 800325c:	e03e      	b.n	80032dc <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800325e:	7bfa      	ldrb	r2, [r7, #15]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	440b      	add	r3, r1
 800326c:	3311      	adds	r3, #17
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003272:	7bfa      	ldrb	r2, [r7, #15]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	3310      	adds	r3, #16
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003286:	7bfa      	ldrb	r2, [r7, #15]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	3313      	adds	r3, #19
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	440b      	add	r3, r1
 80032a8:	3320      	adds	r3, #32
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	3324      	adds	r3, #36	@ 0x24
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	440b      	add	r3, r1
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	3301      	adds	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	791b      	ldrb	r3, [r3, #4]
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d3bb      	bcc.n	800325e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
 80032ea:	e044      	b.n	8003376 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	440b      	add	r3, r1
 8003310:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	440b      	add	r3, r1
 8003352:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	440b      	add	r3, r1
 8003368:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	3301      	adds	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	791b      	ldrb	r3, [r3, #4]
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	429a      	cmp	r2, r3
 800337e:	d3b5      	bcc.n	80032ec <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	cb0e      	ldmia	r3, {r1, r2, r3}
 800338a:	f003 f898 	bl	80064be <USB_DevInit>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e00c      	b.n	80033ba <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f005 fb17 	bl	80089e6 <USB_DevDisconnect>

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_PCD_Start+0x16>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e016      	b.n	8003406 <HAL_PCD_Start+0x44>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f003 f82e 	bl	8006446 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80033ea:	2101      	movs	r1, #1
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f007 fb86 	bl	800aafe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f005 faeb 	bl	80089d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b088      	sub	sp, #32
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f005 faed 	bl	80089fa <USB_ReadInterrupts>
 8003420:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fb1a 	bl	8003a66 <PCD_EP_ISR_Handler>

    return;
 8003432:	e119      	b.n	8003668 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343a:	2b00      	cmp	r3, #0
 800343c:	d013      	beq.n	8003466 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003446:	b29a      	uxth	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003450:	b292      	uxth	r2, r2
 8003452:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f007 f959 	bl	800a70e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800345c:	2100      	movs	r1, #0
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f905 	bl	800366e <HAL_PCD_SetAddress>

    return;
 8003464:	e100      	b.n	8003668 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00c      	beq.n	800348a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003478:	b29a      	uxth	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003482:	b292      	uxth	r2, r2
 8003484:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003488:	e0ee      	b.n	8003668 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00c      	beq.n	80034ae <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800349c:	b29a      	uxth	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034a6:	b292      	uxth	r2, r2
 80034a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80034ac:	e0dc      	b.n	8003668 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d027      	beq.n	8003508 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0204 	bic.w	r2, r2, #4
 80034ca:	b292      	uxth	r2, r2
 80034cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80034d8:	b29a      	uxth	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0208 	bic.w	r2, r2, #8
 80034e2:	b292      	uxth	r2, r2
 80034e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f007 f949 	bl	800a780 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003500:	b292      	uxth	r2, r2
 8003502:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003506:	e0af      	b.n	8003668 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8083 	beq.w	800361a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003514:	2300      	movs	r3, #0
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e010      	b.n	800353c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	7ffb      	ldrb	r3, [r7, #31]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	7ffb      	ldrb	r3, [r7, #31]
 8003528:	8812      	ldrh	r2, [r2, #0]
 800352a:	b292      	uxth	r2, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	3320      	adds	r3, #32
 8003530:	443b      	add	r3, r7
 8003532:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003536:	7ffb      	ldrb	r3, [r7, #31]
 8003538:	3301      	adds	r3, #1
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	7ffb      	ldrb	r3, [r7, #31]
 800353e:	2b07      	cmp	r3, #7
 8003540:	d9eb      	bls.n	800351a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800354a:	b29a      	uxth	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	b292      	uxth	r2, r2
 8003556:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003562:	b29a      	uxth	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	b292      	uxth	r2, r2
 800356e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003572:	bf00      	nop
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800357c:	b29b      	uxth	r3, r3
 800357e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f6      	beq.n	8003574 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800358e:	b29a      	uxth	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003598:	b292      	uxth	r2, r2
 800359a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800359e:	2300      	movs	r3, #0
 80035a0:	77fb      	strb	r3, [r7, #31]
 80035a2:	e00f      	b.n	80035c4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80035a4:	7ffb      	ldrb	r3, [r7, #31]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	4611      	mov	r1, r2
 80035ac:	7ffa      	ldrb	r2, [r7, #31]
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	440a      	add	r2, r1
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	3320      	adds	r3, #32
 80035b6:	443b      	add	r3, r7
 80035b8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80035bc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80035be:	7ffb      	ldrb	r3, [r7, #31]
 80035c0:	3301      	adds	r3, #1
 80035c2:	77fb      	strb	r3, [r7, #31]
 80035c4:	7ffb      	ldrb	r3, [r7, #31]
 80035c6:	2b07      	cmp	r3, #7
 80035c8:	d9ec      	bls.n	80035a4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0208 	orr.w	r2, r2, #8
 80035dc:	b292      	uxth	r2, r2
 80035de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035f4:	b292      	uxth	r2, r2
 80035f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003602:	b29a      	uxth	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0204 	orr.w	r2, r2, #4
 800360c:	b292      	uxth	r2, r2
 800360e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f007 f89a 	bl	800a74c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003618:	e026      	b.n	8003668 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00f      	beq.n	8003644 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800362c:	b29a      	uxth	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003636:	b292      	uxth	r2, r2
 8003638:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f007 f858 	bl	800a6f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003642:	e011      	b.n	8003668 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003656:	b29a      	uxth	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003660:	b292      	uxth	r2, r2
 8003662:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003666:	bf00      	nop
  }
}
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_PCD_SetAddress+0x1a>
 8003684:	2302      	movs	r3, #2
 8003686:	e012      	b.n	80036ae <HAL_PCD_SetAddress+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f005 f984 	bl	80089ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	4608      	mov	r0, r1
 80036c0:	4611      	mov	r1, r2
 80036c2:	461a      	mov	r2, r3
 80036c4:	4603      	mov	r3, r0
 80036c6:	70fb      	strb	r3, [r7, #3]
 80036c8:	460b      	mov	r3, r1
 80036ca:	803b      	strh	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	da0e      	bge.n	80036fa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	f003 0207 	and.w	r2, r3, #7
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	3310      	adds	r3, #16
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	4413      	add	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	705a      	strb	r2, [r3, #1]
 80036f8:	e00e      	b.n	8003718 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	f003 0207 	and.w	r2, r3, #7
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	4413      	add	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003724:	883a      	ldrh	r2, [r7, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	78ba      	ldrb	r2, [r7, #2]
 800372e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003730:	78bb      	ldrb	r3, [r7, #2]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d102      	bne.n	800373c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_PCD_EP_Open+0x94>
 8003746:	2302      	movs	r3, #2
 8003748:	e00e      	b.n	8003768 <HAL_PCD_EP_Open+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68f9      	ldr	r1, [r7, #12]
 8003758:	4618      	mov	r0, r3
 800375a:	f002 fecd 	bl	80064f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003766:	7afb      	ldrb	r3, [r7, #11]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800377c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003780:	2b00      	cmp	r3, #0
 8003782:	da0e      	bge.n	80037a2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	f003 0207 	and.w	r2, r3, #7
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	3310      	adds	r3, #16
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	4413      	add	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	705a      	strb	r2, [r3, #1]
 80037a0:	e00e      	b.n	80037c0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	f003 0207 	and.w	r2, r3, #7
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_PCD_EP_Close+0x6a>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e00e      	b.n	80037f8 <HAL_PCD_EP_Close+0x88>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68f9      	ldr	r1, [r7, #12]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f003 fa45 	bl	8006c78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	460b      	mov	r3, r1
 800380e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003810:	7afb      	ldrb	r3, [r7, #11]
 8003812:	f003 0207 	and.w	r2, r3, #7
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4413      	add	r3, r2
 8003826:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2200      	movs	r2, #0
 8003838:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2200      	movs	r2, #0
 800383e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003840:	7afb      	ldrb	r3, [r7, #11]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	b2da      	uxtb	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6979      	ldr	r1, [r7, #20]
 8003852:	4618      	mov	r0, r3
 8003854:	f003 fbfc 	bl	8007050 <USB_EPStartXfer>

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	f003 0207 	and.w	r2, r3, #7
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	440b      	add	r3, r1
 8003880:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003884:	681b      	ldr	r3, [r3, #0]
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	460b      	mov	r3, r1
 800389e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a0:	7afb      	ldrb	r3, [r7, #11]
 80038a2:	f003 0207 	and.w	r2, r3, #7
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	3310      	adds	r3, #16
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2200      	movs	r2, #0
 80038d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2201      	movs	r2, #1
 80038da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038dc:	7afb      	ldrb	r3, [r7, #11]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6979      	ldr	r1, [r7, #20]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f003 fbae 	bl	8007050 <USB_EPStartXfer>

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	460b      	mov	r3, r1
 8003908:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	7912      	ldrb	r2, [r2, #4]
 8003914:	4293      	cmp	r3, r2
 8003916:	d901      	bls.n	800391c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e04c      	b.n	80039b6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800391c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003920:	2b00      	cmp	r3, #0
 8003922:	da0e      	bge.n	8003942 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	f003 0207 	and.w	r2, r3, #7
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	3310      	adds	r3, #16
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	705a      	strb	r2, [r3, #1]
 8003940:	e00c      	b.n	800395c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	4413      	add	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_PCD_EP_SetStall+0x7e>
 8003978:	2302      	movs	r3, #2
 800397a:	e01c      	b.n	80039b6 <HAL_PCD_EP_SetStall+0xb8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68f9      	ldr	r1, [r7, #12]
 800398a:	4618      	mov	r0, r3
 800398c:	f004 ff11 	bl	80087b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	2b00      	cmp	r3, #0
 8003998:	d108      	bne.n	80039ac <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f005 f836 	bl	8008a18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	7912      	ldrb	r2, [r2, #4]
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d901      	bls.n	80039dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e040      	b.n	8003a5e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	da0e      	bge.n	8003a02 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	f003 0207 	and.w	r2, r3, #7
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	3310      	adds	r3, #16
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	4413      	add	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	705a      	strb	r2, [r3, #1]
 8003a00:	e00e      	b.n	8003a20 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	f003 0207 	and.w	r2, r3, #7
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_PCD_EP_ClrStall+0x82>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e00e      	b.n	8003a5e <HAL_PCD_EP_ClrStall+0xa0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68f9      	ldr	r1, [r7, #12]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f004 feff 	bl	8008852 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b096      	sub	sp, #88	@ 0x58
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a6e:	e3bb      	b.n	80041e8 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a78:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003a7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003a8a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f040 8175 	bne.w	8003d7e <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003a94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d14e      	bne.n	8003b3e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab0:	81fb      	strh	r3, [r7, #14]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	89fb      	ldrh	r3, [r7, #14]
 8003ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3310      	adds	r3, #16
 8003ac8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	3302      	adds	r3, #2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	441a      	add	r2, r3
 8003b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b02:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003b04:	2100      	movs	r1, #0
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f006 fdd9 	bl	800a6be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	7b5b      	ldrb	r3, [r3, #13]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8368 	beq.w	80041e8 <PCD_EP_ISR_Handler+0x782>
 8003b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f040 8363 	bne.w	80041e8 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	7b5b      	ldrb	r3, [r3, #13]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	735a      	strb	r2, [r3, #13]
 8003b3c:	e354      	b.n	80041e8 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b44:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d034      	beq.n	8003bc6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4413      	add	r3, r2
 8003b70:	3306      	adds	r3, #6
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b86:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b94:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b98:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f004 ff8c 	bl	8008ab8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003bac:	4013      	ands	r3, r2
 8003bae:	823b      	strh	r3, [r7, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	8a3a      	ldrh	r2, [r7, #16]
 8003bb6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bba:	b292      	uxth	r2, r2
 8003bbc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f006 fd50 	bl	800a664 <HAL_PCD_SetupStageCallback>
 8003bc4:	e310      	b.n	80041e8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003bc6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f280 830c 	bge.w	80041e8 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003bdc:	4013      	ands	r3, r2
 8003bde:	83fb      	strh	r3, [r7, #30]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	8bfa      	ldrh	r2, [r7, #30]
 8003be6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bea:	b292      	uxth	r2, r2
 8003bec:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	3306      	adds	r3, #6
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c18:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d019      	beq.n	8003c56 <PCD_EP_ISR_Handler+0x1f0>
 8003c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d015      	beq.n	8003c56 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c30:	6959      	ldr	r1, [r3, #20]
 8003c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c34:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c38:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f004 ff3c 	bl	8008ab8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c42:	695a      	ldr	r2, [r3, #20]
 8003c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	441a      	add	r2, r3
 8003c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c4e:	2100      	movs	r1, #0
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f006 fd19 	bl	800a688 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003c60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f040 82bd 	bne.w	80041e8 <PCD_EP_ISR_Handler+0x782>
 8003c6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c72:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003c76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c7a:	f000 82b5 	beq.w	80041e8 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	4413      	add	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	801a      	strh	r2, [r3, #0]
 8003cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cb4:	d91d      	bls.n	8003cf2 <PCD_EP_ISR_Handler+0x28c>
 8003cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d102      	bne.n	8003cd0 <PCD_EP_ISR_Handler+0x26a>
 8003cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	029b      	lsls	r3, r3, #10
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	801a      	strh	r2, [r3, #0]
 8003cf0:	e026      	b.n	8003d40 <PCD_EP_ISR_Handler+0x2da>
 8003cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <PCD_EP_ISR_Handler+0x2aa>
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	801a      	strh	r2, [r3, #0]
 8003d0e:	e017      	b.n	8003d40 <PCD_EP_ISR_Handler+0x2da>
 8003d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <PCD_EP_ISR_Handler+0x2c4>
 8003d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d26:	3301      	adds	r3, #1
 8003d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	029b      	lsls	r3, r3, #10
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d50:	827b      	strh	r3, [r7, #18]
 8003d52:	8a7b      	ldrh	r3, [r7, #18]
 8003d54:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003d58:	827b      	strh	r3, [r7, #18]
 8003d5a:	8a7b      	ldrh	r3, [r7, #18]
 8003d5c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003d60:	827b      	strh	r3, [r7, #18]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	8a7b      	ldrh	r3, [r7, #18]
 8003d68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8013      	strh	r3, [r2, #0]
 8003d7c:	e234      	b.n	80041e8 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d92:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f280 80fc 	bge.w	8003f94 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003db2:	4013      	ands	r3, r2
 8003db4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003dca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dce:	b292      	uxth	r2, r2
 8003dd0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003dd2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dea:	7b1b      	ldrb	r3, [r3, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d125      	bne.n	8003e3c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	3306      	adds	r3, #6
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e18:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003e1c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8092 	beq.w	8003f4a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e2c:	6959      	ldr	r1, [r3, #20]
 8003e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e30:	88da      	ldrh	r2, [r3, #6]
 8003e32:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003e36:	f004 fe3f 	bl	8008ab8 <USB_ReadPMA>
 8003e3a:	e086      	b.n	8003f4a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e3e:	78db      	ldrb	r3, [r3, #3]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d10a      	bne.n	8003e5a <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003e44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e48:	461a      	mov	r2, r3
 8003e4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f9d9 	bl	8004204 <HAL_PCD_EP_DB_Receive>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003e58:	e077      	b.n	8003f4a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e74:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	441a      	add	r2, r3
 8003e86:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d024      	beq.n	8003f02 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	3302      	adds	r3, #2
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003ee4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d02e      	beq.n	8003f4a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef2:	6959      	ldr	r1, [r3, #20]
 8003ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef6:	891a      	ldrh	r2, [r3, #8]
 8003ef8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003efc:	f004 fddc 	bl	8008ab8 <USB_ReadPMA>
 8003f00:	e023      	b.n	8003f4a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	3306      	adds	r3, #6
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f2a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003f2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f3c:	6959      	ldr	r1, [r3, #20]
 8003f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f40:	895a      	ldrh	r2, [r3, #10]
 8003f42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f46:	f004 fdb7 	bl	8008ab8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4c:	69da      	ldr	r2, [r3, #28]
 8003f4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f52:	441a      	add	r2, r3
 8003f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f56:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f60:	441a      	add	r2, r3
 8003f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f64:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <PCD_EP_ISR_Handler+0x514>
 8003f6e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d206      	bcs.n	8003f88 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f006 fb81 	bl	800a688 <HAL_PCD_DataOutStageCallback>
 8003f86:	e005      	b.n	8003f94 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f003 f85e 	bl	8007050 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8123 	beq.w	80041e8 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003fa2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	3310      	adds	r3, #16
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff4:	78db      	ldrb	r3, [r3, #3]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	f040 80a2 	bne.w	8004140 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffe:	2200      	movs	r2, #0
 8004000:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004004:	7b1b      	ldrb	r3, [r3, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 8093 	beq.w	8004132 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800400c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d046      	beq.n	80040a6 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401a:	785b      	ldrb	r3, [r3, #1]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d126      	bne.n	800406e <PCD_EP_ISR_Handler+0x608>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800402e:	b29b      	uxth	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	4413      	add	r3, r2
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24
 8004038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	011a      	lsls	r2, r3, #4
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	4413      	add	r3, r2
 8004042:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004046:	623b      	str	r3, [r7, #32]
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004052:	b29a      	uxth	r2, r3
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	801a      	strh	r2, [r3, #0]
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	b29b      	uxth	r3, r3
 800405e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004066:	b29a      	uxth	r2, r3
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	e061      	b.n	8004132 <PCD_EP_ISR_Handler+0x6cc>
 800406e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004070:	785b      	ldrb	r3, [r3, #1]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d15d      	bne.n	8004132 <PCD_EP_ISR_Handler+0x6cc>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004084:	b29b      	uxth	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408a:	4413      	add	r3, r2
 800408c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800408e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	011a      	lsls	r2, r3, #4
 8004094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004096:	4413      	add	r3, r2
 8004098:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800409c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800409e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a0:	2200      	movs	r2, #0
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	e045      	b.n	8004132 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d126      	bne.n	8004102 <PCD_EP_ISR_Handler+0x69c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c8:	4413      	add	r3, r2
 80040ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80040cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	011a      	lsls	r2, r3, #4
 80040d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d4:	4413      	add	r3, r2
 80040d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040da:	633b      	str	r3, [r7, #48]	@ 0x30
 80040dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ea:	801a      	strh	r2, [r3, #0]
 80040ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	e017      	b.n	8004132 <PCD_EP_ISR_Handler+0x6cc>
 8004102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004104:	785b      	ldrb	r3, [r3, #1]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d113      	bne.n	8004132 <PCD_EP_ISR_Handler+0x6cc>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004112:	b29b      	uxth	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004118:	4413      	add	r3, r2
 800411a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800411c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	011a      	lsls	r2, r3, #4
 8004122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004124:	4413      	add	r3, r2
 8004126:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800412a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800412c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412e:	2200      	movs	r2, #0
 8004130:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	4619      	mov	r1, r3
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f006 fac0 	bl	800a6be <HAL_PCD_DataInStageCallback>
 800413e:	e053      	b.n	80041e8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004140:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d146      	bne.n	80041da <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004154:	b29b      	uxth	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4413      	add	r3, r2
 8004160:	3302      	adds	r3, #2
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004174:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800417a:	699a      	ldr	r2, [r3, #24]
 800417c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004180:	429a      	cmp	r2, r3
 8004182:	d907      	bls.n	8004194 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004186:	699a      	ldr	r2, [r3, #24]
 8004188:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800418c:	1ad2      	subs	r2, r2, r3
 800418e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004190:	619a      	str	r2, [r3, #24]
 8004192:	e002      	b.n	800419a <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004196:	2200      	movs	r2, #0
 8004198:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800419a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f006 fa88 	bl	800a6be <HAL_PCD_DataInStageCallback>
 80041ae:	e01b      	b.n	80041e8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80041b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b2:	695a      	ldr	r2, [r3, #20]
 80041b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80041b8:	441a      	add	r2, r3
 80041ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041bc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80041be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80041c6:	441a      	add	r2, r3
 80041c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ca:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041d2:	4618      	mov	r0, r3
 80041d4:	f002 ff3c 	bl	8007050 <USB_EPStartXfer>
 80041d8:	e006      	b.n	80041e8 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80041da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041de:	461a      	mov	r2, r3
 80041e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f91b 	bl	800441e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	b21b      	sxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f6ff ac3b 	blt.w	8003a70 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3758      	adds	r7, #88	@ 0x58
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	4613      	mov	r3, r2
 8004210:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d07e      	beq.n	800431a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004224:	b29b      	uxth	r3, r3
 8004226:	461a      	mov	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4413      	add	r3, r2
 8004230:	3302      	adds	r3, #2
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004244:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	699a      	ldr	r2, [r3, #24]
 800424a:	8b7b      	ldrh	r3, [r7, #26]
 800424c:	429a      	cmp	r2, r3
 800424e:	d306      	bcc.n	800425e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	8b7b      	ldrh	r3, [r7, #26]
 8004256:	1ad2      	subs	r2, r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	619a      	str	r2, [r3, #24]
 800425c:	e002      	b.n	8004264 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2200      	movs	r2, #0
 8004262:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d123      	bne.n	80042b4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004286:	833b      	strh	r3, [r7, #24]
 8004288:	8b3b      	ldrh	r3, [r7, #24]
 800428a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800428e:	833b      	strh	r3, [r7, #24]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	441a      	add	r2, r3
 800429e:	8b3b      	ldrh	r3, [r7, #24]
 80042a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01f      	beq.n	80042fe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d8:	82fb      	strh	r3, [r7, #22]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	441a      	add	r2, r3
 80042e8:	8afb      	ldrh	r3, [r7, #22]
 80042ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80042fe:	8b7b      	ldrh	r3, [r7, #26]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8087 	beq.w	8004414 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6959      	ldr	r1, [r3, #20]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	891a      	ldrh	r2, [r3, #8]
 8004312:	8b7b      	ldrh	r3, [r7, #26]
 8004314:	f004 fbd0 	bl	8008ab8 <USB_ReadPMA>
 8004318:	e07c      	b.n	8004414 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004322:	b29b      	uxth	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	3306      	adds	r3, #6
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004342:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	699a      	ldr	r2, [r3, #24]
 8004348:	8b7b      	ldrh	r3, [r7, #26]
 800434a:	429a      	cmp	r2, r3
 800434c:	d306      	bcc.n	800435c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	8b7b      	ldrh	r3, [r7, #26]
 8004354:	1ad2      	subs	r2, r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	619a      	str	r2, [r3, #24]
 800435a:	e002      	b.n	8004362 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2200      	movs	r2, #0
 8004360:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d123      	bne.n	80043b2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004384:	83fb      	strh	r3, [r7, #30]
 8004386:	8bfb      	ldrh	r3, [r7, #30]
 8004388:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800438c:	83fb      	strh	r3, [r7, #30]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	441a      	add	r2, r3
 800439c:	8bfb      	ldrh	r3, [r7, #30]
 800439e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d11f      	bne.n	80043fc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d6:	83bb      	strh	r3, [r7, #28]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	441a      	add	r2, r3
 80043e6:	8bbb      	ldrh	r3, [r7, #28]
 80043e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80043fc:	8b7b      	ldrh	r3, [r7, #26]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d008      	beq.n	8004414 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	6959      	ldr	r1, [r3, #20]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	895a      	ldrh	r2, [r3, #10]
 800440e:	8b7b      	ldrh	r3, [r7, #26]
 8004410:	f004 fb52 	bl	8008ab8 <USB_ReadPMA>
    }
  }

  return count;
 8004414:	8b7b      	ldrh	r3, [r7, #26]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b0a4      	sub	sp, #144	@ 0x90
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	4613      	mov	r3, r2
 800442a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 81dd 	beq.w	80047f2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004440:	b29b      	uxth	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	3302      	adds	r3, #2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004460:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800446c:	429a      	cmp	r2, r3
 800446e:	d907      	bls.n	8004480 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004478:	1ad2      	subs	r2, r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	619a      	str	r2, [r3, #24]
 800447e:	e002      	b.n	8004486 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2200      	movs	r2, #0
 8004484:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 80b9 	bne.w	8004602 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	785b      	ldrb	r3, [r3, #1]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d126      	bne.n	80044e6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	461a      	mov	r2, r3
 80044aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ac:	4413      	add	r3, r2
 80044ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	011a      	lsls	r2, r3, #4
 80044b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b8:	4413      	add	r3, r2
 80044ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80044be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ce:	801a      	strh	r2, [r3, #0]
 80044d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044de:	b29a      	uxth	r2, r3
 80044e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	e01a      	b.n	800451c <HAL_PCD_EP_DB_Transmit+0xfe>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	785b      	ldrb	r3, [r3, #1]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d116      	bne.n	800451c <HAL_PCD_EP_DB_Transmit+0xfe>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004502:	4413      	add	r3, r2
 8004504:	637b      	str	r3, [r7, #52]	@ 0x34
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	011a      	lsls	r2, r3, #4
 800450c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800450e:	4413      	add	r3, r2
 8004510:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004514:	633b      	str	r3, [r7, #48]	@ 0x30
 8004516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004518:	2200      	movs	r2, #0
 800451a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d126      	bne.n	8004578 <HAL_PCD_EP_DB_Transmit+0x15a>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004538:	b29b      	uxth	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	4413      	add	r3, r2
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	011a      	lsls	r2, r3, #4
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	4413      	add	r3, r2
 800454c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800455c:	b29a      	uxth	r2, r3
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	801a      	strh	r2, [r3, #0]
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800456c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004570:	b29a      	uxth	r2, r3
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	801a      	strh	r2, [r3, #0]
 8004576:	e017      	b.n	80045a8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d113      	bne.n	80045a8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004588:	b29b      	uxth	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458e:	4413      	add	r3, r2
 8004590:	627b      	str	r3, [r7, #36]	@ 0x24
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	011a      	lsls	r2, r3, #4
 8004598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459a:	4413      	add	r3, r2
 800459c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045a0:	623b      	str	r3, [r7, #32]
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	2200      	movs	r2, #0
 80045a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	4619      	mov	r1, r3
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f006 f885 	bl	800a6be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 82fc 	beq.w	8004bb8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045da:	82fb      	strh	r3, [r7, #22]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	441a      	add	r2, r3
 80045ea:	8afb      	ldrh	r3, [r7, #22]
 80045ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	8013      	strh	r3, [r2, #0]
 8004600:	e2da      	b.n	8004bb8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d021      	beq.n	8004650 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b29b      	uxth	r3, r3
 800461e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004626:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	441a      	add	r2, r3
 8004638:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800463c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004644:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004656:	2b01      	cmp	r3, #1
 8004658:	f040 82ae 	bne.w	8004bb8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004664:	441a      	add	r2, r3
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	69da      	ldr	r2, [r3, #28]
 800466e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004672:	441a      	add	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	6a1a      	ldr	r2, [r3, #32]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d30b      	bcc.n	800469c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	6a1a      	ldr	r2, [r3, #32]
 8004690:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004694:	1ad2      	subs	r2, r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	621a      	str	r2, [r3, #32]
 800469a:	e017      	b.n	80046cc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d108      	bne.n	80046b6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80046a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80046b4:	e00a      	b.n	80046cc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2200      	movs	r2, #0
 80046ca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	785b      	ldrb	r3, [r3, #1]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d165      	bne.n	80047a0 <HAL_PCD_EP_DB_Transmit+0x382>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046e8:	4413      	add	r3, r2
 80046ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	011a      	lsls	r2, r3, #4
 80046f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f4:	4413      	add	r3, r2
 80046f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80046fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004706:	b29a      	uxth	r2, r3
 8004708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470a:	801a      	strh	r2, [r3, #0]
 800470c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004710:	2b3e      	cmp	r3, #62	@ 0x3e
 8004712:	d91d      	bls.n	8004750 <HAL_PCD_EP_DB_Transmit+0x332>
 8004714:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800471c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <HAL_PCD_EP_DB_Transmit+0x310>
 8004728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800472a:	3b01      	subs	r3, #1
 800472c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800472e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29a      	uxth	r2, r3
 8004734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004736:	b29b      	uxth	r3, r3
 8004738:	029b      	lsls	r3, r3, #10
 800473a:	b29b      	uxth	r3, r3
 800473c:	4313      	orrs	r3, r2
 800473e:	b29b      	uxth	r3, r3
 8004740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004748:	b29a      	uxth	r2, r3
 800474a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474c:	801a      	strh	r2, [r3, #0]
 800474e:	e044      	b.n	80047da <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10a      	bne.n	800476e <HAL_PCD_EP_DB_Transmit+0x350>
 8004758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004766:	b29a      	uxth	r2, r3
 8004768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	e035      	b.n	80047da <HAL_PCD_EP_DB_Transmit+0x3bc>
 800476e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004772:	085b      	lsrs	r3, r3, #1
 8004774:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004776:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004784:	3301      	adds	r3, #1
 8004786:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	b29a      	uxth	r2, r3
 800478e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004790:	b29b      	uxth	r3, r3
 8004792:	029b      	lsls	r3, r3, #10
 8004794:	b29b      	uxth	r3, r3
 8004796:	4313      	orrs	r3, r2
 8004798:	b29a      	uxth	r2, r3
 800479a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479c:	801a      	strh	r2, [r3, #0]
 800479e:	e01c      	b.n	80047da <HAL_PCD_EP_DB_Transmit+0x3bc>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d118      	bne.n	80047da <HAL_PCD_EP_DB_Transmit+0x3bc>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047bc:	4413      	add	r3, r2
 80047be:	647b      	str	r3, [r7, #68]	@ 0x44
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	011a      	lsls	r2, r3, #4
 80047c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047c8:	4413      	add	r3, r2
 80047ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80047d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047d8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	6959      	ldr	r1, [r3, #20]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	891a      	ldrh	r2, [r3, #8]
 80047e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f004 f91f 	bl	8008a2e <USB_WritePMA>
 80047f0:	e1e2      	b.n	8004bb8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4413      	add	r3, r2
 8004806:	3306      	adds	r3, #6
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800481a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004826:	429a      	cmp	r2, r3
 8004828:	d307      	bcc.n	800483a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004832:	1ad2      	subs	r2, r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	619a      	str	r2, [r3, #24]
 8004838:	e002      	b.n	8004840 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2200      	movs	r2, #0
 800483e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f040 80c0 	bne.w	80049ca <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	785b      	ldrb	r3, [r3, #1]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d126      	bne.n	80048a0 <HAL_PCD_EP_DB_Transmit+0x482>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004860:	b29b      	uxth	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004866:	4413      	add	r3, r2
 8004868:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	011a      	lsls	r2, r3, #4
 8004870:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004872:	4413      	add	r3, r2
 8004874:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004878:	67bb      	str	r3, [r7, #120]	@ 0x78
 800487a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004884:	b29a      	uxth	r2, r3
 8004886:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004898:	b29a      	uxth	r2, r3
 800489a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	e01a      	b.n	80048d6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	785b      	ldrb	r3, [r3, #1]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d116      	bne.n	80048d6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048bc:	4413      	add	r3, r2
 80048be:	667b      	str	r3, [r7, #100]	@ 0x64
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	011a      	lsls	r2, r3, #4
 80048c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048c8:	4413      	add	r3, r2
 80048ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80048ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80048d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048d2:	2200      	movs	r2, #0
 80048d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	677b      	str	r3, [r7, #116]	@ 0x74
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	785b      	ldrb	r3, [r3, #1]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d12b      	bne.n	800493c <HAL_PCD_EP_DB_Transmit+0x51e>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	461a      	mov	r2, r3
 80048f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048f8:	4413      	add	r3, r2
 80048fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	011a      	lsls	r2, r3, #4
 8004902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004904:	4413      	add	r3, r2
 8004906:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800490a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800490e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800491a:	b29a      	uxth	r2, r3
 800491c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004920:	801a      	strh	r2, [r3, #0]
 8004922:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	b29b      	uxth	r3, r3
 800492a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800492e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004932:	b29a      	uxth	r2, r3
 8004934:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004938:	801a      	strh	r2, [r3, #0]
 800493a:	e017      	b.n	800496c <HAL_PCD_EP_DB_Transmit+0x54e>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	785b      	ldrb	r3, [r3, #1]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d113      	bne.n	800496c <HAL_PCD_EP_DB_Transmit+0x54e>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800494c:	b29b      	uxth	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004952:	4413      	add	r3, r2
 8004954:	677b      	str	r3, [r7, #116]	@ 0x74
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	011a      	lsls	r2, r3, #4
 800495c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800495e:	4413      	add	r3, r2
 8004960:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004964:	673b      	str	r3, [r7, #112]	@ 0x70
 8004966:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004968:	2200      	movs	r2, #0
 800496a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	4619      	mov	r1, r3
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f005 fea3 	bl	800a6be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800497e:	2b00      	cmp	r3, #0
 8004980:	f040 811a 	bne.w	8004bb8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800499a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800499e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	441a      	add	r2, r3
 80049b0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80049b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	8013      	strh	r3, [r2, #0]
 80049c8:	e0f6      	b.n	8004bb8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d121      	bne.n	8004a18 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	441a      	add	r2, r3
 8004a00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	f040 80ca 	bne.w	8004bb8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	695a      	ldr	r2, [r3, #20]
 8004a28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a2c:	441a      	add	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	69da      	ldr	r2, [r3, #28]
 8004a36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a3a:	441a      	add	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	6a1a      	ldr	r2, [r3, #32]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d30b      	bcc.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6a1a      	ldr	r2, [r3, #32]
 8004a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a5c:	1ad2      	subs	r2, r2, r3
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	621a      	str	r2, [r3, #32]
 8004a62:	e017      	b.n	8004a94 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d108      	bne.n	8004a7e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004a6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004a7c:	e00a      	b.n	8004a94 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	785b      	ldrb	r3, [r3, #1]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d165      	bne.n	8004b6e <HAL_PCD_EP_DB_Transmit+0x750>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ab6:	4413      	add	r3, r2
 8004ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	011a      	lsls	r2, r3, #4
 8004ac0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004aca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ad8:	801a      	strh	r2, [r3, #0]
 8004ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ade:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ae0:	d91d      	bls.n	8004b1e <HAL_PCD_EP_DB_Transmit+0x700>
 8004ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <HAL_PCD_EP_DB_Transmit+0x6de>
 8004af6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004af8:	3b01      	subs	r3, #1
 8004afa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004afc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	029b      	lsls	r3, r3, #10
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	e041      	b.n	8004ba2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <HAL_PCD_EP_DB_Transmit+0x71e>
 8004b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b38:	801a      	strh	r2, [r3, #0]
 8004b3a:	e032      	b.n	8004ba2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b40:	085b      	lsrs	r3, r3, #1
 8004b42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_PCD_EP_DB_Transmit+0x738>
 8004b50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b52:	3301      	adds	r3, #1
 8004b54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	029b      	lsls	r3, r3, #10
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	4313      	orrs	r3, r2
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b6a:	801a      	strh	r2, [r3, #0]
 8004b6c:	e019      	b.n	8004ba2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d115      	bne.n	8004ba2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b84:	4413      	add	r3, r2
 8004b86:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	011a      	lsls	r2, r3, #4
 8004b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b90:	4413      	add	r3, r2
 8004b92:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b96:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ba0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	6959      	ldr	r1, [r3, #20]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	895a      	ldrh	r2, [r3, #10]
 8004bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f003 ff3b 	bl	8008a2e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bd2:	82bb      	strh	r3, [r7, #20]
 8004bd4:	8abb      	ldrh	r3, [r7, #20]
 8004bd6:	f083 0310 	eor.w	r3, r3, #16
 8004bda:	82bb      	strh	r3, [r7, #20]
 8004bdc:	8abb      	ldrh	r3, [r7, #20]
 8004bde:	f083 0320 	eor.w	r3, r3, #32
 8004be2:	82bb      	strh	r3, [r7, #20]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	441a      	add	r2, r3
 8004bf2:	8abb      	ldrh	r3, [r7, #20]
 8004bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3790      	adds	r7, #144	@ 0x90
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b087      	sub	sp, #28
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	607b      	str	r3, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	817b      	strh	r3, [r7, #10]
 8004c20:	4613      	mov	r3, r2
 8004c22:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004c24:	897b      	ldrh	r3, [r7, #10]
 8004c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00b      	beq.n	8004c48 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c30:	897b      	ldrh	r3, [r7, #10]
 8004c32:	f003 0207 	and.w	r2, r3, #7
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	3310      	adds	r3, #16
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	e009      	b.n	8004c5c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c48:	897a      	ldrh	r2, [r7, #10]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004c5c:	893b      	ldrh	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d107      	bne.n	8004c72 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	80da      	strh	r2, [r3, #6]
 8004c70:	e00b      	b.n	8004c8a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2201      	movs	r2, #1
 8004c76:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	0c1b      	lsrs	r3, r3, #16
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr
	...

08004c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e272      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8087 	beq.w	8004dc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cb8:	4b92      	ldr	r3, [pc, #584]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d00c      	beq.n	8004cde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cc4:	4b8f      	ldr	r3, [pc, #572]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f003 030c 	and.w	r3, r3, #12
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d112      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x5e>
 8004cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cdc:	d10b      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cde:	4b89      	ldr	r3, [pc, #548]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d06c      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x12c>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d168      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e24c      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCC_OscConfig+0x76>
 8004d00:	4b80      	ldr	r3, [pc, #512]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a7f      	ldr	r2, [pc, #508]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	e02e      	b.n	8004d6c <HAL_RCC_OscConfig+0xd4>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x98>
 8004d16:	4b7b      	ldr	r3, [pc, #492]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a7a      	ldr	r2, [pc, #488]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	4b78      	ldr	r3, [pc, #480]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a77      	ldr	r2, [pc, #476]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e01d      	b.n	8004d6c <HAL_RCC_OscConfig+0xd4>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCC_OscConfig+0xbc>
 8004d3a:	4b72      	ldr	r3, [pc, #456]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a71      	ldr	r2, [pc, #452]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	4b6f      	ldr	r3, [pc, #444]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a6e      	ldr	r2, [pc, #440]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e00b      	b.n	8004d6c <HAL_RCC_OscConfig+0xd4>
 8004d54:	4b6b      	ldr	r3, [pc, #428]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a6a      	ldr	r2, [pc, #424]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	4b68      	ldr	r3, [pc, #416]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a67      	ldr	r2, [pc, #412]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d013      	beq.n	8004d9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d74:	f7fc fef2 	bl	8001b5c <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d7c:	f7fc feee 	bl	8001b5c <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b64      	cmp	r3, #100	@ 0x64
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e200      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8e:	4b5d      	ldr	r3, [pc, #372]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f0      	beq.n	8004d7c <HAL_RCC_OscConfig+0xe4>
 8004d9a:	e014      	b.n	8004dc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9c:	f7fc fede 	bl	8001b5c <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da4:	f7fc feda 	bl	8001b5c <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b64      	cmp	r3, #100	@ 0x64
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e1ec      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004db6:	4b53      	ldr	r3, [pc, #332]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x10c>
 8004dc2:	e000      	b.n	8004dc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d063      	beq.n	8004e9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dd2:	4b4c      	ldr	r3, [pc, #304]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00b      	beq.n	8004df6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dde:	4b49      	ldr	r3, [pc, #292]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 030c 	and.w	r3, r3, #12
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d11c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x18c>
 8004dea:	4b46      	ldr	r3, [pc, #280]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d116      	bne.n	8004e24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df6:	4b43      	ldr	r3, [pc, #268]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_RCC_OscConfig+0x176>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d001      	beq.n	8004e0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e1c0      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	4939      	ldr	r1, [pc, #228]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e22:	e03a      	b.n	8004e9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d020      	beq.n	8004e6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e2c:	4b36      	ldr	r3, [pc, #216]	@ (8004f08 <HAL_RCC_OscConfig+0x270>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e32:	f7fc fe93 	bl	8001b5c <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3a:	f7fc fe8f 	bl	8001b5c <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e1a1      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e58:	4b2a      	ldr	r3, [pc, #168]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4927      	ldr	r1, [pc, #156]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	600b      	str	r3, [r1, #0]
 8004e6c:	e015      	b.n	8004e9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e6e:	4b26      	ldr	r3, [pc, #152]	@ (8004f08 <HAL_RCC_OscConfig+0x270>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e74:	f7fc fe72 	bl	8001b5c <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e7c:	f7fc fe6e 	bl	8001b5c <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e180      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d03a      	beq.n	8004f1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d019      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eae:	4b17      	ldr	r3, [pc, #92]	@ (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb4:	f7fc fe52 	bl	8001b5c <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ebc:	f7fc fe4e 	bl	8001b5c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e160      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ece:	4b0d      	ldr	r3, [pc, #52]	@ (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004eda:	2001      	movs	r0, #1
 8004edc:	f000 face 	bl	800547c <RCC_Delay>
 8004ee0:	e01c      	b.n	8004f1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee8:	f7fc fe38 	bl	8001b5c <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eee:	e00f      	b.n	8004f10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef0:	f7fc fe34 	bl	8001b5c <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d908      	bls.n	8004f10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e146      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000
 8004f08:	42420000 	.word	0x42420000
 8004f0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f10:	4b92      	ldr	r3, [pc, #584]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e9      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80a6 	beq.w	8005076 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2e:	4b8b      	ldr	r3, [pc, #556]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10d      	bne.n	8004f56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f3a:	4b88      	ldr	r3, [pc, #544]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	4a87      	ldr	r2, [pc, #540]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f44:	61d3      	str	r3, [r2, #28]
 8004f46:	4b85      	ldr	r3, [pc, #532]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f52:	2301      	movs	r3, #1
 8004f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f56:	4b82      	ldr	r3, [pc, #520]	@ (8005160 <HAL_RCC_OscConfig+0x4c8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d118      	bne.n	8004f94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f62:	4b7f      	ldr	r3, [pc, #508]	@ (8005160 <HAL_RCC_OscConfig+0x4c8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a7e      	ldr	r2, [pc, #504]	@ (8005160 <HAL_RCC_OscConfig+0x4c8>)
 8004f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6e:	f7fc fdf5 	bl	8001b5c <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f76:	f7fc fdf1 	bl	8001b5c <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b64      	cmp	r3, #100	@ 0x64
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e103      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f88:	4b75      	ldr	r3, [pc, #468]	@ (8005160 <HAL_RCC_OscConfig+0x4c8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d106      	bne.n	8004faa <HAL_RCC_OscConfig+0x312>
 8004f9c:	4b6f      	ldr	r3, [pc, #444]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	4a6e      	ldr	r2, [pc, #440]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	6213      	str	r3, [r2, #32]
 8004fa8:	e02d      	b.n	8005006 <HAL_RCC_OscConfig+0x36e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x334>
 8004fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	4a69      	ldr	r2, [pc, #420]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	6213      	str	r3, [r2, #32]
 8004fbe:	4b67      	ldr	r3, [pc, #412]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	4a66      	ldr	r2, [pc, #408]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fc4:	f023 0304 	bic.w	r3, r3, #4
 8004fc8:	6213      	str	r3, [r2, #32]
 8004fca:	e01c      	b.n	8005006 <HAL_RCC_OscConfig+0x36e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2b05      	cmp	r3, #5
 8004fd2:	d10c      	bne.n	8004fee <HAL_RCC_OscConfig+0x356>
 8004fd4:	4b61      	ldr	r3, [pc, #388]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	4a60      	ldr	r2, [pc, #384]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fda:	f043 0304 	orr.w	r3, r3, #4
 8004fde:	6213      	str	r3, [r2, #32]
 8004fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	4a5d      	ldr	r2, [pc, #372]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fe6:	f043 0301 	orr.w	r3, r3, #1
 8004fea:	6213      	str	r3, [r2, #32]
 8004fec:	e00b      	b.n	8005006 <HAL_RCC_OscConfig+0x36e>
 8004fee:	4b5b      	ldr	r3, [pc, #364]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	4a5a      	ldr	r2, [pc, #360]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004ff4:	f023 0301 	bic.w	r3, r3, #1
 8004ff8:	6213      	str	r3, [r2, #32]
 8004ffa:	4b58      	ldr	r3, [pc, #352]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	4a57      	ldr	r2, [pc, #348]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005000:	f023 0304 	bic.w	r3, r3, #4
 8005004:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d015      	beq.n	800503a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500e:	f7fc fda5 	bl	8001b5c <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005014:	e00a      	b.n	800502c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005016:	f7fc fda1 	bl	8001b5c <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005024:	4293      	cmp	r3, r2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e0b1      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502c:	4b4b      	ldr	r3, [pc, #300]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ee      	beq.n	8005016 <HAL_RCC_OscConfig+0x37e>
 8005038:	e014      	b.n	8005064 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800503a:	f7fc fd8f 	bl	8001b5c <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005040:	e00a      	b.n	8005058 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005042:	f7fc fd8b 	bl	8001b5c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005050:	4293      	cmp	r3, r2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e09b      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005058:	4b40      	ldr	r3, [pc, #256]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1ee      	bne.n	8005042 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005064:	7dfb      	ldrb	r3, [r7, #23]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d105      	bne.n	8005076 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800506a:	4b3c      	ldr	r3, [pc, #240]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	4a3b      	ldr	r2, [pc, #236]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005070:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005074:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8087 	beq.w	800518e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005080:	4b36      	ldr	r3, [pc, #216]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 030c 	and.w	r3, r3, #12
 8005088:	2b08      	cmp	r3, #8
 800508a:	d061      	beq.n	8005150 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d146      	bne.n	8005122 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005094:	4b33      	ldr	r3, [pc, #204]	@ (8005164 <HAL_RCC_OscConfig+0x4cc>)
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fc fd5f 	bl	8001b5c <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fc fd5b 	bl	8001b5c <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e06d      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050b4:	4b29      	ldr	r3, [pc, #164]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1f0      	bne.n	80050a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050c8:	d108      	bne.n	80050dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050ca:	4b24      	ldr	r3, [pc, #144]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4921      	ldr	r1, [pc, #132]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050dc:	4b1f      	ldr	r3, [pc, #124]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a19      	ldr	r1, [r3, #32]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	430b      	orrs	r3, r1
 80050ee:	491b      	ldr	r1, [pc, #108]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005164 <HAL_RCC_OscConfig+0x4cc>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fa:	f7fc fd2f 	bl	8001b5c <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005102:	f7fc fd2b 	bl	8001b5c <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e03d      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005114:	4b11      	ldr	r3, [pc, #68]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x46a>
 8005120:	e035      	b.n	800518e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005122:	4b10      	ldr	r3, [pc, #64]	@ (8005164 <HAL_RCC_OscConfig+0x4cc>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005128:	f7fc fd18 	bl	8001b5c <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005130:	f7fc fd14 	bl	8001b5c <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e026      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005142:	4b06      	ldr	r3, [pc, #24]	@ (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <HAL_RCC_OscConfig+0x498>
 800514e:	e01e      	b.n	800518e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d107      	bne.n	8005168 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e019      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
 800515c:	40021000 	.word	0x40021000
 8005160:	40007000 	.word	0x40007000
 8005164:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005168:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <HAL_RCC_OscConfig+0x500>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	429a      	cmp	r2, r3
 800517a:	d106      	bne.n	800518a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d001      	beq.n	800518e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40021000 	.word	0x40021000

0800519c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0d0      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051b0:	4b6a      	ldr	r3, [pc, #424]	@ (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d910      	bls.n	80051e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b67      	ldr	r3, [pc, #412]	@ (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 0207 	bic.w	r2, r3, #7
 80051c6:	4965      	ldr	r1, [pc, #404]	@ (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ce:	4b63      	ldr	r3, [pc, #396]	@ (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0b8      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d020      	beq.n	800522e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051f8:	4b59      	ldr	r3, [pc, #356]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	4a58      	ldr	r2, [pc, #352]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 80051fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005202:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d005      	beq.n	800521c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005210:	4b53      	ldr	r3, [pc, #332]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	4a52      	ldr	r2, [pc, #328]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005216:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800521a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800521c:	4b50      	ldr	r3, [pc, #320]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	494d      	ldr	r1, [pc, #308]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800522a:	4313      	orrs	r3, r2
 800522c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d040      	beq.n	80052bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d107      	bne.n	8005252 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005242:	4b47      	ldr	r3, [pc, #284]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d115      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e07f      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d107      	bne.n	800526a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525a:	4b41      	ldr	r3, [pc, #260]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e073      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526a:	4b3d      	ldr	r3, [pc, #244]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e06b      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800527a:	4b39      	ldr	r3, [pc, #228]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f023 0203 	bic.w	r2, r3, #3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4936      	ldr	r1, [pc, #216]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005288:	4313      	orrs	r3, r2
 800528a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800528c:	f7fc fc66 	bl	8001b5c <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	e00a      	b.n	80052aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005294:	f7fc fc62 	bl	8001b5c <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e053      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f003 020c 	and.w	r2, r3, #12
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d1eb      	bne.n	8005294 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052bc:	4b27      	ldr	r3, [pc, #156]	@ (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d210      	bcs.n	80052ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ca:	4b24      	ldr	r3, [pc, #144]	@ (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f023 0207 	bic.w	r2, r3, #7
 80052d2:	4922      	ldr	r1, [pc, #136]	@ (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052da:	4b20      	ldr	r3, [pc, #128]	@ (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e032      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052f8:	4b19      	ldr	r3, [pc, #100]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	4916      	ldr	r1, [pc, #88]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005306:	4313      	orrs	r3, r2
 8005308:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d009      	beq.n	800532a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005316:	4b12      	ldr	r3, [pc, #72]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	490e      	ldr	r1, [pc, #56]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005326:	4313      	orrs	r3, r2
 8005328:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800532a:	f000 f821 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 800532e:	4602      	mov	r2, r0
 8005330:	4b0b      	ldr	r3, [pc, #44]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	091b      	lsrs	r3, r3, #4
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	490a      	ldr	r1, [pc, #40]	@ (8005364 <HAL_RCC_ClockConfig+0x1c8>)
 800533c:	5ccb      	ldrb	r3, [r1, r3]
 800533e:	fa22 f303 	lsr.w	r3, r2, r3
 8005342:	4a09      	ldr	r2, [pc, #36]	@ (8005368 <HAL_RCC_ClockConfig+0x1cc>)
 8005344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005346:	4b09      	ldr	r3, [pc, #36]	@ (800536c <HAL_RCC_ClockConfig+0x1d0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f7fc fbc4 	bl	8001ad8 <HAL_InitTick>

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40022000 	.word	0x40022000
 8005360:	40021000 	.word	0x40021000
 8005364:	0800b56c 	.word	0x0800b56c
 8005368:	20000000 	.word	0x20000000
 800536c:	20000004 	.word	0x20000004

08005370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	2300      	movs	r3, #0
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	2300      	movs	r3, #0
 8005384:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800538a:	4b1e      	ldr	r3, [pc, #120]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x94>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b04      	cmp	r3, #4
 8005398:	d002      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x30>
 800539a:	2b08      	cmp	r3, #8
 800539c:	d003      	beq.n	80053a6 <HAL_RCC_GetSysClockFreq+0x36>
 800539e:	e027      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053a0:	4b19      	ldr	r3, [pc, #100]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x98>)
 80053a2:	613b      	str	r3, [r7, #16]
      break;
 80053a4:	e027      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	0c9b      	lsrs	r3, r3, #18
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	4a17      	ldr	r2, [pc, #92]	@ (800540c <HAL_RCC_GetSysClockFreq+0x9c>)
 80053b0:	5cd3      	ldrb	r3, [r2, r3]
 80053b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d010      	beq.n	80053e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053be:	4b11      	ldr	r3, [pc, #68]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x94>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	0c5b      	lsrs	r3, r3, #17
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	4a11      	ldr	r2, [pc, #68]	@ (8005410 <HAL_RCC_GetSysClockFreq+0xa0>)
 80053ca:	5cd3      	ldrb	r3, [r2, r3]
 80053cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x98>)
 80053d2:	fb03 f202 	mul.w	r2, r3, r2
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	e004      	b.n	80053ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005414 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053e4:	fb02 f303 	mul.w	r3, r2, r3
 80053e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	613b      	str	r3, [r7, #16]
      break;
 80053ee:	e002      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053f0:	4b05      	ldr	r3, [pc, #20]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x98>)
 80053f2:	613b      	str	r3, [r7, #16]
      break;
 80053f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053f6:	693b      	ldr	r3, [r7, #16]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40021000 	.word	0x40021000
 8005408:	007a1200 	.word	0x007a1200
 800540c:	0800b584 	.word	0x0800b584
 8005410:	0800b594 	.word	0x0800b594
 8005414:	003d0900 	.word	0x003d0900

08005418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800541c:	4b02      	ldr	r3, [pc, #8]	@ (8005428 <HAL_RCC_GetHCLKFreq+0x10>)
 800541e:	681b      	ldr	r3, [r3, #0]
}
 8005420:	4618      	mov	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr
 8005428:	20000000 	.word	0x20000000

0800542c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005430:	f7ff fff2 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 8005434:	4602      	mov	r2, r0
 8005436:	4b05      	ldr	r3, [pc, #20]	@ (800544c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	0a1b      	lsrs	r3, r3, #8
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	4903      	ldr	r1, [pc, #12]	@ (8005450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005442:	5ccb      	ldrb	r3, [r1, r3]
 8005444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005448:	4618      	mov	r0, r3
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40021000 	.word	0x40021000
 8005450:	0800b57c 	.word	0x0800b57c

08005454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005458:	f7ff ffde 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 800545c:	4602      	mov	r2, r0
 800545e:	4b05      	ldr	r3, [pc, #20]	@ (8005474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	0adb      	lsrs	r3, r3, #11
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	4903      	ldr	r1, [pc, #12]	@ (8005478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800546a:	5ccb      	ldrb	r3, [r1, r3]
 800546c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005470:	4618      	mov	r0, r3
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40021000 	.word	0x40021000
 8005478:	0800b57c 	.word	0x0800b57c

0800547c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005484:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <RCC_Delay+0x34>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a0a      	ldr	r2, [pc, #40]	@ (80054b4 <RCC_Delay+0x38>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	0a5b      	lsrs	r3, r3, #9
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	fb02 f303 	mul.w	r3, r2, r3
 8005496:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005498:	bf00      	nop
  }
  while (Delay --);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1e5a      	subs	r2, r3, #1
 800549e:	60fa      	str	r2, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1f9      	bne.n	8005498 <RCC_Delay+0x1c>
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr
 80054b0:	20000000 	.word	0x20000000
 80054b4:	10624dd3 	.word	0x10624dd3

080054b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d07d      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80054d4:	2300      	movs	r3, #0
 80054d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054d8:	4b4f      	ldr	r3, [pc, #316]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10d      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e4:	4b4c      	ldr	r3, [pc, #304]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	4a4b      	ldr	r2, [pc, #300]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ee:	61d3      	str	r3, [r2, #28]
 80054f0:	4b49      	ldr	r3, [pc, #292]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054fc:	2301      	movs	r3, #1
 80054fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005500:	4b46      	ldr	r3, [pc, #280]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d118      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800550c:	4b43      	ldr	r3, [pc, #268]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a42      	ldr	r2, [pc, #264]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005518:	f7fc fb20 	bl	8001b5c <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551e:	e008      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005520:	f7fc fb1c 	bl	8001b5c <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b64      	cmp	r3, #100	@ 0x64
 800552c:	d901      	bls.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e06d      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005532:	4b3a      	ldr	r3, [pc, #232]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800553e:	4b36      	ldr	r3, [pc, #216]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005546:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d02e      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	429a      	cmp	r2, r3
 800555a:	d027      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800555c:	4b2e      	ldr	r3, [pc, #184]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005564:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005566:	4b2e      	ldr	r3, [pc, #184]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005568:	2201      	movs	r2, #1
 800556a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800556c:	4b2c      	ldr	r3, [pc, #176]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005572:	4a29      	ldr	r2, [pc, #164]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d014      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005582:	f7fc faeb 	bl	8001b5c <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005588:	e00a      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558a:	f7fc fae7 	bl	8001b5c <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005598:	4293      	cmp	r3, r2
 800559a:	d901      	bls.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e036      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0ee      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4917      	ldr	r1, [pc, #92]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d105      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c4:	4b14      	ldr	r3, [pc, #80]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	4a13      	ldr	r2, [pc, #76]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	490b      	ldr	r1, [pc, #44]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0310 	and.w	r3, r3, #16
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055fa:	4b07      	ldr	r3, [pc, #28]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	4904      	ldr	r1, [pc, #16]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005608:	4313      	orrs	r3, r2
 800560a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40021000 	.word	0x40021000
 800561c:	40007000 	.word	0x40007000
 8005620:	42420440 	.word	0x42420440

08005624 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e041      	b.n	80056ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fc f8fe 	bl	800184c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3304      	adds	r3, #4
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f000 fa7e 	bl	8005b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <HAL_TIM_PWM_Start+0x24>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	bf14      	ite	ne
 80056e0:	2301      	movne	r3, #1
 80056e2:	2300      	moveq	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	e022      	b.n	800572e <HAL_TIM_PWM_Start+0x6a>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d109      	bne.n	8005702 <HAL_TIM_PWM_Start+0x3e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	bf14      	ite	ne
 80056fa:	2301      	movne	r3, #1
 80056fc:	2300      	moveq	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	e015      	b.n	800572e <HAL_TIM_PWM_Start+0x6a>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b08      	cmp	r3, #8
 8005706:	d109      	bne.n	800571c <HAL_TIM_PWM_Start+0x58>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	bf14      	ite	ne
 8005714:	2301      	movne	r3, #1
 8005716:	2300      	moveq	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	e008      	b.n	800572e <HAL_TIM_PWM_Start+0x6a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	bf14      	ite	ne
 8005728:	2301      	movne	r3, #1
 800572a:	2300      	moveq	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e05e      	b.n	80057f4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d104      	bne.n	8005746 <HAL_TIM_PWM_Start+0x82>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005744:	e013      	b.n	800576e <HAL_TIM_PWM_Start+0xaa>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b04      	cmp	r3, #4
 800574a:	d104      	bne.n	8005756 <HAL_TIM_PWM_Start+0x92>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005754:	e00b      	b.n	800576e <HAL_TIM_PWM_Start+0xaa>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b08      	cmp	r3, #8
 800575a:	d104      	bne.n	8005766 <HAL_TIM_PWM_Start+0xa2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005764:	e003      	b.n	800576e <HAL_TIM_PWM_Start+0xaa>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2202      	movs	r2, #2
 800576a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2201      	movs	r2, #1
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fcf7 	bl	800616a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1e      	ldr	r2, [pc, #120]	@ (80057fc <HAL_TIM_PWM_Start+0x138>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d107      	bne.n	8005796 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005794:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a18      	ldr	r2, [pc, #96]	@ (80057fc <HAL_TIM_PWM_Start+0x138>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00e      	beq.n	80057be <HAL_TIM_PWM_Start+0xfa>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a8:	d009      	beq.n	80057be <HAL_TIM_PWM_Start+0xfa>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a14      	ldr	r2, [pc, #80]	@ (8005800 <HAL_TIM_PWM_Start+0x13c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d004      	beq.n	80057be <HAL_TIM_PWM_Start+0xfa>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a12      	ldr	r2, [pc, #72]	@ (8005804 <HAL_TIM_PWM_Start+0x140>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d111      	bne.n	80057e2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b06      	cmp	r3, #6
 80057ce:	d010      	beq.n	80057f2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0201 	orr.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e0:	e007      	b.n	80057f2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 0201 	orr.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800

08005808 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e041      	b.n	800589e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d106      	bne.n	8005834 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fb ff5a 	bl	80016e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3304      	adds	r3, #4
 8005844:	4619      	mov	r1, r3
 8005846:	4610      	mov	r0, r2
 8005848:	f000 f98c 	bl	8005b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e088      	b.n	80059d6 <HAL_TIM_IC_ConfigChannel+0x130>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d11b      	bne.n	800590a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80058e2:	f000 fb35 	bl	8005f50 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699a      	ldr	r2, [r3, #24]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 020c 	bic.w	r2, r2, #12
 80058f4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6999      	ldr	r1, [r3, #24]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	619a      	str	r2, [r3, #24]
 8005908:	e060      	b.n	80059cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b04      	cmp	r3, #4
 800590e:	d11c      	bne.n	800594a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005920:	f000 fb70 	bl	8006004 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005932:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6999      	ldr	r1, [r3, #24]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	021a      	lsls	r2, r3, #8
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	619a      	str	r2, [r3, #24]
 8005948:	e040      	b.n	80059cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b08      	cmp	r3, #8
 800594e:	d11b      	bne.n	8005988 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005960:	f000 fb8c 	bl	800607c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	69da      	ldr	r2, [r3, #28]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 020c 	bic.w	r2, r2, #12
 8005972:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69d9      	ldr	r1, [r3, #28]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	61da      	str	r2, [r3, #28]
 8005986:	e021      	b.n	80059cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b0c      	cmp	r3, #12
 800598c:	d11c      	bne.n	80059c8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800599e:	f000 fba8 	bl	80060f2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80059b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69d9      	ldr	r1, [r3, #28]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	021a      	lsls	r2, r3, #8
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	61da      	str	r2, [r3, #28]
 80059c6:	e001      	b.n	80059cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e0ae      	b.n	8005b5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b0c      	cmp	r3, #12
 8005a0a:	f200 809f 	bhi.w	8005b4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a14:	08005a49 	.word	0x08005a49
 8005a18:	08005b4d 	.word	0x08005b4d
 8005a1c:	08005b4d 	.word	0x08005b4d
 8005a20:	08005b4d 	.word	0x08005b4d
 8005a24:	08005a89 	.word	0x08005a89
 8005a28:	08005b4d 	.word	0x08005b4d
 8005a2c:	08005b4d 	.word	0x08005b4d
 8005a30:	08005b4d 	.word	0x08005b4d
 8005a34:	08005acb 	.word	0x08005acb
 8005a38:	08005b4d 	.word	0x08005b4d
 8005a3c:	08005b4d 	.word	0x08005b4d
 8005a40:	08005b4d 	.word	0x08005b4d
 8005a44:	08005b0b 	.word	0x08005b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f8f6 	bl	8005c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0208 	orr.w	r2, r2, #8
 8005a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0204 	bic.w	r2, r2, #4
 8005a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6999      	ldr	r1, [r3, #24]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	619a      	str	r2, [r3, #24]
      break;
 8005a86:	e064      	b.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 f93c 	bl	8005d0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6999      	ldr	r1, [r3, #24]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	021a      	lsls	r2, r3, #8
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	619a      	str	r2, [r3, #24]
      break;
 8005ac8:	e043      	b.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 f985 	bl	8005de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0208 	orr.w	r2, r2, #8
 8005ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0204 	bic.w	r2, r2, #4
 8005af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69d9      	ldr	r1, [r3, #28]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	61da      	str	r2, [r3, #28]
      break;
 8005b08:	e023      	b.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 f9cf 	bl	8005eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69d9      	ldr	r1, [r3, #28]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	021a      	lsls	r2, r3, #8
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	61da      	str	r2, [r3, #28]
      break;
 8005b4a:	e002      	b.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a2f      	ldr	r2, [pc, #188]	@ (8005c34 <TIM_Base_SetConfig+0xd0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00b      	beq.n	8005b94 <TIM_Base_SetConfig+0x30>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b82:	d007      	beq.n	8005b94 <TIM_Base_SetConfig+0x30>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a2c      	ldr	r2, [pc, #176]	@ (8005c38 <TIM_Base_SetConfig+0xd4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_Base_SetConfig+0x30>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a2b      	ldr	r2, [pc, #172]	@ (8005c3c <TIM_Base_SetConfig+0xd8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d108      	bne.n	8005ba6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a22      	ldr	r2, [pc, #136]	@ (8005c34 <TIM_Base_SetConfig+0xd0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00b      	beq.n	8005bc6 <TIM_Base_SetConfig+0x62>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb4:	d007      	beq.n	8005bc6 <TIM_Base_SetConfig+0x62>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8005c38 <TIM_Base_SetConfig+0xd4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_Base_SetConfig+0x62>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1e      	ldr	r2, [pc, #120]	@ (8005c3c <TIM_Base_SetConfig+0xd8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d108      	bne.n	8005bd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8005c34 <TIM_Base_SetConfig+0xd0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d103      	bne.n	8005c0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f023 0201 	bic.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	611a      	str	r2, [r3, #16]
  }
}
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40000400 	.word	0x40000400
 8005c3c:	40000800 	.word	0x40000800

08005c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	f023 0201 	bic.w	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0303 	bic.w	r3, r3, #3
 8005c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f023 0302 	bic.w	r3, r3, #2
 8005c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a1c      	ldr	r2, [pc, #112]	@ (8005d08 <TIM_OC1_SetConfig+0xc8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d10c      	bne.n	8005cb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f023 0308 	bic.w	r3, r3, #8
 8005ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f023 0304 	bic.w	r3, r3, #4
 8005cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a13      	ldr	r2, [pc, #76]	@ (8005d08 <TIM_OC1_SetConfig+0xc8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d111      	bne.n	8005ce2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	621a      	str	r2, [r3, #32]
}
 8005cfc:	bf00      	nop
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40012c00 	.word	0x40012c00

08005d0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	f023 0210 	bic.w	r2, r3, #16
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	021b      	lsls	r3, r3, #8
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f023 0320 	bic.w	r3, r3, #32
 8005d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a1d      	ldr	r2, [pc, #116]	@ (8005ddc <TIM_OC2_SetConfig+0xd0>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d10d      	bne.n	8005d88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a14      	ldr	r2, [pc, #80]	@ (8005ddc <TIM_OC2_SetConfig+0xd0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d113      	bne.n	8005db8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr
 8005ddc:	40012c00 	.word	0x40012c00

08005de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb0 <TIM_OC3_SetConfig+0xd0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d10d      	bne.n	8005e5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a14      	ldr	r2, [pc, #80]	@ (8005eb0 <TIM_OC3_SetConfig+0xd0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d113      	bne.n	8005e8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	621a      	str	r2, [r3, #32]
}
 8005ea4:	bf00      	nop
 8005ea6:	371c      	adds	r7, #28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	40012c00 	.word	0x40012c00

08005eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	031b      	lsls	r3, r3, #12
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8005f4c <TIM_OC4_SetConfig+0x98>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d109      	bne.n	8005f28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	019b      	lsls	r3, r3, #6
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr
 8005f4c:	40012c00 	.word	0x40012c00

08005f50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f023 0201 	bic.w	r2, r3, #1
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4a1f      	ldr	r2, [pc, #124]	@ (8005ff8 <TIM_TI1_SetConfig+0xa8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00b      	beq.n	8005f96 <TIM_TI1_SetConfig+0x46>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f84:	d007      	beq.n	8005f96 <TIM_TI1_SetConfig+0x46>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4a1c      	ldr	r2, [pc, #112]	@ (8005ffc <TIM_TI1_SetConfig+0xac>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d003      	beq.n	8005f96 <TIM_TI1_SetConfig+0x46>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4a1b      	ldr	r2, [pc, #108]	@ (8006000 <TIM_TI1_SetConfig+0xb0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d101      	bne.n	8005f9a <TIM_TI1_SetConfig+0x4a>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <TIM_TI1_SetConfig+0x4c>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f023 0303 	bic.w	r3, r3, #3
 8005fa6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	e003      	b.n	8005fba <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f043 0301 	orr.w	r3, r3, #1
 8005fb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f023 030a 	bic.w	r3, r3, #10
 8005fd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f003 030a 	and.w	r3, r3, #10
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	621a      	str	r2, [r3, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr
 8005ff8:	40012c00 	.word	0x40012c00
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800

08006004 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	f023 0210 	bic.w	r2, r3, #16
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	021b      	lsls	r3, r3, #8
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	031b      	lsls	r3, r3, #12
 8006048:	b29b      	uxth	r3, r3
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006056:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr

0800607c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f023 0303 	bic.w	r3, r3, #3
 80060a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	621a      	str	r2, [r3, #32]
}
 80060e8:	bf00      	nop
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bc80      	pop	{r7}
 80060f0:	4770      	bx	lr

080060f2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b087      	sub	sp, #28
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	607a      	str	r2, [r7, #4]
 80060fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800611e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006130:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	031b      	lsls	r3, r3, #12
 8006136:	b29b      	uxth	r3, r3
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006144:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	031b      	lsls	r3, r3, #12
 800614a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	621a      	str	r2, [r3, #32]
}
 8006160:	bf00      	nop
 8006162:	371c      	adds	r7, #28
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	4770      	bx	lr

0800616a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800616a:	b480      	push	{r7}
 800616c:	b087      	sub	sp, #28
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2201      	movs	r2, #1
 800617e:	fa02 f303 	lsl.w	r3, r2, r3
 8006182:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1a      	ldr	r2, [r3, #32]
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	43db      	mvns	r3, r3
 800618c:	401a      	ands	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6a1a      	ldr	r2, [r3, #32]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f003 031f 	and.w	r3, r3, #31
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	fa01 f303 	lsl.w	r3, r1, r3
 80061a2:	431a      	orrs	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	621a      	str	r2, [r3, #32]
}
 80061a8:	bf00      	nop
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bc80      	pop	{r7}
 80061b0:	4770      	bx	lr
	...

080061b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e046      	b.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a16      	ldr	r2, [pc, #88]	@ (8006264 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00e      	beq.n	800622e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006218:	d009      	beq.n	800622e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a12      	ldr	r2, [pc, #72]	@ (8006268 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d004      	beq.n	800622e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a10      	ldr	r2, [pc, #64]	@ (800626c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d10c      	bne.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	4313      	orrs	r3, r2
 800623e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr
 8006264:	40012c00 	.word	0x40012c00
 8006268:	40000400 	.word	0x40000400
 800626c:	40000800 	.word	0x40000800

08006270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e042      	b.n	8006308 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7fb fb24 	bl	80018e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2224      	movs	r2, #36	@ 0x24
 80062a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f82b 	bl	8006310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691a      	ldr	r2, [r3, #16]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	695a      	ldr	r2, [r3, #20]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800634a:	f023 030c 	bic.w	r3, r3, #12
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	430b      	orrs	r3, r1
 8006356:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a2c      	ldr	r2, [pc, #176]	@ (8006424 <UART_SetConfig+0x114>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d103      	bne.n	8006380 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006378:	f7ff f86c 	bl	8005454 <HAL_RCC_GetPCLK2Freq>
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	e002      	b.n	8006386 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006380:	f7ff f854 	bl	800542c <HAL_RCC_GetPCLK1Freq>
 8006384:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	4613      	mov	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	009a      	lsls	r2, r3, #2
 8006390:	441a      	add	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	4a22      	ldr	r2, [pc, #136]	@ (8006428 <UART_SetConfig+0x118>)
 800639e:	fba2 2303 	umull	r2, r3, r2, r3
 80063a2:	095b      	lsrs	r3, r3, #5
 80063a4:	0119      	lsls	r1, r3, #4
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009a      	lsls	r2, r3, #2
 80063b0:	441a      	add	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80063bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006428 <UART_SetConfig+0x118>)
 80063be:	fba3 0302 	umull	r0, r3, r3, r2
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	2064      	movs	r0, #100	@ 0x64
 80063c6:	fb00 f303 	mul.w	r3, r0, r3
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	3332      	adds	r3, #50	@ 0x32
 80063d0:	4a15      	ldr	r2, [pc, #84]	@ (8006428 <UART_SetConfig+0x118>)
 80063d2:	fba2 2303 	umull	r2, r3, r2, r3
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063dc:	4419      	add	r1, r3
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	009a      	lsls	r2, r3, #2
 80063e8:	441a      	add	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80063f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006428 <UART_SetConfig+0x118>)
 80063f6:	fba3 0302 	umull	r0, r3, r3, r2
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	2064      	movs	r0, #100	@ 0x64
 80063fe:	fb00 f303 	mul.w	r3, r0, r3
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	011b      	lsls	r3, r3, #4
 8006406:	3332      	adds	r3, #50	@ 0x32
 8006408:	4a07      	ldr	r2, [pc, #28]	@ (8006428 <UART_SetConfig+0x118>)
 800640a:	fba2 2303 	umull	r2, r3, r2, r3
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	f003 020f 	and.w	r2, r3, #15
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	440a      	add	r2, r1
 800641a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40013800 	.word	0x40013800
 8006428:	51eb851f 	.word	0x51eb851f

0800642c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	4638      	mov	r0, r7
 8006436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	bc80      	pop	{r7}
 8006444:	4770      	bx	lr

08006446 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006456:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800645a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	b29a      	uxth	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	4770      	bx	lr

08006472 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006472:	b480      	push	{r7}
 8006474:	b085      	sub	sp, #20
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800647a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800647e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	b29b      	uxth	r3, r3
 800648c:	43db      	mvns	r3, r3
 800648e:	b29b      	uxth	r3, r3
 8006490:	4013      	ands	r3, r2
 8006492:	b29a      	uxth	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bc80      	pop	{r7}
 80064a4:	4770      	bx	lr

080064a6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	460b      	mov	r3, r1
 80064b0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr

080064be <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064be:	b480      	push	{r7}
 80064c0:	b085      	sub	sp, #20
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	4638      	mov	r0, r7
 80064c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr

080064f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b09d      	sub	sp, #116	@ 0x74
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	b29b      	uxth	r3, r3
 8006516:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800651a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	78db      	ldrb	r3, [r3, #3]
 8006526:	2b03      	cmp	r3, #3
 8006528:	d81f      	bhi.n	800656a <USB_ActivateEndpoint+0x72>
 800652a:	a201      	add	r2, pc, #4	@ (adr r2, 8006530 <USB_ActivateEndpoint+0x38>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	08006541 	.word	0x08006541
 8006534:	0800655d 	.word	0x0800655d
 8006538:	08006573 	.word	0x08006573
 800653c:	0800654f 	.word	0x0800654f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006540:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006544:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006548:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800654c:	e012      	b.n	8006574 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800654e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006552:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006556:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800655a:	e00b      	b.n	8006574 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800655c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006560:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006564:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006568:	e004      	b.n	8006574 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006570:	e000      	b.n	8006574 <USB_ActivateEndpoint+0x7c>
      break;
 8006572:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	441a      	add	r2, r3
 800657e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006582:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006586:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800658a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800658e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006592:	b29b      	uxth	r3, r3
 8006594:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	7812      	ldrb	r2, [r2, #0]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80065c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	7b1b      	ldrb	r3, [r3, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f040 8178 	bne.w	80068d4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 8084 	beq.w	80066f6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	4413      	add	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	011a      	lsls	r2, r3, #4
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	88db      	ldrh	r3, [r3, #6]
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	b29b      	uxth	r3, r3
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	b29a      	uxth	r2, r3
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	827b      	strh	r3, [r7, #18]
 8006630:	8a7b      	ldrh	r3, [r7, #18]
 8006632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d01b      	beq.n	8006672 <USB_ActivateEndpoint+0x17a>
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800664c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006650:	823b      	strh	r3, [r7, #16]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	441a      	add	r2, r3
 800665c:	8a3b      	ldrh	r3, [r7, #16]
 800665e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800666a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800666e:	b29b      	uxth	r3, r3
 8006670:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	78db      	ldrb	r3, [r3, #3]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d020      	beq.n	80066bc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800668c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006690:	81bb      	strh	r3, [r7, #12]
 8006692:	89bb      	ldrh	r3, [r7, #12]
 8006694:	f083 0320 	eor.w	r3, r3, #32
 8006698:	81bb      	strh	r3, [r7, #12]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	441a      	add	r2, r3
 80066a4:	89bb      	ldrh	r3, [r7, #12]
 80066a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	8013      	strh	r3, [r2, #0]
 80066ba:	e2d5      	b.n	8006c68 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d2:	81fb      	strh	r3, [r7, #14]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	441a      	add	r2, r3
 80066de:	89fb      	ldrh	r3, [r7, #14]
 80066e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	8013      	strh	r3, [r2, #0]
 80066f4:	e2b8      	b.n	8006c68 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006700:	b29b      	uxth	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006706:	4413      	add	r3, r2
 8006708:	633b      	str	r3, [r7, #48]	@ 0x30
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	011a      	lsls	r2, r3, #4
 8006710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006712:	4413      	add	r3, r2
 8006714:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	88db      	ldrh	r3, [r3, #6]
 800671e:	085b      	lsrs	r3, r3, #1
 8006720:	b29b      	uxth	r3, r3
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006728:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006734:	b29b      	uxth	r3, r3
 8006736:	461a      	mov	r2, r3
 8006738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673a:	4413      	add	r3, r2
 800673c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	011a      	lsls	r2, r3, #4
 8006744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006746:	4413      	add	r3, r2
 8006748:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800674c:	627b      	str	r3, [r7, #36]	@ 0x24
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	b29b      	uxth	r3, r3
 8006754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006758:	b29a      	uxth	r2, r3
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	801a      	strh	r2, [r3, #0]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b3e      	cmp	r3, #62	@ 0x3e
 8006764:	d91d      	bls.n	80067a2 <USB_ActivateEndpoint+0x2aa>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <USB_ActivateEndpoint+0x288>
 800677a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800677c:	3b01      	subs	r3, #1
 800677e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	b29a      	uxth	r2, r3
 8006786:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006788:	b29b      	uxth	r3, r3
 800678a:	029b      	lsls	r3, r3, #10
 800678c:	b29b      	uxth	r3, r3
 800678e:	4313      	orrs	r3, r2
 8006790:	b29b      	uxth	r3, r3
 8006792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679a:	b29a      	uxth	r2, r3
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	801a      	strh	r2, [r3, #0]
 80067a0:	e026      	b.n	80067f0 <USB_ActivateEndpoint+0x2f8>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10a      	bne.n	80067c0 <USB_ActivateEndpoint+0x2c8>
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	801a      	strh	r2, [r3, #0]
 80067be:	e017      	b.n	80067f0 <USB_ActivateEndpoint+0x2f8>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	085b      	lsrs	r3, r3, #1
 80067c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <USB_ActivateEndpoint+0x2e2>
 80067d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067d6:	3301      	adds	r3, #1
 80067d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b29a      	uxth	r2, r3
 80067e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	029b      	lsls	r3, r3, #10
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	4313      	orrs	r3, r2
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80067fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01b      	beq.n	8006840 <USB_ActivateEndpoint+0x348>
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800681a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800681e:	843b      	strh	r3, [r7, #32]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	441a      	add	r2, r3
 800682a:	8c3b      	ldrh	r3, [r7, #32]
 800682c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006830:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006834:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800683c:	b29b      	uxth	r3, r3
 800683e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d124      	bne.n	8006892 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800685a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685e:	83bb      	strh	r3, [r7, #28]
 8006860:	8bbb      	ldrh	r3, [r7, #28]
 8006862:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006866:	83bb      	strh	r3, [r7, #28]
 8006868:	8bbb      	ldrh	r3, [r7, #28]
 800686a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800686e:	83bb      	strh	r3, [r7, #28]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	441a      	add	r2, r3
 800687a:	8bbb      	ldrh	r3, [r7, #28]
 800687c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006880:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800688c:	b29b      	uxth	r3, r3
 800688e:	8013      	strh	r3, [r2, #0]
 8006890:	e1ea      	b.n	8006c68 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068a8:	83fb      	strh	r3, [r7, #30]
 80068aa:	8bfb      	ldrh	r3, [r7, #30]
 80068ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068b0:	83fb      	strh	r3, [r7, #30]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	441a      	add	r2, r3
 80068bc:	8bfb      	ldrh	r3, [r7, #30]
 80068be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	8013      	strh	r3, [r2, #0]
 80068d2:	e1c9      	b.n	8006c68 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	78db      	ldrb	r3, [r3, #3]
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d11e      	bne.n	800691a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	441a      	add	r2, r3
 8006900:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006904:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006908:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800690c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006914:	b29b      	uxth	r3, r3
 8006916:	8013      	strh	r3, [r2, #0]
 8006918:	e01d      	b.n	8006956 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800692c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006930:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	441a      	add	r2, r3
 800693e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800694a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800694e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006952:	b29b      	uxth	r3, r3
 8006954:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006960:	b29b      	uxth	r3, r3
 8006962:	461a      	mov	r2, r3
 8006964:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006966:	4413      	add	r3, r2
 8006968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	011a      	lsls	r2, r3, #4
 8006970:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006972:	4413      	add	r3, r2
 8006974:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006978:	65bb      	str	r3, [r7, #88]	@ 0x58
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	891b      	ldrh	r3, [r3, #8]
 800697e:	085b      	lsrs	r3, r3, #1
 8006980:	b29b      	uxth	r3, r3
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006988:	801a      	strh	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	657b      	str	r3, [r7, #84]	@ 0x54
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006994:	b29b      	uxth	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800699a:	4413      	add	r3, r2
 800699c:	657b      	str	r3, [r7, #84]	@ 0x54
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	011a      	lsls	r2, r3, #4
 80069a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80069ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	895b      	ldrh	r3, [r3, #10]
 80069b2:	085b      	lsrs	r3, r3, #1
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069bc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	785b      	ldrb	r3, [r3, #1]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f040 8093 	bne.w	8006aee <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80069d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80069dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01b      	beq.n	8006a1c <USB_ActivateEndpoint+0x524>
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069fa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	441a      	add	r2, r3
 8006a06:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006a08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006a2a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01b      	beq.n	8006a6c <USB_ActivateEndpoint+0x574>
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a4a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	441a      	add	r2, r3
 8006a56:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006a58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a82:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006a84:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006a86:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a8a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006a8c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006a8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a92:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	441a      	add	r2, r3
 8006a9e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006aa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aca:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	441a      	add	r2, r3
 8006ad6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ad8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006adc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ae0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	8013      	strh	r3, [r2, #0]
 8006aec:	e0bc      	b.n	8006c68 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006afe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d01d      	beq.n	8006b46 <USB_ActivateEndpoint+0x64e>
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b20:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	441a      	add	r2, r3
 8006b2e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006b32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006b56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d01d      	beq.n	8006b9e <USB_ActivateEndpoint+0x6a6>
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b78:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	441a      	add	r2, r3
 8006b86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	78db      	ldrb	r3, [r3, #3]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d024      	beq.n	8006bf0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bbc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006bc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006bc4:	f083 0320 	eor.w	r3, r3, #32
 8006bc8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	441a      	add	r2, r3
 8006bd6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	8013      	strh	r3, [r2, #0]
 8006bee:	e01d      	b.n	8006c2c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	441a      	add	r2, r3
 8006c14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c42:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	441a      	add	r2, r3
 8006c50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006c54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006c68:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3774      	adds	r7, #116	@ 0x74
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bc80      	pop	{r7}
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop

08006c78 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b08d      	sub	sp, #52	@ 0x34
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	7b1b      	ldrb	r3, [r3, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f040 808e 	bne.w	8006da8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	785b      	ldrb	r3, [r3, #1]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d044      	beq.n	8006d1e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	81bb      	strh	r3, [r7, #12]
 8006ca2:	89bb      	ldrh	r3, [r7, #12]
 8006ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01b      	beq.n	8006ce4 <USB_DeactivateEndpoint+0x6c>
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cc2:	817b      	strh	r3, [r7, #10]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	441a      	add	r2, r3
 8006cce:	897b      	ldrh	r3, [r7, #10]
 8006cd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cdc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cfa:	813b      	strh	r3, [r7, #8]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	441a      	add	r2, r3
 8006d06:	893b      	ldrh	r3, [r7, #8]
 8006d08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	8013      	strh	r3, [r2, #0]
 8006d1c:	e192      	b.n	8007044 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	827b      	strh	r3, [r7, #18]
 8006d2c:	8a7b      	ldrh	r3, [r7, #18]
 8006d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01b      	beq.n	8006d6e <USB_DeactivateEndpoint+0xf6>
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d4c:	823b      	strh	r3, [r7, #16]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	441a      	add	r2, r3
 8006d58:	8a3b      	ldrh	r3, [r7, #16]
 8006d5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d84:	81fb      	strh	r3, [r7, #14]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	441a      	add	r2, r3
 8006d90:	89fb      	ldrh	r3, [r7, #14]
 8006d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	8013      	strh	r3, [r2, #0]
 8006da6:	e14d      	b.n	8007044 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	785b      	ldrb	r3, [r3, #1]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f040 80a5 	bne.w	8006efc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	843b      	strh	r3, [r7, #32]
 8006dc0:	8c3b      	ldrh	r3, [r7, #32]
 8006dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01b      	beq.n	8006e02 <USB_DeactivateEndpoint+0x18a>
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006de0:	83fb      	strh	r3, [r7, #30]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	441a      	add	r2, r3
 8006dec:	8bfb      	ldrh	r3, [r7, #30]
 8006dee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006df2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006df6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	83bb      	strh	r3, [r7, #28]
 8006e10:	8bbb      	ldrh	r3, [r7, #28]
 8006e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d01b      	beq.n	8006e52 <USB_DeactivateEndpoint+0x1da>
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e30:	837b      	strh	r3, [r7, #26]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	8b7b      	ldrh	r3, [r7, #26]
 8006e3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e4a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e68:	833b      	strh	r3, [r7, #24]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	441a      	add	r2, r3
 8006e74:	8b3b      	ldrh	r3, [r7, #24]
 8006e76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e82:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ea0:	82fb      	strh	r3, [r7, #22]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	441a      	add	r2, r3
 8006eac:	8afb      	ldrh	r3, [r7, #22]
 8006eae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ed8:	82bb      	strh	r3, [r7, #20]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	8abb      	ldrh	r3, [r7, #20]
 8006ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	8013      	strh	r3, [r2, #0]
 8006efa:	e0a3      	b.n	8007044 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006f0a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01b      	beq.n	8006f4c <USB_DeactivateEndpoint+0x2d4>
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f2a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	441a      	add	r2, r3
 8006f36:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006f5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d01b      	beq.n	8006f9c <USB_DeactivateEndpoint+0x324>
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f7a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	441a      	add	r2, r3
 8006f86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fb2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007000:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007008:	b29b      	uxth	r3, r3
 800700a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	b29b      	uxth	r3, r3
 800701a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800701e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007022:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	441a      	add	r2, r3
 800702e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007030:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007034:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800703c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007040:	b29b      	uxth	r3, r3
 8007042:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3734      	adds	r7, #52	@ 0x34
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr

08007050 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b0c2      	sub	sp, #264	@ 0x108
 8007054:	af00      	add	r7, sp, #0
 8007056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800705a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800705e:	6018      	str	r0, [r3, #0]
 8007060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007068:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800706a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	2b01      	cmp	r3, #1
 8007078:	f040 86b7 	bne.w	8007dea <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800707c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	699a      	ldr	r2, [r3, #24]
 8007088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	429a      	cmp	r2, r3
 8007096:	d908      	bls.n	80070aa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80070a8:	e007      	b.n	80070ba <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80070aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80070ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	7b1b      	ldrb	r3, [r3, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d13a      	bne.n	8007140 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80070ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6959      	ldr	r1, [r3, #20]
 80070d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	88da      	ldrh	r2, [r3, #6]
 80070e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80070ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80070f0:	6800      	ldr	r0, [r0, #0]
 80070f2:	f001 fc9c 	bl	8008a2e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	613b      	str	r3, [r7, #16]
 8007102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007110:	b29b      	uxth	r3, r3
 8007112:	461a      	mov	r2, r3
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	4413      	add	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
 800711a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	011a      	lsls	r2, r3, #4
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	4413      	add	r3, r2
 800712c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	801a      	strh	r2, [r3, #0]
 800713c:	f000 be1f 	b.w	8007d7e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	78db      	ldrb	r3, [r3, #3]
 800714c:	2b02      	cmp	r3, #2
 800714e:	f040 8462 	bne.w	8007a16 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6a1a      	ldr	r2, [r3, #32]
 800715e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	429a      	cmp	r2, r3
 800716c:	f240 83df 	bls.w	800792e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	b29b      	uxth	r3, r3
 800718e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007196:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800719a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	441a      	add	r2, r3
 80071b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80071b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071c0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80071c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80071cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6a1a      	ldr	r2, [r3, #32]
 80071d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071dc:	1ad2      	subs	r2, r2, r3
 80071de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	b29b      	uxth	r3, r3
 8007208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 81c7 	beq.w	80075a0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007216:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	633b      	str	r3, [r7, #48]	@ 0x30
 800721e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d177      	bne.n	800731e <USB_EPStartXfer+0x2ce>
 800722e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	62bb      	str	r3, [r7, #40]	@ 0x28
 800723a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007248:	b29b      	uxth	r3, r3
 800724a:	461a      	mov	r2, r3
 800724c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724e:	4413      	add	r3, r2
 8007250:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	011a      	lsls	r2, r3, #4
 8007260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007262:	4413      	add	r3, r2
 8007264:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007268:	627b      	str	r3, [r7, #36]	@ 0x24
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	b29b      	uxth	r3, r3
 8007270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007274:	b29a      	uxth	r2, r3
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	801a      	strh	r2, [r3, #0]
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007280:	d921      	bls.n	80072c6 <USB_EPStartXfer+0x276>
 8007282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007286:	095b      	lsrs	r3, r3, #5
 8007288:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800728c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007290:	f003 031f 	and.w	r3, r3, #31
 8007294:	2b00      	cmp	r3, #0
 8007296:	d104      	bne.n	80072a2 <USB_EPStartXfer+0x252>
 8007298:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800729c:	3b01      	subs	r3, #1
 800729e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	029b      	lsls	r3, r3, #10
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	4313      	orrs	r3, r2
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072be:	b29a      	uxth	r2, r3
 80072c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c2:	801a      	strh	r2, [r3, #0]
 80072c4:	e050      	b.n	8007368 <USB_EPStartXfer+0x318>
 80072c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10a      	bne.n	80072e4 <USB_EPStartXfer+0x294>
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072dc:	b29a      	uxth	r2, r3
 80072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e0:	801a      	strh	r2, [r3, #0]
 80072e2:	e041      	b.n	8007368 <USB_EPStartXfer+0x318>
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e8:	085b      	lsrs	r3, r3, #1
 80072ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80072ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d004      	beq.n	8007304 <USB_EPStartXfer+0x2b4>
 80072fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80072fe:	3301      	adds	r3, #1
 8007300:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	b29a      	uxth	r2, r3
 800730a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800730e:	b29b      	uxth	r3, r3
 8007310:	029b      	lsls	r3, r3, #10
 8007312:	b29b      	uxth	r3, r3
 8007314:	4313      	orrs	r3, r2
 8007316:	b29a      	uxth	r2, r3
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	801a      	strh	r2, [r3, #0]
 800731c:	e024      	b.n	8007368 <USB_EPStartXfer+0x318>
 800731e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	785b      	ldrb	r3, [r3, #1]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d11c      	bne.n	8007368 <USB_EPStartXfer+0x318>
 800732e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800733c:	b29b      	uxth	r3, r3
 800733e:	461a      	mov	r2, r3
 8007340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007342:	4413      	add	r3, r2
 8007344:	633b      	str	r3, [r7, #48]	@ 0x30
 8007346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	011a      	lsls	r2, r3, #4
 8007354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007356:	4413      	add	r3, r2
 8007358:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800735c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800735e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007362:	b29a      	uxth	r2, r3
 8007364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007366:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	895b      	ldrh	r3, [r3, #10]
 8007374:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6959      	ldr	r1, [r3, #20]
 8007384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007388:	b29b      	uxth	r3, r3
 800738a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800738e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007392:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007396:	6800      	ldr	r0, [r0, #0]
 8007398:	f001 fb49 	bl	8008a2e <USB_WritePMA>
            ep->xfer_buff += len;
 800739c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	695a      	ldr	r2, [r3, #20]
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ac:	441a      	add	r2, r3
 80073ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6a1a      	ldr	r2, [r3, #32]
 80073c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d90f      	bls.n	80073f6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80073d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6a1a      	ldr	r2, [r3, #32]
 80073e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e6:	1ad2      	subs	r2, r2, r3
 80073e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	621a      	str	r2, [r3, #32]
 80073f4:	e00e      	b.n	8007414 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80073f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2200      	movs	r2, #0
 8007412:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	785b      	ldrb	r3, [r3, #1]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d177      	bne.n	8007514 <USB_EPStartXfer+0x4c4>
 8007424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007428:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007434:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800743e:	b29b      	uxth	r3, r3
 8007440:	461a      	mov	r2, r3
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	4413      	add	r3, r2
 8007446:	61bb      	str	r3, [r7, #24]
 8007448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	011a      	lsls	r2, r3, #4
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	4413      	add	r3, r2
 800745a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800746a:	b29a      	uxth	r2, r3
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	801a      	strh	r2, [r3, #0]
 8007470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007474:	2b3e      	cmp	r3, #62	@ 0x3e
 8007476:	d921      	bls.n	80074bc <USB_EPStartXfer+0x46c>
 8007478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747c:	095b      	lsrs	r3, r3, #5
 800747e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007486:	f003 031f 	and.w	r3, r3, #31
 800748a:	2b00      	cmp	r3, #0
 800748c:	d104      	bne.n	8007498 <USB_EPStartXfer+0x448>
 800748e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007492:	3b01      	subs	r3, #1
 8007494:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	b29a      	uxth	r2, r3
 800749e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	029b      	lsls	r3, r3, #10
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	4313      	orrs	r3, r2
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	801a      	strh	r2, [r3, #0]
 80074ba:	e056      	b.n	800756a <USB_EPStartXfer+0x51a>
 80074bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10a      	bne.n	80074da <USB_EPStartXfer+0x48a>
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	881b      	ldrh	r3, [r3, #0]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	801a      	strh	r2, [r3, #0]
 80074d8:	e047      	b.n	800756a <USB_EPStartXfer+0x51a>
 80074da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074de:	085b      	lsrs	r3, r3, #1
 80074e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d004      	beq.n	80074fa <USB_EPStartXfer+0x4aa>
 80074f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074f4:	3301      	adds	r3, #1
 80074f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	b29a      	uxth	r2, r3
 8007500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007504:	b29b      	uxth	r3, r3
 8007506:	029b      	lsls	r3, r3, #10
 8007508:	b29b      	uxth	r3, r3
 800750a:	4313      	orrs	r3, r2
 800750c:	b29a      	uxth	r2, r3
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	801a      	strh	r2, [r3, #0]
 8007512:	e02a      	b.n	800756a <USB_EPStartXfer+0x51a>
 8007514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	785b      	ldrb	r3, [r3, #1]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d122      	bne.n	800756a <USB_EPStartXfer+0x51a>
 8007524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007528:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	623b      	str	r3, [r7, #32]
 8007530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800753e:	b29b      	uxth	r3, r3
 8007540:	461a      	mov	r2, r3
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	4413      	add	r3, r2
 8007546:	623b      	str	r3, [r7, #32]
 8007548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	011a      	lsls	r2, r3, #4
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	4413      	add	r3, r2
 800755a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800755e:	61fb      	str	r3, [r7, #28]
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007564:	b29a      	uxth	r2, r3
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800756a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	891b      	ldrh	r3, [r3, #8]
 8007576:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800757a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6959      	ldr	r1, [r3, #20]
 8007586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800758a:	b29b      	uxth	r3, r3
 800758c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007590:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007594:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007598:	6800      	ldr	r0, [r0, #0]
 800759a:	f001 fa48 	bl	8008a2e <USB_WritePMA>
 800759e:	e3ee      	b.n	8007d7e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	785b      	ldrb	r3, [r3, #1]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d177      	bne.n	80076a0 <USB_EPStartXfer+0x650>
 80075b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075d0:	4413      	add	r3, r2
 80075d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	011a      	lsls	r2, r3, #4
 80075e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075e4:	4413      	add	r3, r2
 80075e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80075ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007600:	2b3e      	cmp	r3, #62	@ 0x3e
 8007602:	d921      	bls.n	8007648 <USB_EPStartXfer+0x5f8>
 8007604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007608:	095b      	lsrs	r3, r3, #5
 800760a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007612:	f003 031f 	and.w	r3, r3, #31
 8007616:	2b00      	cmp	r3, #0
 8007618:	d104      	bne.n	8007624 <USB_EPStartXfer+0x5d4>
 800761a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800761e:	3b01      	subs	r3, #1
 8007620:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	b29a      	uxth	r2, r3
 800762a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800762e:	b29b      	uxth	r3, r3
 8007630:	029b      	lsls	r3, r3, #10
 8007632:	b29b      	uxth	r3, r3
 8007634:	4313      	orrs	r3, r2
 8007636:	b29b      	uxth	r3, r3
 8007638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800763c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007640:	b29a      	uxth	r2, r3
 8007642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007644:	801a      	strh	r2, [r3, #0]
 8007646:	e056      	b.n	80076f6 <USB_EPStartXfer+0x6a6>
 8007648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <USB_EPStartXfer+0x616>
 8007650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765e:	b29a      	uxth	r2, r3
 8007660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007662:	801a      	strh	r2, [r3, #0]
 8007664:	e047      	b.n	80076f6 <USB_EPStartXfer+0x6a6>
 8007666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800766a:	085b      	lsrs	r3, r3, #1
 800766c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d004      	beq.n	8007686 <USB_EPStartXfer+0x636>
 800767c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007680:	3301      	adds	r3, #1
 8007682:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29a      	uxth	r2, r3
 800768c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007690:	b29b      	uxth	r3, r3
 8007692:	029b      	lsls	r3, r3, #10
 8007694:	b29b      	uxth	r3, r3
 8007696:	4313      	orrs	r3, r2
 8007698:	b29a      	uxth	r2, r3
 800769a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	e02a      	b.n	80076f6 <USB_EPStartXfer+0x6a6>
 80076a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d122      	bne.n	80076f6 <USB_EPStartXfer+0x6a6>
 80076b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80076bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076d0:	4413      	add	r3, r2
 80076d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80076d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	011a      	lsls	r2, r3, #4
 80076e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076e4:	4413      	add	r3, r2
 80076e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	891b      	ldrh	r3, [r3, #8]
 8007702:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6959      	ldr	r1, [r3, #20]
 8007712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007716:	b29b      	uxth	r3, r3
 8007718:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800771c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007720:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007724:	6800      	ldr	r0, [r0, #0]
 8007726:	f001 f982 	bl	8008a2e <USB_WritePMA>
            ep->xfer_buff += len;
 800772a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695a      	ldr	r2, [r3, #20]
 8007736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773a:	441a      	add	r2, r3
 800773c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6a1a      	ldr	r2, [r3, #32]
 8007754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	429a      	cmp	r2, r3
 8007762:	d90f      	bls.n	8007784 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6a1a      	ldr	r2, [r3, #32]
 8007770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007774:	1ad2      	subs	r2, r2, r3
 8007776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	621a      	str	r2, [r3, #32]
 8007782:	e00e      	b.n	80077a2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2200      	movs	r2, #0
 80077a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80077ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	785b      	ldrb	r3, [r3, #1]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d177      	bne.n	80078ae <USB_EPStartXfer+0x85e>
 80077be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077d8:	b29b      	uxth	r3, r3
 80077da:	461a      	mov	r2, r3
 80077dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077de:	4413      	add	r3, r2
 80077e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	011a      	lsls	r2, r3, #4
 80077f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f2:	4413      	add	r3, r2
 80077f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80077f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007804:	b29a      	uxth	r2, r3
 8007806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007808:	801a      	strh	r2, [r3, #0]
 800780a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007810:	d921      	bls.n	8007856 <USB_EPStartXfer+0x806>
 8007812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007820:	f003 031f 	and.w	r3, r3, #31
 8007824:	2b00      	cmp	r3, #0
 8007826:	d104      	bne.n	8007832 <USB_EPStartXfer+0x7e2>
 8007828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800782c:	3b01      	subs	r3, #1
 800782e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	b29a      	uxth	r2, r3
 8007838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783c:	b29b      	uxth	r3, r3
 800783e:	029b      	lsls	r3, r3, #10
 8007840:	b29b      	uxth	r3, r3
 8007842:	4313      	orrs	r3, r2
 8007844:	b29b      	uxth	r3, r3
 8007846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800784a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784e:	b29a      	uxth	r2, r3
 8007850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007852:	801a      	strh	r2, [r3, #0]
 8007854:	e050      	b.n	80078f8 <USB_EPStartXfer+0x8a8>
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <USB_EPStartXfer+0x824>
 800785e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786c:	b29a      	uxth	r2, r3
 800786e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007870:	801a      	strh	r2, [r3, #0]
 8007872:	e041      	b.n	80078f8 <USB_EPStartXfer+0x8a8>
 8007874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007878:	085b      	lsrs	r3, r3, #1
 800787a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800787e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	d004      	beq.n	8007894 <USB_EPStartXfer+0x844>
 800788a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800788e:	3301      	adds	r3, #1
 8007890:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	b29a      	uxth	r2, r3
 800789a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800789e:	b29b      	uxth	r3, r3
 80078a0:	029b      	lsls	r3, r3, #10
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	4313      	orrs	r3, r2
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078aa:	801a      	strh	r2, [r3, #0]
 80078ac:	e024      	b.n	80078f8 <USB_EPStartXfer+0x8a8>
 80078ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d11c      	bne.n	80078f8 <USB_EPStartXfer+0x8a8>
 80078be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	461a      	mov	r2, r3
 80078d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d2:	4413      	add	r3, r2
 80078d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80078d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	011a      	lsls	r2, r3, #4
 80078e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e6:	4413      	add	r3, r2
 80078e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	895b      	ldrh	r3, [r3, #10]
 8007904:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6959      	ldr	r1, [r3, #20]
 8007914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007918:	b29b      	uxth	r3, r3
 800791a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800791e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007922:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007926:	6800      	ldr	r0, [r0, #0]
 8007928:	f001 f881 	bl	8008a2e <USB_WritePMA>
 800792c:	e227      	b.n	8007d7e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800792e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800793e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007942:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	b29b      	uxth	r3, r3
 800795c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007964:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	441a      	add	r2, r3
 8007982:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800798a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800798e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007996:	b29b      	uxth	r3, r3
 8007998:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800799a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	461a      	mov	r2, r3
 80079b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079ba:	4413      	add	r3, r2
 80079bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	011a      	lsls	r2, r3, #4
 80079cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079ce:	4413      	add	r3, r2
 80079d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80079d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079da:	b29a      	uxth	r2, r3
 80079dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80079e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	891b      	ldrh	r3, [r3, #8]
 80079ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6959      	ldr	r1, [r3, #20]
 80079fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a06:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a0a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a0e:	6800      	ldr	r0, [r0, #0]
 8007a10:	f001 f80d 	bl	8008a2e <USB_WritePMA>
 8007a14:	e1b3      	b.n	8007d7e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6a1a      	ldr	r2, [r3, #32]
 8007a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a26:	1ad2      	subs	r2, r2, r3
 8007a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	881b      	ldrh	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 80c6 	beq.w	8007be8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	785b      	ldrb	r3, [r3, #1]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d177      	bne.n	8007b68 <USB_EPStartXfer+0xb18>
 8007a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	461a      	mov	r2, r3
 8007a96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a98:	4413      	add	r3, r2
 8007a9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	011a      	lsls	r2, r3, #4
 8007aaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007aac:	4413      	add	r3, r2
 8007aae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ab2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ab4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ac2:	801a      	strh	r2, [r3, #0]
 8007ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007aca:	d921      	bls.n	8007b10 <USB_EPStartXfer+0xac0>
 8007acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad0:	095b      	lsrs	r3, r3, #5
 8007ad2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ada:	f003 031f 	and.w	r3, r3, #31
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d104      	bne.n	8007aec <USB_EPStartXfer+0xa9c>
 8007ae2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	029b      	lsls	r3, r3, #10
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	4313      	orrs	r3, r2
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b0c:	801a      	strh	r2, [r3, #0]
 8007b0e:	e050      	b.n	8007bb2 <USB_EPStartXfer+0xb62>
 8007b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10a      	bne.n	8007b2e <USB_EPStartXfer+0xade>
 8007b18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b2a:	801a      	strh	r2, [r3, #0]
 8007b2c:	e041      	b.n	8007bb2 <USB_EPStartXfer+0xb62>
 8007b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b32:	085b      	lsrs	r3, r3, #1
 8007b34:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d004      	beq.n	8007b4e <USB_EPStartXfer+0xafe>
 8007b44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b48:	3301      	adds	r3, #1
 8007b4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	029b      	lsls	r3, r3, #10
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b64:	801a      	strh	r2, [r3, #0]
 8007b66:	e024      	b.n	8007bb2 <USB_EPStartXfer+0xb62>
 8007b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	785b      	ldrb	r3, [r3, #1]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d11c      	bne.n	8007bb2 <USB_EPStartXfer+0xb62>
 8007b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	461a      	mov	r2, r3
 8007b8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b8c:	4413      	add	r3, r2
 8007b8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	011a      	lsls	r2, r3, #4
 8007b9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ba6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bb0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	895b      	ldrh	r3, [r3, #10]
 8007bbe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6959      	ldr	r1, [r3, #20]
 8007bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007bd8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007bdc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007be0:	6800      	ldr	r0, [r0, #0]
 8007be2:	f000 ff24 	bl	8008a2e <USB_WritePMA>
 8007be6:	e0ca      	b.n	8007d7e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	785b      	ldrb	r3, [r3, #1]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d177      	bne.n	8007ce8 <USB_EPStartXfer+0xc98>
 8007bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	461a      	mov	r2, r3
 8007c16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c18:	4413      	add	r3, r2
 8007c1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	011a      	lsls	r2, r3, #4
 8007c2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c48:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c4a:	d921      	bls.n	8007c90 <USB_EPStartXfer+0xc40>
 8007c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c50:	095b      	lsrs	r3, r3, #5
 8007c52:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5a:	f003 031f 	and.w	r3, r3, #31
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d104      	bne.n	8007c6c <USB_EPStartXfer+0xc1c>
 8007c62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007c66:	3b01      	subs	r3, #1
 8007c68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	029b      	lsls	r3, r3, #10
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c8c:	801a      	strh	r2, [r3, #0]
 8007c8e:	e05c      	b.n	8007d4a <USB_EPStartXfer+0xcfa>
 8007c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <USB_EPStartXfer+0xc5e>
 8007c98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007caa:	801a      	strh	r2, [r3, #0]
 8007cac:	e04d      	b.n	8007d4a <USB_EPStartXfer+0xcfa>
 8007cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb2:	085b      	lsrs	r3, r3, #1
 8007cb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d004      	beq.n	8007cce <USB_EPStartXfer+0xc7e>
 8007cc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007cc8:	3301      	adds	r3, #1
 8007cca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	029b      	lsls	r3, r3, #10
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ce4:	801a      	strh	r2, [r3, #0]
 8007ce6:	e030      	b.n	8007d4a <USB_EPStartXfer+0xcfa>
 8007ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	785b      	ldrb	r3, [r3, #1]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d128      	bne.n	8007d4a <USB_EPStartXfer+0xcfa>
 8007cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	461a      	mov	r2, r3
 8007d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	011a      	lsls	r2, r3, #4
 8007d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d34:	4413      	add	r3, r2
 8007d36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	891b      	ldrh	r3, [r3, #8]
 8007d56:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6959      	ldr	r1, [r3, #20]
 8007d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d70:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d74:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d78:	6800      	ldr	r0, [r0, #0]
 8007d7a:	f000 fe58 	bl	8008a2e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007da4:	817b      	strh	r3, [r7, #10]
 8007da6:	897b      	ldrh	r3, [r7, #10]
 8007da8:	f083 0310 	eor.w	r3, r3, #16
 8007dac:	817b      	strh	r3, [r7, #10]
 8007dae:	897b      	ldrh	r3, [r7, #10]
 8007db0:	f083 0320 	eor.w	r3, r3, #32
 8007db4:	817b      	strh	r3, [r7, #10]
 8007db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	441a      	add	r2, r3
 8007dd0:	897b      	ldrh	r3, [r7, #10]
 8007dd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	8013      	strh	r3, [r2, #0]
 8007de6:	f000 bcde 	b.w	80087a6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	7b1b      	ldrb	r3, [r3, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f040 80bb 	bne.w	8007f72 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	699a      	ldr	r2, [r3, #24]
 8007e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d917      	bls.n	8007e48 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	699a      	ldr	r2, [r3, #24]
 8007e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e38:	1ad2      	subs	r2, r2, r3
 8007e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	619a      	str	r2, [r3, #24]
 8007e46:	e00e      	b.n	8007e66 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2200      	movs	r2, #0
 8007e64:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	461a      	mov	r2, r3
 8007e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	011a      	lsls	r2, r3, #4
 8007e9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ea8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ebe:	801a      	strh	r2, [r3, #0]
 8007ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ec4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ec6:	d924      	bls.n	8007f12 <USB_EPStartXfer+0xec2>
 8007ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ecc:	095b      	lsrs	r3, r3, #5
 8007ece:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed6:	f003 031f 	and.w	r3, r3, #31
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <USB_EPStartXfer+0xe98>
 8007ede:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	029b      	lsls	r3, r3, #10
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	4313      	orrs	r3, r2
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f0c:	801a      	strh	r2, [r3, #0]
 8007f0e:	f000 bc10 	b.w	8008732 <USB_EPStartXfer+0x16e2>
 8007f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10c      	bne.n	8007f34 <USB_EPStartXfer+0xee4>
 8007f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f30:	801a      	strh	r2, [r3, #0]
 8007f32:	e3fe      	b.n	8008732 <USB_EPStartXfer+0x16e2>
 8007f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f38:	085b      	lsrs	r3, r3, #1
 8007f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d004      	beq.n	8007f54 <USB_EPStartXfer+0xf04>
 8007f4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f4e:	3301      	adds	r3, #1
 8007f50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	029b      	lsls	r3, r3, #10
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	4313      	orrs	r3, r2
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f6e:	801a      	strh	r2, [r3, #0]
 8007f70:	e3df      	b.n	8008732 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	78db      	ldrb	r3, [r3, #3]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	f040 8218 	bne.w	80083b4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	785b      	ldrb	r3, [r3, #1]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f040 809d 	bne.w	80080d0 <USB_EPStartXfer+0x1080>
 8007f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fba:	4413      	add	r3, r2
 8007fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	011a      	lsls	r2, r3, #4
 8007fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007fdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007fee:	801a      	strh	r2, [r3, #0]
 8007ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ffe:	d92b      	bls.n	8008058 <USB_EPStartXfer+0x1008>
 8008000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	095b      	lsrs	r3, r3, #5
 800800e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f003 031f 	and.w	r3, r3, #31
 8008022:	2b00      	cmp	r3, #0
 8008024:	d104      	bne.n	8008030 <USB_EPStartXfer+0xfe0>
 8008026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800802a:	3b01      	subs	r3, #1
 800802c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008030:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	b29a      	uxth	r2, r3
 8008038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800803c:	b29b      	uxth	r3, r3
 800803e:	029b      	lsls	r3, r3, #10
 8008040:	b29b      	uxth	r3, r3
 8008042:	4313      	orrs	r3, r2
 8008044:	b29b      	uxth	r3, r3
 8008046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800804a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800804e:	b29a      	uxth	r2, r3
 8008050:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008054:	801a      	strh	r2, [r3, #0]
 8008056:	e070      	b.n	800813a <USB_EPStartXfer+0x10ea>
 8008058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10c      	bne.n	8008082 <USB_EPStartXfer+0x1032>
 8008068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008078:	b29a      	uxth	r2, r3
 800807a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800807e:	801a      	strh	r2, [r3, #0]
 8008080:	e05b      	b.n	800813a <USB_EPStartXfer+0x10ea>
 8008082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	085b      	lsrs	r3, r3, #1
 8008090:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d004      	beq.n	80080b2 <USB_EPStartXfer+0x1062>
 80080a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ac:	3301      	adds	r3, #1
 80080ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080b6:	881b      	ldrh	r3, [r3, #0]
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080be:	b29b      	uxth	r3, r3
 80080c0:	029b      	lsls	r3, r3, #10
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	4313      	orrs	r3, r2
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080cc:	801a      	strh	r2, [r3, #0]
 80080ce:	e034      	b.n	800813a <USB_EPStartXfer+0x10ea>
 80080d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	785b      	ldrb	r3, [r3, #1]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d12c      	bne.n	800813a <USB_EPStartXfer+0x10ea>
 80080e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	461a      	mov	r2, r3
 8008100:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008104:	4413      	add	r3, r2
 8008106:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800810a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800810e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	011a      	lsls	r2, r3, #4
 8008118:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800811c:	4413      	add	r3, r2
 800811e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008122:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	b29a      	uxth	r2, r3
 8008134:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008138:	801a      	strh	r2, [r3, #0]
 800813a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	785b      	ldrb	r3, [r3, #1]
 8008154:	2b00      	cmp	r3, #0
 8008156:	f040 809d 	bne.w	8008294 <USB_EPStartXfer+0x1244>
 800815a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800815e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800816c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008176:	b29b      	uxth	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800817e:	4413      	add	r3, r2
 8008180:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	011a      	lsls	r2, r3, #4
 8008192:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008196:	4413      	add	r3, r2
 8008198:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800819c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081b2:	801a      	strh	r2, [r3, #0]
 80081b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80081c2:	d92b      	bls.n	800821c <USB_EPStartXfer+0x11cc>
 80081c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	095b      	lsrs	r3, r3, #5
 80081d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	f003 031f 	and.w	r3, r3, #31
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d104      	bne.n	80081f4 <USB_EPStartXfer+0x11a4>
 80081ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081ee:	3b01      	subs	r3, #1
 80081f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008200:	b29b      	uxth	r3, r3
 8008202:	029b      	lsls	r3, r3, #10
 8008204:	b29b      	uxth	r3, r3
 8008206:	4313      	orrs	r3, r2
 8008208:	b29b      	uxth	r3, r3
 800820a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800820e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008212:	b29a      	uxth	r2, r3
 8008214:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008218:	801a      	strh	r2, [r3, #0]
 800821a:	e069      	b.n	80082f0 <USB_EPStartXfer+0x12a0>
 800821c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10c      	bne.n	8008246 <USB_EPStartXfer+0x11f6>
 800822c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800823c:	b29a      	uxth	r2, r3
 800823e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008242:	801a      	strh	r2, [r3, #0]
 8008244:	e054      	b.n	80082f0 <USB_EPStartXfer+0x12a0>
 8008246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	085b      	lsrs	r3, r3, #1
 8008254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	d004      	beq.n	8008276 <USB_EPStartXfer+0x1226>
 800826c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008270:	3301      	adds	r3, #1
 8008272:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008276:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	b29a      	uxth	r2, r3
 800827e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008282:	b29b      	uxth	r3, r3
 8008284:	029b      	lsls	r3, r3, #10
 8008286:	b29b      	uxth	r3, r3
 8008288:	4313      	orrs	r3, r2
 800828a:	b29a      	uxth	r2, r3
 800828c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008290:	801a      	strh	r2, [r3, #0]
 8008292:	e02d      	b.n	80082f0 <USB_EPStartXfer+0x12a0>
 8008294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	785b      	ldrb	r3, [r3, #1]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d125      	bne.n	80082f0 <USB_EPStartXfer+0x12a0>
 80082a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80082ba:	4413      	add	r3, r2
 80082bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80082c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	011a      	lsls	r2, r3, #4
 80082ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80082d2:	4413      	add	r3, r2
 80082d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80082d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80082dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082ee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80082f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	69db      	ldr	r3, [r3, #28]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 8218 	beq.w	8008732 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008322:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d005      	beq.n	800833a <USB_EPStartXfer+0x12ea>
 800832e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10d      	bne.n	8008356 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800833a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800833e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008342:	2b00      	cmp	r3, #0
 8008344:	f040 81f5 	bne.w	8008732 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008348:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800834c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008350:	2b00      	cmp	r3, #0
 8008352:	f040 81ee 	bne.w	8008732 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800835a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	b29b      	uxth	r3, r3
 8008374:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800837c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008384:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800838e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	441a      	add	r2, r3
 800839a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800839e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	8013      	strh	r3, [r2, #0]
 80083b2:	e1be      	b.n	8008732 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80083b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	78db      	ldrb	r3, [r3, #3]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	f040 81b4 	bne.w	800872e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80083c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	699a      	ldr	r2, [r3, #24]
 80083d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d917      	bls.n	8008412 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80083e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80083f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699a      	ldr	r2, [r3, #24]
 80083fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008402:	1ad2      	subs	r2, r2, r3
 8008404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	619a      	str	r2, [r3, #24]
 8008410:	e00e      	b.n	8008430 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2200      	movs	r2, #0
 800842e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	785b      	ldrb	r3, [r3, #1]
 800843c:	2b00      	cmp	r3, #0
 800843e:	f040 8085 	bne.w	800854c <USB_EPStartXfer+0x14fc>
 8008442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800845e:	b29b      	uxth	r3, r3
 8008460:	461a      	mov	r2, r3
 8008462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008466:	4413      	add	r3, r2
 8008468:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800846c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	011a      	lsls	r2, r3, #4
 800847a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800847e:	4413      	add	r3, r2
 8008480:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008484:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008488:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	b29b      	uxth	r3, r3
 8008490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008494:	b29a      	uxth	r2, r3
 8008496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800849a:	801a      	strh	r2, [r3, #0]
 800849c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80084a2:	d923      	bls.n	80084ec <USB_EPStartXfer+0x149c>
 80084a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a8:	095b      	lsrs	r3, r3, #5
 80084aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b2:	f003 031f 	and.w	r3, r3, #31
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d104      	bne.n	80084c4 <USB_EPStartXfer+0x1474>
 80084ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084be:	3b01      	subs	r3, #1
 80084c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	029b      	lsls	r3, r3, #10
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	4313      	orrs	r3, r2
 80084d8:	b29b      	uxth	r3, r3
 80084da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084e8:	801a      	strh	r2, [r3, #0]
 80084ea:	e060      	b.n	80085ae <USB_EPStartXfer+0x155e>
 80084ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10c      	bne.n	800850e <USB_EPStartXfer+0x14be>
 80084f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008504:	b29a      	uxth	r2, r3
 8008506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800850a:	801a      	strh	r2, [r3, #0]
 800850c:	e04f      	b.n	80085ae <USB_EPStartXfer+0x155e>
 800850e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008512:	085b      	lsrs	r3, r3, #1
 8008514:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	d004      	beq.n	800852e <USB_EPStartXfer+0x14de>
 8008524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008528:	3301      	adds	r3, #1
 800852a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800852e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29a      	uxth	r2, r3
 8008536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800853a:	b29b      	uxth	r3, r3
 800853c:	029b      	lsls	r3, r3, #10
 800853e:	b29b      	uxth	r3, r3
 8008540:	4313      	orrs	r3, r2
 8008542:	b29a      	uxth	r2, r3
 8008544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008548:	801a      	strh	r2, [r3, #0]
 800854a:	e030      	b.n	80085ae <USB_EPStartXfer+0x155e>
 800854c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	785b      	ldrb	r3, [r3, #1]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d128      	bne.n	80085ae <USB_EPStartXfer+0x155e>
 800855c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008560:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800856a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800856e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008578:	b29b      	uxth	r3, r3
 800857a:	461a      	mov	r2, r3
 800857c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008580:	4413      	add	r3, r2
 8008582:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800858a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	011a      	lsls	r2, r3, #4
 8008594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008598:	4413      	add	r3, r2
 800859a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800859e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80085ac:	801a      	strh	r2, [r3, #0]
 80085ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	785b      	ldrb	r3, [r3, #1]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f040 8085 	bne.w	80086d8 <USB_EPStartXfer+0x1688>
 80085ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80085dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	461a      	mov	r2, r3
 80085ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80085f2:	4413      	add	r3, r2
 80085f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80085f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	011a      	lsls	r2, r3, #4
 8008606:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800860a:	4413      	add	r3, r2
 800860c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008614:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	b29b      	uxth	r3, r3
 800861c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008620:	b29a      	uxth	r2, r3
 8008622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008626:	801a      	strh	r2, [r3, #0]
 8008628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800862c:	2b3e      	cmp	r3, #62	@ 0x3e
 800862e:	d923      	bls.n	8008678 <USB_EPStartXfer+0x1628>
 8008630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008634:	095b      	lsrs	r3, r3, #5
 8008636:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800863a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800863e:	f003 031f 	and.w	r3, r3, #31
 8008642:	2b00      	cmp	r3, #0
 8008644:	d104      	bne.n	8008650 <USB_EPStartXfer+0x1600>
 8008646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800864a:	3b01      	subs	r3, #1
 800864c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008650:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	b29a      	uxth	r2, r3
 8008658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800865c:	b29b      	uxth	r3, r3
 800865e:	029b      	lsls	r3, r3, #10
 8008660:	b29b      	uxth	r3, r3
 8008662:	4313      	orrs	r3, r2
 8008664:	b29b      	uxth	r3, r3
 8008666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800866a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800866e:	b29a      	uxth	r2, r3
 8008670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008674:	801a      	strh	r2, [r3, #0]
 8008676:	e05c      	b.n	8008732 <USB_EPStartXfer+0x16e2>
 8008678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10c      	bne.n	800869a <USB_EPStartXfer+0x164a>
 8008680:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	b29b      	uxth	r3, r3
 8008688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800868c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008690:	b29a      	uxth	r2, r3
 8008692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008696:	801a      	strh	r2, [r3, #0]
 8008698:	e04b      	b.n	8008732 <USB_EPStartXfer+0x16e2>
 800869a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800869e:	085b      	lsrs	r3, r3, #1
 80086a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d004      	beq.n	80086ba <USB_EPStartXfer+0x166a>
 80086b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086b4:	3301      	adds	r3, #1
 80086b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	029b      	lsls	r3, r3, #10
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	4313      	orrs	r3, r2
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	e02c      	b.n	8008732 <USB_EPStartXfer+0x16e2>
 80086d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	785b      	ldrb	r3, [r3, #1]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d124      	bne.n	8008732 <USB_EPStartXfer+0x16e2>
 80086e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	461a      	mov	r2, r3
 80086fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80086fe:	4413      	add	r3, r2
 8008700:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	011a      	lsls	r2, r3, #4
 8008712:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008716:	4413      	add	r3, r2
 8008718:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800871c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008724:	b29a      	uxth	r2, r3
 8008726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800872a:	801a      	strh	r2, [r3, #0]
 800872c:	e001      	b.n	8008732 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e03a      	b.n	80087a8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008736:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	b29b      	uxth	r3, r3
 8008750:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008758:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800875c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008760:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008764:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008768:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800876c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008770:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008778:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	441a      	add	r2, r3
 800878e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800879a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800879e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b085      	sub	sp, #20
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	785b      	ldrb	r3, [r3, #1]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d020      	beq.n	8008806 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087da:	81bb      	strh	r3, [r7, #12]
 80087dc:	89bb      	ldrh	r3, [r7, #12]
 80087de:	f083 0310 	eor.w	r3, r3, #16
 80087e2:	81bb      	strh	r3, [r7, #12]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	441a      	add	r2, r3
 80087ee:	89bb      	ldrh	r3, [r7, #12]
 80087f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008800:	b29b      	uxth	r3, r3
 8008802:	8013      	strh	r3, [r2, #0]
 8008804:	e01f      	b.n	8008846 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	b29b      	uxth	r3, r3
 8008814:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800881c:	81fb      	strh	r3, [r7, #14]
 800881e:	89fb      	ldrh	r3, [r7, #14]
 8008820:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008824:	81fb      	strh	r3, [r7, #14]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	441a      	add	r2, r3
 8008830:	89fb      	ldrh	r3, [r7, #14]
 8008832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800883a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800883e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008842:	b29b      	uxth	r3, r3
 8008844:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	bc80      	pop	{r7}
 8008850:	4770      	bx	lr

08008852 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008852:	b480      	push	{r7}
 8008854:	b087      	sub	sp, #28
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	7b1b      	ldrb	r3, [r3, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	f040 809d 	bne.w	80089a0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	785b      	ldrb	r3, [r3, #1]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d04c      	beq.n	8008908 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	823b      	strh	r3, [r7, #16]
 800887c:	8a3b      	ldrh	r3, [r7, #16]
 800887e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008882:	2b00      	cmp	r3, #0
 8008884:	d01b      	beq.n	80088be <USB_EPClearStall+0x6c>
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	b29b      	uxth	r3, r3
 8008894:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800889c:	81fb      	strh	r3, [r7, #14]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	441a      	add	r2, r3
 80088a8:	89fb      	ldrh	r3, [r7, #14]
 80088aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	78db      	ldrb	r3, [r3, #3]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d06c      	beq.n	80089a0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088dc:	81bb      	strh	r3, [r7, #12]
 80088de:	89bb      	ldrh	r3, [r7, #12]
 80088e0:	f083 0320 	eor.w	r3, r3, #32
 80088e4:	81bb      	strh	r3, [r7, #12]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	441a      	add	r2, r3
 80088f0:	89bb      	ldrh	r3, [r7, #12]
 80088f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008902:	b29b      	uxth	r3, r3
 8008904:	8013      	strh	r3, [r2, #0]
 8008906:	e04b      	b.n	80089a0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	82fb      	strh	r3, [r7, #22]
 8008916:	8afb      	ldrh	r3, [r7, #22]
 8008918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01b      	beq.n	8008958 <USB_EPClearStall+0x106>
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	b29b      	uxth	r3, r3
 800892e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008936:	82bb      	strh	r3, [r7, #20]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	441a      	add	r2, r3
 8008942:	8abb      	ldrh	r3, [r7, #20]
 8008944:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008948:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800894c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008954:	b29b      	uxth	r3, r3
 8008956:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4413      	add	r3, r2
 8008962:	881b      	ldrh	r3, [r3, #0]
 8008964:	b29b      	uxth	r3, r3
 8008966:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800896a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800896e:	827b      	strh	r3, [r7, #18]
 8008970:	8a7b      	ldrh	r3, [r7, #18]
 8008972:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008976:	827b      	strh	r3, [r7, #18]
 8008978:	8a7b      	ldrh	r3, [r7, #18]
 800897a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800897e:	827b      	strh	r3, [r7, #18]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	441a      	add	r2, r3
 800898a:	8a7b      	ldrh	r3, [r7, #18]
 800898c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800899c:	b29b      	uxth	r3, r3
 800899e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	371c      	adds	r7, #28
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bc80      	pop	{r7}
 80089aa:	4770      	bx	lr

080089ac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d103      	bne.n	80089c6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2280      	movs	r2, #128	@ 0x80
 80089c2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bc80      	pop	{r7}
 80089d0:	4770      	bx	lr

080089d2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b083      	sub	sp, #12
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bc80      	pop	{r7}
 80089e4:	4770      	bx	lr

080089e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b083      	sub	sp, #12
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bc80      	pop	{r7}
 80089f8:	4770      	bx	lr

080089fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b085      	sub	sp, #20
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bc80      	pop	{r7}
 8008a16:	4770      	bx	lr

08008a18 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bc80      	pop	{r7}
 8008a2c:	4770      	bx	lr

08008a2e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b08b      	sub	sp, #44	@ 0x2c
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	60f8      	str	r0, [r7, #12]
 8008a36:	60b9      	str	r1, [r7, #8]
 8008a38:	4611      	mov	r1, r2
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	80fb      	strh	r3, [r7, #6]
 8008a40:	4613      	mov	r3, r2
 8008a42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008a44:	88bb      	ldrh	r3, [r7, #4]
 8008a46:	3301      	adds	r3, #1
 8008a48:	085b      	lsrs	r3, r3, #1
 8008a4a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a54:	88fb      	ldrh	r3, [r7, #6]
 8008a56:	005a      	lsls	r2, r3, #1
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a66:	e01e      	b.n	8008aa6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	3301      	adds	r3, #1
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	021b      	lsls	r3, r3, #8
 8008a76:	b21a      	sxth	r2, r3
 8008a78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	b21b      	sxth	r3, r3
 8008a80:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	8a7a      	ldrh	r2, [r7, #18]
 8008a86:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	3302      	adds	r3, #2
 8008a8c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008a8e:	6a3b      	ldr	r3, [r7, #32]
 8008a90:	3302      	adds	r3, #2
 8008a92:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	3301      	adds	r3, #1
 8008a98:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1dd      	bne.n	8008a68 <USB_WritePMA+0x3a>
  }
}
 8008aac:	bf00      	nop
 8008aae:	bf00      	nop
 8008ab0:	372c      	adds	r7, #44	@ 0x2c
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bc80      	pop	{r7}
 8008ab6:	4770      	bx	lr

08008ab8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b08b      	sub	sp, #44	@ 0x2c
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	80fb      	strh	r3, [r7, #6]
 8008aca:	4613      	mov	r3, r2
 8008acc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008ace:	88bb      	ldrh	r3, [r7, #4]
 8008ad0:	085b      	lsrs	r3, r3, #1
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ade:	88fb      	ldrh	r3, [r7, #6]
 8008ae0:	005a      	lsls	r2, r3, #1
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008aea:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8008af0:	e01b      	b.n	8008b2a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	3302      	adds	r3, #2
 8008afe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	0a1b      	lsrs	r3, r3, #8
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	3302      	adds	r3, #2
 8008b22:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b26:	3b01      	subs	r3, #1
 8008b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1e0      	bne.n	8008af2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008b30:	88bb      	ldrh	r3, [r7, #4]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d007      	beq.n	8008b4c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	701a      	strb	r2, [r3, #0]
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	372c      	adds	r7, #44	@ 0x2c
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr

08008b56 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	7c1b      	ldrb	r3, [r3, #16]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d115      	bne.n	8008b9a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b72:	2202      	movs	r2, #2
 8008b74:	2181      	movs	r1, #129	@ 0x81
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 fe85 	bl	800a886 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b86:	2202      	movs	r2, #2
 8008b88:	2101      	movs	r1, #1
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f001 fe7b 	bl	800a886 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008b98:	e012      	b.n	8008bc0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b9a:	2340      	movs	r3, #64	@ 0x40
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	2181      	movs	r1, #129	@ 0x81
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 fe70 	bl	800a886 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bac:	2340      	movs	r3, #64	@ 0x40
 8008bae:	2202      	movs	r2, #2
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 fe67 	bl	800a886 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008bc0:	2308      	movs	r3, #8
 8008bc2:	2203      	movs	r2, #3
 8008bc4:	2182      	movs	r1, #130	@ 0x82
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f001 fe5d 	bl	800a886 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008bd2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008bd6:	f001 ff7d 	bl	800aad4 <USBD_static_malloc>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d102      	bne.n	8008bf2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008bec:	2301      	movs	r3, #1
 8008bee:	73fb      	strb	r3, [r7, #15]
 8008bf0:	e026      	b.n	8008c40 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bf8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	7c1b      	ldrb	r3, [r3, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d109      	bne.n	8008c30 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c26:	2101      	movs	r1, #1
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f001 ff1c 	bl	800aa66 <USBD_LL_PrepareReceive>
 8008c2e:	e007      	b.n	8008c40 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c36:	2340      	movs	r3, #64	@ 0x40
 8008c38:	2101      	movs	r1, #1
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 ff13 	bl	800aa66 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	460b      	mov	r3, r1
 8008c54:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008c5a:	2181      	movs	r1, #129	@ 0x81
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 fe38 	bl	800a8d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008c68:	2101      	movs	r1, #1
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f001 fe31 	bl	800a8d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008c78:	2182      	movs	r1, #130	@ 0x82
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 fe29 	bl	800a8d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00e      	beq.n	8008cae <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f001 ff23 	bl	800aaec <USBD_static_free>
    pdev->pClassData = NULL;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cc8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d039      	beq.n	8008d56 <USBD_CDC_Setup+0x9e>
 8008ce2:	2b20      	cmp	r3, #32
 8008ce4:	d17f      	bne.n	8008de6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	88db      	ldrh	r3, [r3, #6]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d029      	beq.n	8008d42 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	b25b      	sxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	da11      	bge.n	8008d1c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008d04:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	88d2      	ldrh	r2, [r2, #6]
 8008d0a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d0c:	6939      	ldr	r1, [r7, #16]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	88db      	ldrh	r3, [r3, #6]
 8008d12:	461a      	mov	r2, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 fa05 	bl	800a124 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008d1a:	e06b      	b.n	8008df4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	785a      	ldrb	r2, [r3, #1]
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	88db      	ldrh	r3, [r3, #6]
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d32:	6939      	ldr	r1, [r7, #16]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	88db      	ldrh	r3, [r3, #6]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f001 fa20 	bl	800a180 <USBD_CtlPrepareRx>
      break;
 8008d40:	e058      	b.n	8008df4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	7850      	ldrb	r0, [r2, #1]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	4798      	blx	r3
      break;
 8008d54:	e04e      	b.n	8008df4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	785b      	ldrb	r3, [r3, #1]
 8008d5a:	2b0b      	cmp	r3, #11
 8008d5c:	d02e      	beq.n	8008dbc <USBD_CDC_Setup+0x104>
 8008d5e:	2b0b      	cmp	r3, #11
 8008d60:	dc38      	bgt.n	8008dd4 <USBD_CDC_Setup+0x11c>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <USBD_CDC_Setup+0xb4>
 8008d66:	2b0a      	cmp	r3, #10
 8008d68:	d014      	beq.n	8008d94 <USBD_CDC_Setup+0xdc>
 8008d6a:	e033      	b.n	8008dd4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d107      	bne.n	8008d86 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008d76:	f107 030c 	add.w	r3, r7, #12
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f001 f9d0 	bl	800a124 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d84:	e02e      	b.n	8008de4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 f961 	bl	800a050 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d8e:	2302      	movs	r3, #2
 8008d90:	75fb      	strb	r3, [r7, #23]
          break;
 8008d92:	e027      	b.n	8008de4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d107      	bne.n	8008dae <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d9e:	f107 030f 	add.w	r3, r7, #15
 8008da2:	2201      	movs	r2, #1
 8008da4:	4619      	mov	r1, r3
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f001 f9bc 	bl	800a124 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dac:	e01a      	b.n	8008de4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f001 f94d 	bl	800a050 <USBD_CtlError>
            ret = USBD_FAIL;
 8008db6:	2302      	movs	r3, #2
 8008db8:	75fb      	strb	r3, [r7, #23]
          break;
 8008dba:	e013      	b.n	8008de4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d00d      	beq.n	8008de2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 f941 	bl	800a050 <USBD_CtlError>
            ret = USBD_FAIL;
 8008dce:	2302      	movs	r3, #2
 8008dd0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008dd2:	e006      	b.n	8008de2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f001 f93a 	bl	800a050 <USBD_CtlError>
          ret = USBD_FAIL;
 8008ddc:	2302      	movs	r3, #2
 8008dde:	75fb      	strb	r3, [r7, #23]
          break;
 8008de0:	e000      	b.n	8008de4 <USBD_CDC_Setup+0x12c>
          break;
 8008de2:	bf00      	nop
      }
      break;
 8008de4:	e006      	b.n	8008df4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 f931 	bl	800a050 <USBD_CtlError>
      ret = USBD_FAIL;
 8008dee:	2302      	movs	r3, #2
 8008df0:	75fb      	strb	r3, [r7, #23]
      break;
 8008df2:	bf00      	nop
  }

  return ret;
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3718      	adds	r7, #24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	460b      	mov	r3, r1
 8008e08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e10:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008e18:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d03a      	beq.n	8008e9a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008e24:	78fa      	ldrb	r2, [r7, #3]
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	331c      	adds	r3, #28
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d029      	beq.n	8008e8e <USBD_CDC_DataIn+0x90>
 8008e3a:	78fa      	ldrb	r2, [r7, #3]
 8008e3c:	6879      	ldr	r1, [r7, #4]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4413      	add	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	440b      	add	r3, r1
 8008e48:	331c      	adds	r3, #28
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	78f9      	ldrb	r1, [r7, #3]
 8008e4e:	68b8      	ldr	r0, [r7, #8]
 8008e50:	460b      	mov	r3, r1
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	440b      	add	r3, r1
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	4403      	add	r3, r0
 8008e5a:	3320      	adds	r3, #32
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e62:	fb01 f303 	mul.w	r3, r1, r3
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d110      	bne.n	8008e8e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008e6c:	78fa      	ldrb	r2, [r7, #3]
 8008e6e:	6879      	ldr	r1, [r7, #4]
 8008e70:	4613      	mov	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	440b      	add	r3, r1
 8008e7a:	331c      	adds	r3, #28
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e80:	78f9      	ldrb	r1, [r7, #3]
 8008e82:	2300      	movs	r3, #0
 8008e84:	2200      	movs	r2, #0
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f001 fdca 	bl	800aa20 <USBD_LL_Transmit>
 8008e8c:	e003      	b.n	8008e96 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	e000      	b.n	8008e9c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008e9a:	2302      	movs	r3, #2
  }
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008eb8:	78fb      	ldrb	r3, [r7, #3]
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f001 fdf5 	bl	800aaac <USBD_LL_GetRxDataSize>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00d      	beq.n	8008ef0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008ee8:	4611      	mov	r1, r2
 8008eea:	4798      	blx	r3

    return USBD_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	e000      	b.n	8008ef2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008ef0:	2302      	movs	r3, #2
  }
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b084      	sub	sp, #16
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f08:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d014      	beq.n	8008f3e <USBD_CDC_EP0_RxReady+0x44>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008f1a:	2bff      	cmp	r3, #255	@ 0xff
 8008f1c:	d00f      	beq.n	8008f3e <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008f2c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f34:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	22ff      	movs	r2, #255	@ 0xff
 8008f3a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2243      	movs	r2, #67	@ 0x43
 8008f54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008f56:	4b03      	ldr	r3, [pc, #12]	@ (8008f64 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bc80      	pop	{r7}
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	20000094 	.word	0x20000094

08008f68 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2243      	movs	r2, #67	@ 0x43
 8008f74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008f76:	4b03      	ldr	r3, [pc, #12]	@ (8008f84 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bc80      	pop	{r7}
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	20000050 	.word	0x20000050

08008f88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2243      	movs	r2, #67	@ 0x43
 8008f94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008f96:	4b03      	ldr	r3, [pc, #12]	@ (8008fa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bc80      	pop	{r7}
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	200000d8 	.word	0x200000d8

08008fa8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	220a      	movs	r2, #10
 8008fb4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008fb6:	4b03      	ldr	r3, [pc, #12]	@ (8008fc4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bc80      	pop	{r7}
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	2000000c 	.word	0x2000000c

08008fc8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d005      	beq.n	8008fe8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bc80      	pop	{r7}
 8008ff2:	4770      	bx	lr

08008ff4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b087      	sub	sp, #28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	4613      	mov	r3, r2
 8009000:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009008:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009012:	88fa      	ldrh	r2, [r7, #6]
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	371c      	adds	r7, #28
 8009020:	46bd      	mov	sp, r7
 8009022:	bc80      	pop	{r7}
 8009024:	4770      	bx	lr

08009026 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009026:	b480      	push	{r7}
 8009028:	b085      	sub	sp, #20
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009036:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	bc80      	pop	{r7}
 800904a:	4770      	bx	lr

0800904c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800905a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009062:	2b00      	cmp	r3, #0
 8009064:	d01c      	beq.n	80090a0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800906c:	2b00      	cmp	r3, #0
 800906e:	d115      	bne.n	800909c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2201      	movs	r2, #1
 8009074:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800908e:	b29b      	uxth	r3, r3
 8009090:	2181      	movs	r1, #129	@ 0x81
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f001 fcc4 	bl	800aa20 <USBD_LL_Transmit>

      return USBD_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	e002      	b.n	80090a2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800909c:	2301      	movs	r3, #1
 800909e:	e000      	b.n	80090a2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80090a0:	2302      	movs	r3, #2
  }
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090b8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d017      	beq.n	80090f4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	7c1b      	ldrb	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d109      	bne.n	80090e0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80090d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090d6:	2101      	movs	r1, #1
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 fcc4 	bl	800aa66 <USBD_LL_PrepareReceive>
 80090de:	e007      	b.n	80090f0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80090e6:	2340      	movs	r3, #64	@ 0x40
 80090e8:	2101      	movs	r1, #1
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 fcbb 	bl	800aa66 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	e000      	b.n	80090f6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80090f4:	2302      	movs	r3, #2
  }
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	60f8      	str	r0, [r7, #12]
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	4613      	mov	r3, r2
 800910a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009112:	2302      	movs	r3, #2
 8009114:	e01a      	b.n	800914c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	79fa      	ldrb	r2, [r7, #7]
 8009142:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f001 fb29 	bl	800a79c <USBD_LL_Init>

  return USBD_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d006      	beq.n	8009176 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]
 8009174:	e001      	b.n	800917a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009176:	2302      	movs	r3, #2
 8009178:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800917a:	7bfb      	ldrb	r3, [r7, #15]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	bc80      	pop	{r7}
 8009184:	4770      	bx	lr

08009186 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f001 fb5e 	bl	800a850 <USBD_LL_Start>

  return USBD_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800919e:	b480      	push	{r7}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bc80      	pop	{r7}
 80091b0:	4770      	bx	lr

080091b2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80091be:	2302      	movs	r3, #2
 80091c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00c      	beq.n	80091e6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	78fa      	ldrb	r2, [r7, #3]
 80091d6:	4611      	mov	r1, r2
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	4798      	blx	r3
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	78fa      	ldrb	r2, [r7, #3]
 8009206:	4611      	mov	r1, r2
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	4798      	blx	r3

  return USBD_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b082      	sub	sp, #8
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fed8 	bl	8009fde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800923c:	461a      	mov	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800924a:	f003 031f 	and.w	r3, r3, #31
 800924e:	2b02      	cmp	r3, #2
 8009250:	d016      	beq.n	8009280 <USBD_LL_SetupStage+0x6a>
 8009252:	2b02      	cmp	r3, #2
 8009254:	d81c      	bhi.n	8009290 <USBD_LL_SetupStage+0x7a>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <USBD_LL_SetupStage+0x4a>
 800925a:	2b01      	cmp	r3, #1
 800925c:	d008      	beq.n	8009270 <USBD_LL_SetupStage+0x5a>
 800925e:	e017      	b.n	8009290 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f9cb 	bl	8009604 <USBD_StdDevReq>
      break;
 800926e:	e01a      	b.n	80092a6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009276:	4619      	mov	r1, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fa2d 	bl	80096d8 <USBD_StdItfReq>
      break;
 800927e:	e012      	b.n	80092a6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009286:	4619      	mov	r1, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 fa6d 	bl	8009768 <USBD_StdEPReq>
      break;
 800928e:	e00a      	b.n	80092a6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009296:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800929a:	b2db      	uxtb	r3, r3
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f001 fb36 	bl	800a910 <USBD_LL_StallEP>
      break;
 80092a4:	bf00      	nop
  }

  return USBD_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	460b      	mov	r3, r1
 80092ba:	607a      	str	r2, [r7, #4]
 80092bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80092be:	7afb      	ldrb	r3, [r7, #11]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d14b      	bne.n	800935c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80092ca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d134      	bne.n	8009340 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d919      	bls.n	8009316 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	68da      	ldr	r2, [r3, #12]
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	1ad2      	subs	r2, r2, r3
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	68da      	ldr	r2, [r3, #12]
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d203      	bcs.n	8009304 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009300:	b29b      	uxth	r3, r3
 8009302:	e002      	b.n	800930a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009308:	b29b      	uxth	r3, r3
 800930a:	461a      	mov	r2, r3
 800930c:	6879      	ldr	r1, [r7, #4]
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 ff54 	bl	800a1bc <USBD_CtlContinueRx>
 8009314:	e038      	b.n	8009388 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00a      	beq.n	8009338 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009328:	2b03      	cmp	r3, #3
 800932a:	d105      	bne.n	8009338 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f000 ff51 	bl	800a1e0 <USBD_CtlSendStatus>
 800933e:	e023      	b.n	8009388 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009346:	2b05      	cmp	r3, #5
 8009348:	d11e      	bne.n	8009388 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009352:	2100      	movs	r1, #0
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f001 fadb 	bl	800a910 <USBD_LL_StallEP>
 800935a:	e015      	b.n	8009388 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00d      	beq.n	8009384 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800936e:	2b03      	cmp	r3, #3
 8009370:	d108      	bne.n	8009384 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	7afa      	ldrb	r2, [r7, #11]
 800937c:	4611      	mov	r1, r2
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	4798      	blx	r3
 8009382:	e001      	b.n	8009388 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009384:	2302      	movs	r3, #2
 8009386:	e000      	b.n	800938a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3718      	adds	r7, #24
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b086      	sub	sp, #24
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	460b      	mov	r3, r1
 800939c:	607a      	str	r2, [r7, #4]
 800939e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093a0:	7afb      	ldrb	r3, [r7, #11]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d17f      	bne.n	80094a6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	3314      	adds	r3, #20
 80093aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d15c      	bne.n	8009470 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d915      	bls.n	80093ee <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	68da      	ldr	r2, [r3, #12]
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	1ad2      	subs	r2, r2, r3
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	461a      	mov	r2, r3
 80093d8:	6879      	ldr	r1, [r7, #4]
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f000 febe 	bl	800a15c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093e0:	2300      	movs	r3, #0
 80093e2:	2200      	movs	r2, #0
 80093e4:	2100      	movs	r1, #0
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f001 fb3d 	bl	800aa66 <USBD_LL_PrepareReceive>
 80093ec:	e04e      	b.n	800948c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	6912      	ldr	r2, [r2, #16]
 80093f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80093fa:	fb01 f202 	mul.w	r2, r1, r2
 80093fe:	1a9b      	subs	r3, r3, r2
 8009400:	2b00      	cmp	r3, #0
 8009402:	d11c      	bne.n	800943e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	689a      	ldr	r2, [r3, #8]
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800940c:	429a      	cmp	r2, r3
 800940e:	d316      	bcc.n	800943e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	689a      	ldr	r2, [r3, #8]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800941a:	429a      	cmp	r2, r3
 800941c:	d20f      	bcs.n	800943e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800941e:	2200      	movs	r2, #0
 8009420:	2100      	movs	r1, #0
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 fe9a 	bl	800a15c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009430:	2300      	movs	r3, #0
 8009432:	2200      	movs	r2, #0
 8009434:	2100      	movs	r1, #0
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f001 fb15 	bl	800aa66 <USBD_LL_PrepareReceive>
 800943c:	e026      	b.n	800948c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00a      	beq.n	8009460 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009450:	2b03      	cmp	r3, #3
 8009452:	d105      	bne.n	8009460 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009460:	2180      	movs	r1, #128	@ 0x80
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f001 fa54 	bl	800a910 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 fecc 	bl	800a206 <USBD_CtlReceiveStatus>
 800946e:	e00d      	b.n	800948c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009476:	2b04      	cmp	r3, #4
 8009478:	d004      	beq.n	8009484 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009480:	2b00      	cmp	r3, #0
 8009482:	d103      	bne.n	800948c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009484:	2180      	movs	r1, #128	@ 0x80
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f001 fa42 	bl	800a910 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009492:	2b01      	cmp	r3, #1
 8009494:	d11d      	bne.n	80094d2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f7ff fe81 	bl	800919e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80094a4:	e015      	b.n	80094d2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00d      	beq.n	80094ce <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d108      	bne.n	80094ce <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094c2:	695b      	ldr	r3, [r3, #20]
 80094c4:	7afa      	ldrb	r2, [r7, #11]
 80094c6:	4611      	mov	r1, r2
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	4798      	blx	r3
 80094cc:	e001      	b.n	80094d2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80094ce:	2302      	movs	r3, #2
 80094d0:	e000      	b.n	80094d4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094e4:	2340      	movs	r3, #64	@ 0x40
 80094e6:	2200      	movs	r2, #0
 80094e8:	2100      	movs	r1, #0
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f001 f9cb 	bl	800a886 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2240      	movs	r2, #64	@ 0x40
 80094fc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009500:	2340      	movs	r3, #64	@ 0x40
 8009502:	2200      	movs	r2, #0
 8009504:	2180      	movs	r1, #128	@ 0x80
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f001 f9bd 	bl	800a886 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2240      	movs	r2, #64	@ 0x40
 8009516:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800953c:	2b00      	cmp	r3, #0
 800953e:	d009      	beq.n	8009554 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	6852      	ldr	r2, [r2, #4]
 800954c:	b2d2      	uxtb	r2, r2
 800954e:	4611      	mov	r1, r2
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	4798      	blx	r3
  }

  return USBD_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800955e:	b480      	push	{r7}
 8009560:	b083      	sub	sp, #12
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	460b      	mov	r3, r1
 8009568:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	78fa      	ldrb	r2, [r7, #3]
 800956e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	bc80      	pop	{r7}
 800957a:	4770      	bx	lr

0800957c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2204      	movs	r2, #4
 8009594:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	bc80      	pop	{r7}
 80095a2:	4770      	bx	lr

080095a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d105      	bne.n	80095c2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bc80      	pop	{r7}
 80095cc:	4770      	bx	lr

080095ce <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b082      	sub	sp, #8
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d10b      	bne.n	80095f8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095e6:	69db      	ldr	r3, [r3, #28]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d005      	beq.n	80095f8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800961a:	2b40      	cmp	r3, #64	@ 0x40
 800961c:	d005      	beq.n	800962a <USBD_StdDevReq+0x26>
 800961e:	2b40      	cmp	r3, #64	@ 0x40
 8009620:	d84f      	bhi.n	80096c2 <USBD_StdDevReq+0xbe>
 8009622:	2b00      	cmp	r3, #0
 8009624:	d009      	beq.n	800963a <USBD_StdDevReq+0x36>
 8009626:	2b20      	cmp	r3, #32
 8009628:	d14b      	bne.n	80096c2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	4798      	blx	r3
      break;
 8009638:	e048      	b.n	80096cc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	785b      	ldrb	r3, [r3, #1]
 800963e:	2b09      	cmp	r3, #9
 8009640:	d839      	bhi.n	80096b6 <USBD_StdDevReq+0xb2>
 8009642:	a201      	add	r2, pc, #4	@ (adr r2, 8009648 <USBD_StdDevReq+0x44>)
 8009644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009648:	08009699 	.word	0x08009699
 800964c:	080096ad 	.word	0x080096ad
 8009650:	080096b7 	.word	0x080096b7
 8009654:	080096a3 	.word	0x080096a3
 8009658:	080096b7 	.word	0x080096b7
 800965c:	0800967b 	.word	0x0800967b
 8009660:	08009671 	.word	0x08009671
 8009664:	080096b7 	.word	0x080096b7
 8009668:	0800968f 	.word	0x0800968f
 800966c:	08009685 	.word	0x08009685
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f9dc 	bl	8009a30 <USBD_GetDescriptor>
          break;
 8009678:	e022      	b.n	80096c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fb3f 	bl	8009d00 <USBD_SetAddress>
          break;
 8009682:	e01d      	b.n	80096c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fb7e 	bl	8009d88 <USBD_SetConfig>
          break;
 800968c:	e018      	b.n	80096c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fc07 	bl	8009ea4 <USBD_GetConfig>
          break;
 8009696:	e013      	b.n	80096c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fc37 	bl	8009f0e <USBD_GetStatus>
          break;
 80096a0:	e00e      	b.n	80096c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fc65 	bl	8009f74 <USBD_SetFeature>
          break;
 80096aa:	e009      	b.n	80096c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fc74 	bl	8009f9c <USBD_ClrFeature>
          break;
 80096b4:	e004      	b.n	80096c0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fcc9 	bl	800a050 <USBD_CtlError>
          break;
 80096be:	bf00      	nop
      }
      break;
 80096c0:	e004      	b.n	80096cc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80096c2:	6839      	ldr	r1, [r7, #0]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fcc3 	bl	800a050 <USBD_CtlError>
      break;
 80096ca:	bf00      	nop
  }

  return ret;
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop

080096d8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80096ee:	2b40      	cmp	r3, #64	@ 0x40
 80096f0:	d005      	beq.n	80096fe <USBD_StdItfReq+0x26>
 80096f2:	2b40      	cmp	r3, #64	@ 0x40
 80096f4:	d82e      	bhi.n	8009754 <USBD_StdItfReq+0x7c>
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <USBD_StdItfReq+0x26>
 80096fa:	2b20      	cmp	r3, #32
 80096fc:	d12a      	bne.n	8009754 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009704:	3b01      	subs	r3, #1
 8009706:	2b02      	cmp	r3, #2
 8009708:	d81d      	bhi.n	8009746 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	889b      	ldrh	r3, [r3, #4]
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b01      	cmp	r3, #1
 8009712:	d813      	bhi.n	800973c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	4798      	blx	r3
 8009722:	4603      	mov	r3, r0
 8009724:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	88db      	ldrh	r3, [r3, #6]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d110      	bne.n	8009750 <USBD_StdItfReq+0x78>
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10d      	bne.n	8009750 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fd53 	bl	800a1e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800973a:	e009      	b.n	8009750 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fc86 	bl	800a050 <USBD_CtlError>
          break;
 8009744:	e004      	b.n	8009750 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fc81 	bl	800a050 <USBD_CtlError>
          break;
 800974e:	e000      	b.n	8009752 <USBD_StdItfReq+0x7a>
          break;
 8009750:	bf00      	nop
      }
      break;
 8009752:	e004      	b.n	800975e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 fc7a 	bl	800a050 <USBD_CtlError>
      break;
 800975c:	bf00      	nop
  }

  return USBD_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	889b      	ldrh	r3, [r3, #4]
 800977a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009784:	2b40      	cmp	r3, #64	@ 0x40
 8009786:	d007      	beq.n	8009798 <USBD_StdEPReq+0x30>
 8009788:	2b40      	cmp	r3, #64	@ 0x40
 800978a:	f200 8146 	bhi.w	8009a1a <USBD_StdEPReq+0x2b2>
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00a      	beq.n	80097a8 <USBD_StdEPReq+0x40>
 8009792:	2b20      	cmp	r3, #32
 8009794:	f040 8141 	bne.w	8009a1a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	4798      	blx	r3
      break;
 80097a6:	e13d      	b.n	8009a24 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097b0:	2b20      	cmp	r3, #32
 80097b2:	d10a      	bne.n	80097ca <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	4798      	blx	r3
 80097c2:	4603      	mov	r3, r0
 80097c4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	e12d      	b.n	8009a26 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	785b      	ldrb	r3, [r3, #1]
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d007      	beq.n	80097e2 <USBD_StdEPReq+0x7a>
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	f300 811b 	bgt.w	8009a0e <USBD_StdEPReq+0x2a6>
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d072      	beq.n	80098c2 <USBD_StdEPReq+0x15a>
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d03a      	beq.n	8009856 <USBD_StdEPReq+0xee>
 80097e0:	e115      	b.n	8009a0e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d002      	beq.n	80097f2 <USBD_StdEPReq+0x8a>
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d015      	beq.n	800981c <USBD_StdEPReq+0xb4>
 80097f0:	e02b      	b.n	800984a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00c      	beq.n	8009812 <USBD_StdEPReq+0xaa>
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	2b80      	cmp	r3, #128	@ 0x80
 80097fc:	d009      	beq.n	8009812 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f001 f884 	bl	800a910 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009808:	2180      	movs	r1, #128	@ 0x80
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f001 f880 	bl	800a910 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009810:	e020      	b.n	8009854 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fc1b 	bl	800a050 <USBD_CtlError>
              break;
 800981a:	e01b      	b.n	8009854 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	885b      	ldrh	r3, [r3, #2]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10e      	bne.n	8009842 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009824:	7bbb      	ldrb	r3, [r7, #14]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00b      	beq.n	8009842 <USBD_StdEPReq+0xda>
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	2b80      	cmp	r3, #128	@ 0x80
 800982e:	d008      	beq.n	8009842 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	88db      	ldrh	r3, [r3, #6]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d104      	bne.n	8009842 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009838:	7bbb      	ldrb	r3, [r7, #14]
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f001 f867 	bl	800a910 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fccc 	bl	800a1e0 <USBD_CtlSendStatus>

              break;
 8009848:	e004      	b.n	8009854 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fbff 	bl	800a050 <USBD_CtlError>
              break;
 8009852:	bf00      	nop
          }
          break;
 8009854:	e0e0      	b.n	8009a18 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800985c:	2b02      	cmp	r3, #2
 800985e:	d002      	beq.n	8009866 <USBD_StdEPReq+0xfe>
 8009860:	2b03      	cmp	r3, #3
 8009862:	d015      	beq.n	8009890 <USBD_StdEPReq+0x128>
 8009864:	e026      	b.n	80098b4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00c      	beq.n	8009886 <USBD_StdEPReq+0x11e>
 800986c:	7bbb      	ldrb	r3, [r7, #14]
 800986e:	2b80      	cmp	r3, #128	@ 0x80
 8009870:	d009      	beq.n	8009886 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009872:	7bbb      	ldrb	r3, [r7, #14]
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f001 f84a 	bl	800a910 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800987c:	2180      	movs	r1, #128	@ 0x80
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f001 f846 	bl	800a910 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009884:	e01c      	b.n	80098c0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fbe1 	bl	800a050 <USBD_CtlError>
              break;
 800988e:	e017      	b.n	80098c0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	885b      	ldrh	r3, [r3, #2]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d112      	bne.n	80098be <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d004      	beq.n	80098ac <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80098a2:	7bbb      	ldrb	r3, [r7, #14]
 80098a4:	4619      	mov	r1, r3
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f001 f851 	bl	800a94e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fc97 	bl	800a1e0 <USBD_CtlSendStatus>
              }
              break;
 80098b2:	e004      	b.n	80098be <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fbca 	bl	800a050 <USBD_CtlError>
              break;
 80098bc:	e000      	b.n	80098c0 <USBD_StdEPReq+0x158>
              break;
 80098be:	bf00      	nop
          }
          break;
 80098c0:	e0aa      	b.n	8009a18 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d002      	beq.n	80098d2 <USBD_StdEPReq+0x16a>
 80098cc:	2b03      	cmp	r3, #3
 80098ce:	d032      	beq.n	8009936 <USBD_StdEPReq+0x1ce>
 80098d0:	e097      	b.n	8009a02 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098d2:	7bbb      	ldrb	r3, [r7, #14]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d007      	beq.n	80098e8 <USBD_StdEPReq+0x180>
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
 80098da:	2b80      	cmp	r3, #128	@ 0x80
 80098dc:	d004      	beq.n	80098e8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80098de:	6839      	ldr	r1, [r7, #0]
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fbb5 	bl	800a050 <USBD_CtlError>
                break;
 80098e6:	e091      	b.n	8009a0c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	da0b      	bge.n	8009908 <USBD_StdEPReq+0x1a0>
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
 80098f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098f6:	4613      	mov	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4413      	add	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	3310      	adds	r3, #16
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	4413      	add	r3, r2
 8009904:	3304      	adds	r3, #4
 8009906:	e00b      	b.n	8009920 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009908:	7bbb      	ldrb	r3, [r7, #14]
 800990a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800990e:	4613      	mov	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	4413      	add	r3, r2
 800991e:	3304      	adds	r3, #4
 8009920:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2202      	movs	r2, #2
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fbf8 	bl	800a124 <USBD_CtlSendData>
              break;
 8009934:	e06a      	b.n	8009a0c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009936:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800993a:	2b00      	cmp	r3, #0
 800993c:	da11      	bge.n	8009962 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800993e:	7bbb      	ldrb	r3, [r7, #14]
 8009940:	f003 020f 	and.w	r2, r3, #15
 8009944:	6879      	ldr	r1, [r7, #4]
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	440b      	add	r3, r1
 8009950:	3318      	adds	r3, #24
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d117      	bne.n	8009988 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fb78 	bl	800a050 <USBD_CtlError>
                  break;
 8009960:	e054      	b.n	8009a0c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009962:	7bbb      	ldrb	r3, [r7, #14]
 8009964:	f003 020f 	and.w	r2, r3, #15
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	4613      	mov	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	440b      	add	r3, r1
 8009974:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d104      	bne.n	8009988 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fb65 	bl	800a050 <USBD_CtlError>
                  break;
 8009986:	e041      	b.n	8009a0c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800998c:	2b00      	cmp	r3, #0
 800998e:	da0b      	bge.n	80099a8 <USBD_StdEPReq+0x240>
 8009990:	7bbb      	ldrb	r3, [r7, #14]
 8009992:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009996:	4613      	mov	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	3310      	adds	r3, #16
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	4413      	add	r3, r2
 80099a4:	3304      	adds	r3, #4
 80099a6:	e00b      	b.n	80099c0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099a8:	7bbb      	ldrb	r3, [r7, #14]
 80099aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099ae:	4613      	mov	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	4413      	add	r3, r2
 80099be:	3304      	adds	r3, #4
 80099c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80099c2:	7bbb      	ldrb	r3, [r7, #14]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <USBD_StdEPReq+0x266>
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	2b80      	cmp	r3, #128	@ 0x80
 80099cc:	d103      	bne.n	80099d6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	2200      	movs	r2, #0
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	e00e      	b.n	80099f4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80099d6:	7bbb      	ldrb	r3, [r7, #14]
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 ffd6 	bl	800a98c <USBD_LL_IsStallEP>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d003      	beq.n	80099ee <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	2201      	movs	r2, #1
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	e002      	b.n	80099f4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	2200      	movs	r2, #0
 80099f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2202      	movs	r2, #2
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fb92 	bl	800a124 <USBD_CtlSendData>
              break;
 8009a00:	e004      	b.n	8009a0c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fb23 	bl	800a050 <USBD_CtlError>
              break;
 8009a0a:	bf00      	nop
          }
          break;
 8009a0c:	e004      	b.n	8009a18 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009a0e:	6839      	ldr	r1, [r7, #0]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fb1d 	bl	800a050 <USBD_CtlError>
          break;
 8009a16:	bf00      	nop
      }
      break;
 8009a18:	e004      	b.n	8009a24 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fb17 	bl	800a050 <USBD_CtlError>
      break;
 8009a22:	bf00      	nop
  }

  return ret;
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a42:	2300      	movs	r3, #0
 8009a44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	885b      	ldrh	r3, [r3, #2]
 8009a4a:	0a1b      	lsrs	r3, r3, #8
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	2b06      	cmp	r3, #6
 8009a52:	f200 8128 	bhi.w	8009ca6 <USBD_GetDescriptor+0x276>
 8009a56:	a201      	add	r2, pc, #4	@ (adr r2, 8009a5c <USBD_GetDescriptor+0x2c>)
 8009a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5c:	08009a79 	.word	0x08009a79
 8009a60:	08009a91 	.word	0x08009a91
 8009a64:	08009ad1 	.word	0x08009ad1
 8009a68:	08009ca7 	.word	0x08009ca7
 8009a6c:	08009ca7 	.word	0x08009ca7
 8009a70:	08009c47 	.word	0x08009c47
 8009a74:	08009c73 	.word	0x08009c73
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	7c12      	ldrb	r2, [r2, #16]
 8009a84:	f107 0108 	add.w	r1, r7, #8
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4798      	blx	r3
 8009a8c:	60f8      	str	r0, [r7, #12]
      break;
 8009a8e:	e112      	b.n	8009cb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	7c1b      	ldrb	r3, [r3, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10d      	bne.n	8009ab4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa0:	f107 0208 	add.w	r2, r7, #8
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	4798      	blx	r3
 8009aa8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3301      	adds	r3, #1
 8009aae:	2202      	movs	r2, #2
 8009ab0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ab2:	e100      	b.n	8009cb6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009abc:	f107 0208 	add.w	r2, r7, #8
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	2202      	movs	r2, #2
 8009acc:	701a      	strb	r2, [r3, #0]
      break;
 8009ace:	e0f2      	b.n	8009cb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	885b      	ldrh	r3, [r3, #2]
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b05      	cmp	r3, #5
 8009ad8:	f200 80ac 	bhi.w	8009c34 <USBD_GetDescriptor+0x204>
 8009adc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae4 <USBD_GetDescriptor+0xb4>)
 8009ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae2:	bf00      	nop
 8009ae4:	08009afd 	.word	0x08009afd
 8009ae8:	08009b31 	.word	0x08009b31
 8009aec:	08009b65 	.word	0x08009b65
 8009af0:	08009b99 	.word	0x08009b99
 8009af4:	08009bcd 	.word	0x08009bcd
 8009af8:	08009c01 	.word	0x08009c01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00b      	beq.n	8009b20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	7c12      	ldrb	r2, [r2, #16]
 8009b14:	f107 0108 	add.w	r1, r7, #8
 8009b18:	4610      	mov	r0, r2
 8009b1a:	4798      	blx	r3
 8009b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b1e:	e091      	b.n	8009c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fa94 	bl	800a050 <USBD_CtlError>
            err++;
 8009b28:	7afb      	ldrb	r3, [r7, #11]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b2e:	e089      	b.n	8009c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00b      	beq.n	8009b54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	7c12      	ldrb	r2, [r2, #16]
 8009b48:	f107 0108 	add.w	r1, r7, #8
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	4798      	blx	r3
 8009b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b52:	e077      	b.n	8009c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fa7a 	bl	800a050 <USBD_CtlError>
            err++;
 8009b5c:	7afb      	ldrb	r3, [r7, #11]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	72fb      	strb	r3, [r7, #11]
          break;
 8009b62:	e06f      	b.n	8009c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	7c12      	ldrb	r2, [r2, #16]
 8009b7c:	f107 0108 	add.w	r1, r7, #8
 8009b80:	4610      	mov	r0, r2
 8009b82:	4798      	blx	r3
 8009b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b86:	e05d      	b.n	8009c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fa60 	bl	800a050 <USBD_CtlError>
            err++;
 8009b90:	7afb      	ldrb	r3, [r7, #11]
 8009b92:	3301      	adds	r3, #1
 8009b94:	72fb      	strb	r3, [r7, #11]
          break;
 8009b96:	e055      	b.n	8009c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00b      	beq.n	8009bbc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	7c12      	ldrb	r2, [r2, #16]
 8009bb0:	f107 0108 	add.w	r1, r7, #8
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	4798      	blx	r3
 8009bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bba:	e043      	b.n	8009c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fa46 	bl	800a050 <USBD_CtlError>
            err++;
 8009bc4:	7afb      	ldrb	r3, [r7, #11]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bca:	e03b      	b.n	8009c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00b      	beq.n	8009bf0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	7c12      	ldrb	r2, [r2, #16]
 8009be4:	f107 0108 	add.w	r1, r7, #8
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
 8009bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bee:	e029      	b.n	8009c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fa2c 	bl	800a050 <USBD_CtlError>
            err++;
 8009bf8:	7afb      	ldrb	r3, [r7, #11]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bfe:	e021      	b.n	8009c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00b      	beq.n	8009c24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	7c12      	ldrb	r2, [r2, #16]
 8009c18:	f107 0108 	add.w	r1, r7, #8
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	4798      	blx	r3
 8009c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c22:	e00f      	b.n	8009c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa12 	bl	800a050 <USBD_CtlError>
            err++;
 8009c2c:	7afb      	ldrb	r3, [r7, #11]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	72fb      	strb	r3, [r7, #11]
          break;
 8009c32:	e007      	b.n	8009c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fa0a 	bl	800a050 <USBD_CtlError>
          err++;
 8009c3c:	7afb      	ldrb	r3, [r7, #11]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009c42:	e038      	b.n	8009cb6 <USBD_GetDescriptor+0x286>
 8009c44:	e037      	b.n	8009cb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	7c1b      	ldrb	r3, [r3, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d109      	bne.n	8009c62 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c56:	f107 0208 	add.w	r2, r7, #8
 8009c5a:	4610      	mov	r0, r2
 8009c5c:	4798      	blx	r3
 8009c5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c60:	e029      	b.n	8009cb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f9f3 	bl	800a050 <USBD_CtlError>
        err++;
 8009c6a:	7afb      	ldrb	r3, [r7, #11]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c70:	e021      	b.n	8009cb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	7c1b      	ldrb	r3, [r3, #16]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10d      	bne.n	8009c96 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c82:	f107 0208 	add.w	r2, r7, #8
 8009c86:	4610      	mov	r0, r2
 8009c88:	4798      	blx	r3
 8009c8a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	2207      	movs	r2, #7
 8009c92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c94:	e00f      	b.n	8009cb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f9d9 	bl	800a050 <USBD_CtlError>
        err++;
 8009c9e:	7afb      	ldrb	r3, [r7, #11]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ca4:	e007      	b.n	8009cb6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f9d1 	bl	800a050 <USBD_CtlError>
      err++;
 8009cae:	7afb      	ldrb	r3, [r7, #11]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	72fb      	strb	r3, [r7, #11]
      break;
 8009cb4:	bf00      	nop
  }

  if (err != 0U)
 8009cb6:	7afb      	ldrb	r3, [r7, #11]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d11c      	bne.n	8009cf6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009cbc:	893b      	ldrh	r3, [r7, #8]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d011      	beq.n	8009ce6 <USBD_GetDescriptor+0x2b6>
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	88db      	ldrh	r3, [r3, #6]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00d      	beq.n	8009ce6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	88da      	ldrh	r2, [r3, #6]
 8009cce:	893b      	ldrh	r3, [r7, #8]
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	bf28      	it	cs
 8009cd4:	4613      	movcs	r3, r2
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009cda:	893b      	ldrh	r3, [r7, #8]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	68f9      	ldr	r1, [r7, #12]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fa1f 	bl	800a124 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	88db      	ldrh	r3, [r3, #6]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d104      	bne.n	8009cf8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fa76 	bl	800a1e0 <USBD_CtlSendStatus>
 8009cf4:	e000      	b.n	8009cf8 <USBD_GetDescriptor+0x2c8>
    return;
 8009cf6:	bf00      	nop
    }
  }
}
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop

08009d00 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	889b      	ldrh	r3, [r3, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d130      	bne.n	8009d74 <USBD_SetAddress+0x74>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	88db      	ldrh	r3, [r3, #6]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d12c      	bne.n	8009d74 <USBD_SetAddress+0x74>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	885b      	ldrh	r3, [r3, #2]
 8009d1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d20:	d828      	bhi.n	8009d74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	885b      	ldrh	r3, [r3, #2]
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	d104      	bne.n	8009d42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f988 	bl	800a050 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d40:	e01d      	b.n	8009d7e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	7bfa      	ldrb	r2, [r7, #15]
 8009d46:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fe47 	bl	800a9e2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fa43 	bl	800a1e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d004      	beq.n	8009d6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2202      	movs	r2, #2
 8009d64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d68:	e009      	b.n	8009d7e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d72:	e004      	b.n	8009d7e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d74:	6839      	ldr	r1, [r7, #0]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f96a 	bl	800a050 <USBD_CtlError>
  }
}
 8009d7c:	bf00      	nop
 8009d7e:	bf00      	nop
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	885b      	ldrh	r3, [r3, #2]
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	4b41      	ldr	r3, [pc, #260]	@ (8009ea0 <USBD_SetConfig+0x118>)
 8009d9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d9c:	4b40      	ldr	r3, [pc, #256]	@ (8009ea0 <USBD_SetConfig+0x118>)
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d904      	bls.n	8009dae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f952 	bl	800a050 <USBD_CtlError>
 8009dac:	e075      	b.n	8009e9a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d002      	beq.n	8009dbe <USBD_SetConfig+0x36>
 8009db8:	2b03      	cmp	r3, #3
 8009dba:	d023      	beq.n	8009e04 <USBD_SetConfig+0x7c>
 8009dbc:	e062      	b.n	8009e84 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009dbe:	4b38      	ldr	r3, [pc, #224]	@ (8009ea0 <USBD_SetConfig+0x118>)
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d01a      	beq.n	8009dfc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009dc6:	4b36      	ldr	r3, [pc, #216]	@ (8009ea0 <USBD_SetConfig+0x118>)
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2203      	movs	r2, #3
 8009dd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009dd8:	4b31      	ldr	r3, [pc, #196]	@ (8009ea0 <USBD_SetConfig+0x118>)
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7ff f9e7 	bl	80091b2 <USBD_SetClassConfig>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d104      	bne.n	8009df4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f92f 	bl	800a050 <USBD_CtlError>
            return;
 8009df2:	e052      	b.n	8009e9a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f9f3 	bl	800a1e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009dfa:	e04e      	b.n	8009e9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f9ef 	bl	800a1e0 <USBD_CtlSendStatus>
        break;
 8009e02:	e04a      	b.n	8009e9a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009e04:	4b26      	ldr	r3, [pc, #152]	@ (8009ea0 <USBD_SetConfig+0x118>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d112      	bne.n	8009e32 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2202      	movs	r2, #2
 8009e10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009e14:	4b22      	ldr	r3, [pc, #136]	@ (8009ea0 <USBD_SetConfig+0x118>)
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	461a      	mov	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009e1e:	4b20      	ldr	r3, [pc, #128]	@ (8009ea0 <USBD_SetConfig+0x118>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7ff f9e3 	bl	80091f0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f9d8 	bl	800a1e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e30:	e033      	b.n	8009e9a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009e32:	4b1b      	ldr	r3, [pc, #108]	@ (8009ea0 <USBD_SetConfig+0x118>)
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d01d      	beq.n	8009e7c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f7ff f9d1 	bl	80091f0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009e4e:	4b14      	ldr	r3, [pc, #80]	@ (8009ea0 <USBD_SetConfig+0x118>)
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	461a      	mov	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e58:	4b11      	ldr	r3, [pc, #68]	@ (8009ea0 <USBD_SetConfig+0x118>)
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f7ff f9a7 	bl	80091b2 <USBD_SetClassConfig>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d104      	bne.n	8009e74 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f8ef 	bl	800a050 <USBD_CtlError>
            return;
 8009e72:	e012      	b.n	8009e9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f9b3 	bl	800a1e0 <USBD_CtlSendStatus>
        break;
 8009e7a:	e00e      	b.n	8009e9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f9af 	bl	800a1e0 <USBD_CtlSendStatus>
        break;
 8009e82:	e00a      	b.n	8009e9a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f8e2 	bl	800a050 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009e8c:	4b04      	ldr	r3, [pc, #16]	@ (8009ea0 <USBD_SetConfig+0x118>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	4619      	mov	r1, r3
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f7ff f9ac 	bl	80091f0 <USBD_ClrClassConfig>
        break;
 8009e98:	bf00      	nop
    }
  }
}
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	200003ac 	.word	0x200003ac

08009ea4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	88db      	ldrh	r3, [r3, #6]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d004      	beq.n	8009ec0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f8c9 	bl	800a050 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ebe:	e022      	b.n	8009f06 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	dc02      	bgt.n	8009ed0 <USBD_GetConfig+0x2c>
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	dc03      	bgt.n	8009ed6 <USBD_GetConfig+0x32>
 8009ece:	e015      	b.n	8009efc <USBD_GetConfig+0x58>
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d00b      	beq.n	8009eec <USBD_GetConfig+0x48>
 8009ed4:	e012      	b.n	8009efc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	3308      	adds	r3, #8
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f91d 	bl	800a124 <USBD_CtlSendData>
        break;
 8009eea:	e00c      	b.n	8009f06 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3304      	adds	r3, #4
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f915 	bl	800a124 <USBD_CtlSendData>
        break;
 8009efa:	e004      	b.n	8009f06 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f8a6 	bl	800a050 <USBD_CtlError>
        break;
 8009f04:	bf00      	nop
}
 8009f06:	bf00      	nop
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b082      	sub	sp, #8
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
 8009f16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d81e      	bhi.n	8009f62 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	88db      	ldrh	r3, [r3, #6]
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d004      	beq.n	8009f36 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f88e 	bl	800a050 <USBD_CtlError>
        break;
 8009f34:	e01a      	b.n	8009f6c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d005      	beq.n	8009f52 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	f043 0202 	orr.w	r2, r3, #2
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	330c      	adds	r3, #12
 8009f56:	2202      	movs	r2, #2
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f8e2 	bl	800a124 <USBD_CtlSendData>
      break;
 8009f60:	e004      	b.n	8009f6c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f873 	bl	800a050 <USBD_CtlError>
      break;
 8009f6a:	bf00      	nop
  }
}
 8009f6c:	bf00      	nop
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	885b      	ldrh	r3, [r3, #2]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d106      	bne.n	8009f94 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f926 	bl	800a1e0 <USBD_CtlSendStatus>
  }
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fac:	3b01      	subs	r3, #1
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d80b      	bhi.n	8009fca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	885b      	ldrh	r3, [r3, #2]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d10c      	bne.n	8009fd4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f90c 	bl	800a1e0 <USBD_CtlSendStatus>
      }
      break;
 8009fc8:	e004      	b.n	8009fd4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f83f 	bl	800a050 <USBD_CtlError>
      break;
 8009fd2:	e000      	b.n	8009fd6 <USBD_ClrFeature+0x3a>
      break;
 8009fd4:	bf00      	nop
  }
}
 8009fd6:	bf00      	nop
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b083      	sub	sp, #12
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	781a      	ldrb	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	785a      	ldrb	r2, [r3, #1]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	3302      	adds	r3, #2
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	3303      	adds	r3, #3
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	021b      	lsls	r3, r3, #8
 800a008:	b29b      	uxth	r3, r3
 800a00a:	4413      	add	r3, r2
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	3304      	adds	r3, #4
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	3305      	adds	r3, #5
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	021b      	lsls	r3, r3, #8
 800a022:	b29b      	uxth	r3, r3
 800a024:	4413      	add	r3, r2
 800a026:	b29a      	uxth	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	3306      	adds	r3, #6
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	461a      	mov	r2, r3
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	3307      	adds	r3, #7
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	021b      	lsls	r3, r3, #8
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	4413      	add	r3, r2
 800a040:	b29a      	uxth	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	80da      	strh	r2, [r3, #6]

}
 800a046:	bf00      	nop
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bc80      	pop	{r7}
 800a04e:	4770      	bx	lr

0800a050 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a05a:	2180      	movs	r1, #128	@ 0x80
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fc57 	bl	800a910 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a062:	2100      	movs	r1, #0
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fc53 	bl	800a910 <USBD_LL_StallEP>
}
 800a06a:	bf00      	nop
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b086      	sub	sp, #24
 800a076:	af00      	add	r7, sp, #0
 800a078:	60f8      	str	r0, [r7, #12]
 800a07a:	60b9      	str	r1, [r7, #8]
 800a07c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a07e:	2300      	movs	r3, #0
 800a080:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d032      	beq.n	800a0ee <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 f834 	bl	800a0f6 <USBD_GetLen>
 800a08e:	4603      	mov	r3, r0
 800a090:	3301      	adds	r3, #1
 800a092:	b29b      	uxth	r3, r3
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	b29a      	uxth	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	1c5a      	adds	r2, r3, #1
 800a0a0:	75fa      	strb	r2, [r7, #23]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	7812      	ldrb	r2, [r2, #0]
 800a0ac:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
 800a0b0:	1c5a      	adds	r2, r3, #1
 800a0b2:	75fa      	strb	r2, [r7, #23]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	2203      	movs	r2, #3
 800a0bc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a0be:	e012      	b.n	800a0e6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	1c5a      	adds	r2, r3, #1
 800a0c4:	60fa      	str	r2, [r7, #12]
 800a0c6:	7dfa      	ldrb	r2, [r7, #23]
 800a0c8:	1c51      	adds	r1, r2, #1
 800a0ca:	75f9      	strb	r1, [r7, #23]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	440a      	add	r2, r1
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a0d6:	7dfb      	ldrb	r3, [r7, #23]
 800a0d8:	1c5a      	adds	r2, r3, #1
 800a0da:	75fa      	strb	r2, [r7, #23]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1e8      	bne.n	800a0c0 <USBD_GetString+0x4e>
    }
  }
}
 800a0ee:	bf00      	nop
 800a0f0:	3718      	adds	r7, #24
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b085      	sub	sp, #20
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0fe:	2300      	movs	r3, #0
 800a100:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a102:	e005      	b.n	800a110 <USBD_GetLen+0x1a>
  {
    len++;
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	3301      	adds	r3, #1
 800a108:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	3301      	adds	r3, #1
 800a10e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1f5      	bne.n	800a104 <USBD_GetLen+0xe>
  }

  return len;
 800a118:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	bc80      	pop	{r7}
 800a122:	4770      	bx	lr

0800a124 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	4613      	mov	r3, r2
 800a130:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2202      	movs	r2, #2
 800a136:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a13a:	88fa      	ldrh	r2, [r7, #6]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a140:	88fa      	ldrh	r2, [r7, #6]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a146:	88fb      	ldrh	r3, [r7, #6]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	2100      	movs	r1, #0
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f000 fc67 	bl	800aa20 <USBD_LL_Transmit>

  return USBD_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	4613      	mov	r3, r2
 800a168:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a16a:	88fb      	ldrh	r3, [r7, #6]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	2100      	movs	r1, #0
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f000 fc55 	bl	800aa20 <USBD_LL_Transmit>

  return USBD_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	4613      	mov	r3, r2
 800a18c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2203      	movs	r2, #3
 800a192:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a196:	88fa      	ldrh	r2, [r7, #6]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a19e:	88fa      	ldrh	r2, [r7, #6]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1a6:	88fb      	ldrh	r3, [r7, #6]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 fc5a 	bl	800aa66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1ca:	88fb      	ldrh	r3, [r7, #6]
 800a1cc:	68ba      	ldr	r2, [r7, #8]
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f000 fc48 	bl	800aa66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2204      	movs	r2, #4
 800a1ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fc12 	bl	800aa20 <USBD_LL_Transmit>

  return USBD_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b082      	sub	sp, #8
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2205      	movs	r2, #5
 800a212:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a216:	2300      	movs	r3, #0
 800a218:	2200      	movs	r2, #0
 800a21a:	2100      	movs	r1, #0
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fc22 	bl	800aa66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a230:	2200      	movs	r2, #0
 800a232:	4912      	ldr	r1, [pc, #72]	@ (800a27c <MX_USB_DEVICE_Init+0x50>)
 800a234:	4812      	ldr	r0, [pc, #72]	@ (800a280 <MX_USB_DEVICE_Init+0x54>)
 800a236:	f7fe ff62 	bl	80090fe <USBD_Init>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a240:	f7f7 f9dc 	bl	80015fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a244:	490f      	ldr	r1, [pc, #60]	@ (800a284 <MX_USB_DEVICE_Init+0x58>)
 800a246:	480e      	ldr	r0, [pc, #56]	@ (800a280 <MX_USB_DEVICE_Init+0x54>)
 800a248:	f7fe ff84 	bl	8009154 <USBD_RegisterClass>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a252:	f7f7 f9d3 	bl	80015fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a256:	490c      	ldr	r1, [pc, #48]	@ (800a288 <MX_USB_DEVICE_Init+0x5c>)
 800a258:	4809      	ldr	r0, [pc, #36]	@ (800a280 <MX_USB_DEVICE_Init+0x54>)
 800a25a:	f7fe feb5 	bl	8008fc8 <USBD_CDC_RegisterInterface>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d001      	beq.n	800a268 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a264:	f7f7 f9ca 	bl	80015fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a268:	4805      	ldr	r0, [pc, #20]	@ (800a280 <MX_USB_DEVICE_Init+0x54>)
 800a26a:	f7fe ff8c 	bl	8009186 <USBD_Start>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d001      	beq.n	800a278 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a274:	f7f7 f9c2 	bl	80015fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a278:	bf00      	nop
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	2000012c 	.word	0x2000012c
 800a280:	200003b0 	.word	0x200003b0
 800a284:	20000018 	.word	0x20000018
 800a288:	2000011c 	.word	0x2000011c

0800a28c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a290:	2200      	movs	r2, #0
 800a292:	4905      	ldr	r1, [pc, #20]	@ (800a2a8 <CDC_Init_FS+0x1c>)
 800a294:	4805      	ldr	r0, [pc, #20]	@ (800a2ac <CDC_Init_FS+0x20>)
 800a296:	f7fe fead 	bl	8008ff4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a29a:	4905      	ldr	r1, [pc, #20]	@ (800a2b0 <CDC_Init_FS+0x24>)
 800a29c:	4803      	ldr	r0, [pc, #12]	@ (800a2ac <CDC_Init_FS+0x20>)
 800a29e:	f7fe fec2 	bl	8009026 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a2a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	20000a74 	.word	0x20000a74
 800a2ac:	200003b0 	.word	0x200003b0
 800a2b0:	20000674 	.word	0x20000674

0800a2b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a2b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bc80      	pop	{r7}
 800a2c0:	4770      	bx	lr
	...

0800a2c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	6039      	str	r1, [r7, #0]
 800a2ce:	71fb      	strb	r3, [r7, #7]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a2d4:	79fb      	ldrb	r3, [r7, #7]
 800a2d6:	2b23      	cmp	r3, #35	@ 0x23
 800a2d8:	d84a      	bhi.n	800a370 <CDC_Control_FS+0xac>
 800a2da:	a201      	add	r2, pc, #4	@ (adr r2, 800a2e0 <CDC_Control_FS+0x1c>)
 800a2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e0:	0800a371 	.word	0x0800a371
 800a2e4:	0800a371 	.word	0x0800a371
 800a2e8:	0800a371 	.word	0x0800a371
 800a2ec:	0800a371 	.word	0x0800a371
 800a2f0:	0800a371 	.word	0x0800a371
 800a2f4:	0800a371 	.word	0x0800a371
 800a2f8:	0800a371 	.word	0x0800a371
 800a2fc:	0800a371 	.word	0x0800a371
 800a300:	0800a371 	.word	0x0800a371
 800a304:	0800a371 	.word	0x0800a371
 800a308:	0800a371 	.word	0x0800a371
 800a30c:	0800a371 	.word	0x0800a371
 800a310:	0800a371 	.word	0x0800a371
 800a314:	0800a371 	.word	0x0800a371
 800a318:	0800a371 	.word	0x0800a371
 800a31c:	0800a371 	.word	0x0800a371
 800a320:	0800a371 	.word	0x0800a371
 800a324:	0800a371 	.word	0x0800a371
 800a328:	0800a371 	.word	0x0800a371
 800a32c:	0800a371 	.word	0x0800a371
 800a330:	0800a371 	.word	0x0800a371
 800a334:	0800a371 	.word	0x0800a371
 800a338:	0800a371 	.word	0x0800a371
 800a33c:	0800a371 	.word	0x0800a371
 800a340:	0800a371 	.word	0x0800a371
 800a344:	0800a371 	.word	0x0800a371
 800a348:	0800a371 	.word	0x0800a371
 800a34c:	0800a371 	.word	0x0800a371
 800a350:	0800a371 	.word	0x0800a371
 800a354:	0800a371 	.word	0x0800a371
 800a358:	0800a371 	.word	0x0800a371
 800a35c:	0800a371 	.word	0x0800a371
 800a360:	0800a371 	.word	0x0800a371
 800a364:	0800a371 	.word	0x0800a371
 800a368:	0800a371 	.word	0x0800a371
 800a36c:	0800a371 	.word	0x0800a371
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a370:	bf00      	nop
  }

  return (USBD_OK);
 800a372:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a374:	4618      	mov	r0, r3
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	bc80      	pop	{r7}
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop

0800a380 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (Buf[0]==0xAA)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	2baa      	cmp	r3, #170	@ 0xaa
 800a390:	d104      	bne.n	800a39c <CDC_Receive_FS+0x1c>
		Control_Command_Handler(Buf,Len);
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7f6 fd6a 	bl	8000e70 <Control_Command_Handler>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a39c:	4803      	ldr	r0, [pc, #12]	@ (800a3ac <CDC_Receive_FS+0x2c>)
 800a39e:	f7fe fe84 	bl	80090aa <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 800a3a2:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	200003b0 	.word	0x200003b0

0800a3b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a3c0:	4b0d      	ldr	r3, [pc, #52]	@ (800a3f8 <CDC_Transmit_FS+0x48>)
 800a3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e00b      	b.n	800a3ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a3d6:	887b      	ldrh	r3, [r7, #2]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	6879      	ldr	r1, [r7, #4]
 800a3dc:	4806      	ldr	r0, [pc, #24]	@ (800a3f8 <CDC_Transmit_FS+0x48>)
 800a3de:	f7fe fe09 	bl	8008ff4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a3e2:	4805      	ldr	r0, [pc, #20]	@ (800a3f8 <CDC_Transmit_FS+0x48>)
 800a3e4:	f7fe fe32 	bl	800904c <USBD_CDC_TransmitPacket>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	200003b0 	.word	0x200003b0

0800a3fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	6039      	str	r1, [r7, #0]
 800a406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	2212      	movs	r2, #18
 800a40c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a40e:	4b03      	ldr	r3, [pc, #12]	@ (800a41c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	bc80      	pop	{r7}
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	20000148 	.word	0x20000148

0800a420 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	6039      	str	r1, [r7, #0]
 800a42a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	2204      	movs	r2, #4
 800a430:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a432:	4b03      	ldr	r3, [pc, #12]	@ (800a440 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	bc80      	pop	{r7}
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	2000015c 	.word	0x2000015c

0800a444 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	6039      	str	r1, [r7, #0]
 800a44e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d105      	bne.n	800a462 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	4907      	ldr	r1, [pc, #28]	@ (800a478 <USBD_FS_ProductStrDescriptor+0x34>)
 800a45a:	4808      	ldr	r0, [pc, #32]	@ (800a47c <USBD_FS_ProductStrDescriptor+0x38>)
 800a45c:	f7ff fe09 	bl	800a072 <USBD_GetString>
 800a460:	e004      	b.n	800a46c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	4904      	ldr	r1, [pc, #16]	@ (800a478 <USBD_FS_ProductStrDescriptor+0x34>)
 800a466:	4805      	ldr	r0, [pc, #20]	@ (800a47c <USBD_FS_ProductStrDescriptor+0x38>)
 800a468:	f7ff fe03 	bl	800a072 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a46c:	4b02      	ldr	r3, [pc, #8]	@ (800a478 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20000e74 	.word	0x20000e74
 800a47c:	0800b528 	.word	0x0800b528

0800a480 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	6039      	str	r1, [r7, #0]
 800a48a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	4904      	ldr	r1, [pc, #16]	@ (800a4a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a490:	4804      	ldr	r0, [pc, #16]	@ (800a4a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a492:	f7ff fdee 	bl	800a072 <USBD_GetString>
  return USBD_StrDesc;
 800a496:	4b02      	ldr	r3, [pc, #8]	@ (800a4a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	20000e74 	.word	0x20000e74
 800a4a4:	0800b53c 	.word	0x0800b53c

0800a4a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	6039      	str	r1, [r7, #0]
 800a4b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	221a      	movs	r2, #26
 800a4b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a4ba:	f000 f843 	bl	800a544 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a4be:	4b02      	ldr	r3, [pc, #8]	@ (800a4c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	20000160 	.word	0x20000160

0800a4cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	6039      	str	r1, [r7, #0]
 800a4d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d105      	bne.n	800a4ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	4907      	ldr	r1, [pc, #28]	@ (800a500 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4e2:	4808      	ldr	r0, [pc, #32]	@ (800a504 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4e4:	f7ff fdc5 	bl	800a072 <USBD_GetString>
 800a4e8:	e004      	b.n	800a4f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	4904      	ldr	r1, [pc, #16]	@ (800a500 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4ee:	4805      	ldr	r0, [pc, #20]	@ (800a504 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4f0:	f7ff fdbf 	bl	800a072 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4f4:	4b02      	ldr	r3, [pc, #8]	@ (800a500 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20000e74 	.word	0x20000e74
 800a504:	0800b550 	.word	0x0800b550

0800a508 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	4603      	mov	r3, r0
 800a510:	6039      	str	r1, [r7, #0]
 800a512:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a514:	79fb      	ldrb	r3, [r7, #7]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d105      	bne.n	800a526 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	4907      	ldr	r1, [pc, #28]	@ (800a53c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a51e:	4808      	ldr	r0, [pc, #32]	@ (800a540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a520:	f7ff fda7 	bl	800a072 <USBD_GetString>
 800a524:	e004      	b.n	800a530 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	4904      	ldr	r1, [pc, #16]	@ (800a53c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a52a:	4805      	ldr	r0, [pc, #20]	@ (800a540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a52c:	f7ff fda1 	bl	800a072 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a530:	4b02      	ldr	r3, [pc, #8]	@ (800a53c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a532:	4618      	mov	r0, r3
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	20000e74 	.word	0x20000e74
 800a540:	0800b55c 	.word	0x0800b55c

0800a544 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a54a:	4b0f      	ldr	r3, [pc, #60]	@ (800a588 <Get_SerialNum+0x44>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a550:	4b0e      	ldr	r3, [pc, #56]	@ (800a58c <Get_SerialNum+0x48>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a556:	4b0e      	ldr	r3, [pc, #56]	@ (800a590 <Get_SerialNum+0x4c>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4413      	add	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d009      	beq.n	800a57e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a56a:	2208      	movs	r2, #8
 800a56c:	4909      	ldr	r1, [pc, #36]	@ (800a594 <Get_SerialNum+0x50>)
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 f814 	bl	800a59c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a574:	2204      	movs	r2, #4
 800a576:	4908      	ldr	r1, [pc, #32]	@ (800a598 <Get_SerialNum+0x54>)
 800a578:	68b8      	ldr	r0, [r7, #8]
 800a57a:	f000 f80f 	bl	800a59c <IntToUnicode>
  }
}
 800a57e:	bf00      	nop
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	1ffff7e8 	.word	0x1ffff7e8
 800a58c:	1ffff7ec 	.word	0x1ffff7ec
 800a590:	1ffff7f0 	.word	0x1ffff7f0
 800a594:	20000162 	.word	0x20000162
 800a598:	20000172 	.word	0x20000172

0800a59c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b087      	sub	sp, #28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	75fb      	strb	r3, [r7, #23]
 800a5b2:	e027      	b.n	800a604 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	0f1b      	lsrs	r3, r3, #28
 800a5b8:	2b09      	cmp	r3, #9
 800a5ba:	d80b      	bhi.n	800a5d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	0f1b      	lsrs	r3, r3, #28
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	7dfb      	ldrb	r3, [r7, #23]
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	440b      	add	r3, r1
 800a5cc:	3230      	adds	r2, #48	@ 0x30
 800a5ce:	b2d2      	uxtb	r2, r2
 800a5d0:	701a      	strb	r2, [r3, #0]
 800a5d2:	e00a      	b.n	800a5ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	0f1b      	lsrs	r3, r3, #28
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	7dfb      	ldrb	r3, [r7, #23]
 800a5dc:	005b      	lsls	r3, r3, #1
 800a5de:	4619      	mov	r1, r3
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	440b      	add	r3, r1
 800a5e4:	3237      	adds	r2, #55	@ 0x37
 800a5e6:	b2d2      	uxtb	r2, r2
 800a5e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	011b      	lsls	r3, r3, #4
 800a5ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
 800a600:	3301      	adds	r3, #1
 800a602:	75fb      	strb	r3, [r7, #23]
 800a604:	7dfa      	ldrb	r2, [r7, #23]
 800a606:	79fb      	ldrb	r3, [r7, #7]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d3d3      	bcc.n	800a5b4 <IntToUnicode+0x18>
  }
}
 800a60c:	bf00      	nop
 800a60e:	bf00      	nop
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	bc80      	pop	{r7}
 800a616:	4770      	bx	lr

0800a618 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a0d      	ldr	r2, [pc, #52]	@ (800a65c <HAL_PCD_MspInit+0x44>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d113      	bne.n	800a652 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a62a:	4b0d      	ldr	r3, [pc, #52]	@ (800a660 <HAL_PCD_MspInit+0x48>)
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	4a0c      	ldr	r2, [pc, #48]	@ (800a660 <HAL_PCD_MspInit+0x48>)
 800a630:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a634:	61d3      	str	r3, [r2, #28]
 800a636:	4b0a      	ldr	r3, [pc, #40]	@ (800a660 <HAL_PCD_MspInit+0x48>)
 800a638:	69db      	ldr	r3, [r3, #28]
 800a63a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a63e:	60fb      	str	r3, [r7, #12]
 800a640:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a642:	2200      	movs	r2, #0
 800a644:	2100      	movs	r1, #0
 800a646:	2014      	movs	r0, #20
 800a648:	f7f7 fb8d 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a64c:	2014      	movs	r0, #20
 800a64e:	f7f7 fba6 	bl	8001d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a652:	bf00      	nop
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	40005c00 	.word	0x40005c00
 800a660:	40021000 	.word	0x40021000

0800a664 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a678:	4619      	mov	r1, r3
 800a67a:	4610      	mov	r0, r2
 800a67c:	f7fe fdcb 	bl	8009216 <USBD_LL_SetupStage>
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a69a:	78fa      	ldrb	r2, [r7, #3]
 800a69c:	6879      	ldr	r1, [r7, #4]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	00db      	lsls	r3, r3, #3
 800a6a6:	440b      	add	r3, r1
 800a6a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	78fb      	ldrb	r3, [r7, #3]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	f7fe fdfd 	bl	80092b0 <USBD_LL_DataOutStage>
}
 800a6b6:	bf00      	nop
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b082      	sub	sp, #8
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a6d0:	78fa      	ldrb	r2, [r7, #3]
 800a6d2:	6879      	ldr	r1, [r7, #4]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	00db      	lsls	r3, r3, #3
 800a6dc:	440b      	add	r3, r1
 800a6de:	3324      	adds	r3, #36	@ 0x24
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	78fb      	ldrb	r3, [r7, #3]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	f7fe fe54 	bl	8009392 <USBD_LL_DataInStage>
}
 800a6ea:	bf00      	nop
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b082      	sub	sp, #8
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a700:	4618      	mov	r0, r3
 800a702:	f7fe ff64 	bl	80095ce <USBD_LL_SOF>
}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a716:	2301      	movs	r3, #1
 800a718:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	799b      	ldrb	r3, [r3, #6]
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d001      	beq.n	800a726 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a722:	f7f6 ff6b 	bl	80015fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a72c:	7bfa      	ldrb	r2, [r7, #15]
 800a72e:	4611      	mov	r1, r2
 800a730:	4618      	mov	r0, r3
 800a732:	f7fe ff14 	bl	800955e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe fecd 	bl	80094dc <USBD_LL_Reset>
}
 800a742:	bf00      	nop
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
	...

0800a74c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fe ff0e 	bl	800957c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	7a9b      	ldrb	r3, [r3, #10]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d005      	beq.n	800a774 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a768:	4b04      	ldr	r3, [pc, #16]	@ (800a77c <HAL_PCD_SuspendCallback+0x30>)
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	4a03      	ldr	r2, [pc, #12]	@ (800a77c <HAL_PCD_SuspendCallback+0x30>)
 800a76e:	f043 0306 	orr.w	r3, r3, #6
 800a772:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	e000ed00 	.word	0xe000ed00

0800a780 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe ff08 	bl	80095a4 <USBD_LL_Resume>
}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a7a4:	4a28      	ldr	r2, [pc, #160]	@ (800a848 <USBD_LL_Init+0xac>)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a26      	ldr	r2, [pc, #152]	@ (800a848 <USBD_LL_Init+0xac>)
 800a7b0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a7b4:	4b24      	ldr	r3, [pc, #144]	@ (800a848 <USBD_LL_Init+0xac>)
 800a7b6:	4a25      	ldr	r2, [pc, #148]	@ (800a84c <USBD_LL_Init+0xb0>)
 800a7b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a7ba:	4b23      	ldr	r3, [pc, #140]	@ (800a848 <USBD_LL_Init+0xac>)
 800a7bc:	2208      	movs	r2, #8
 800a7be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a7c0:	4b21      	ldr	r3, [pc, #132]	@ (800a848 <USBD_LL_Init+0xac>)
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a7c6:	4b20      	ldr	r3, [pc, #128]	@ (800a848 <USBD_LL_Init+0xac>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a7cc:	4b1e      	ldr	r3, [pc, #120]	@ (800a848 <USBD_LL_Init+0xac>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a7d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a848 <USBD_LL_Init+0xac>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a7d8:	481b      	ldr	r0, [pc, #108]	@ (800a848 <USBD_LL_Init+0xac>)
 800a7da:	f7f8 fcfc 	bl	80031d6 <HAL_PCD_Init>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a7e4:	f7f6 ff0a 	bl	80015fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a7ee:	2318      	movs	r3, #24
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	f7fa fa0d 	bl	8004c12 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a7fe:	2358      	movs	r3, #88	@ 0x58
 800a800:	2200      	movs	r2, #0
 800a802:	2180      	movs	r1, #128	@ 0x80
 800a804:	f7fa fa05 	bl	8004c12 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a80e:	23c0      	movs	r3, #192	@ 0xc0
 800a810:	2200      	movs	r2, #0
 800a812:	2181      	movs	r1, #129	@ 0x81
 800a814:	f7fa f9fd 	bl	8004c12 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a81e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a822:	2200      	movs	r2, #0
 800a824:	2101      	movs	r1, #1
 800a826:	f7fa f9f4 	bl	8004c12 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a834:	2200      	movs	r2, #0
 800a836:	2182      	movs	r1, #130	@ 0x82
 800a838:	f7fa f9eb 	bl	8004c12 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	20001074 	.word	0x20001074
 800a84c:	40005c00 	.word	0x40005c00

0800a850 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a866:	4618      	mov	r0, r3
 800a868:	f7f8 fdab 	bl	80033c2 <HAL_PCD_Start>
 800a86c:	4603      	mov	r3, r0
 800a86e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	4618      	mov	r0, r3
 800a874:	f000 f94e 	bl	800ab14 <USBD_Get_USB_Status>
 800a878:	4603      	mov	r3, r0
 800a87a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a87c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b084      	sub	sp, #16
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	4608      	mov	r0, r1
 800a890:	4611      	mov	r1, r2
 800a892:	461a      	mov	r2, r3
 800a894:	4603      	mov	r3, r0
 800a896:	70fb      	strb	r3, [r7, #3]
 800a898:	460b      	mov	r3, r1
 800a89a:	70bb      	strb	r3, [r7, #2]
 800a89c:	4613      	mov	r3, r2
 800a89e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8ae:	78bb      	ldrb	r3, [r7, #2]
 800a8b0:	883a      	ldrh	r2, [r7, #0]
 800a8b2:	78f9      	ldrb	r1, [r7, #3]
 800a8b4:	f7f8 feff 	bl	80036b6 <HAL_PCD_EP_Open>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 f928 	bl	800ab14 <USBD_Get_USB_Status>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a8ec:	78fa      	ldrb	r2, [r7, #3]
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7f8 ff3d 	bl	8003770 <HAL_PCD_EP_Close>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8fa:	7bfb      	ldrb	r3, [r7, #15]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 f909 	bl	800ab14 <USBD_Get_USB_Status>
 800a902:	4603      	mov	r3, r0
 800a904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a906:	7bbb      	ldrb	r3, [r7, #14]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	460b      	mov	r3, r1
 800a91a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a92a:	78fa      	ldrb	r2, [r7, #3]
 800a92c:	4611      	mov	r1, r2
 800a92e:	4618      	mov	r0, r3
 800a930:	f7f8 ffe5 	bl	80038fe <HAL_PCD_EP_SetStall>
 800a934:	4603      	mov	r3, r0
 800a936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a938:	7bfb      	ldrb	r3, [r7, #15]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 f8ea 	bl	800ab14 <USBD_Get_USB_Status>
 800a940:	4603      	mov	r3, r0
 800a942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a944:	7bbb      	ldrb	r3, [r7, #14]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b084      	sub	sp, #16
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	460b      	mov	r3, r1
 800a958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a968:	78fa      	ldrb	r2, [r7, #3]
 800a96a:	4611      	mov	r1, r2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7f9 f826 	bl	80039be <HAL_PCD_EP_ClrStall>
 800a972:	4603      	mov	r3, r0
 800a974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a976:	7bfb      	ldrb	r3, [r7, #15]
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 f8cb 	bl	800ab14 <USBD_Get_USB_Status>
 800a97e:	4603      	mov	r3, r0
 800a980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a982:	7bbb      	ldrb	r3, [r7, #14]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	460b      	mov	r3, r1
 800a996:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a99e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a9a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	da0b      	bge.n	800a9c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a9a8:	78fb      	ldrb	r3, [r7, #3]
 800a9aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9ae:	68f9      	ldr	r1, [r7, #12]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	4413      	add	r3, r2
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	440b      	add	r3, r1
 800a9ba:	3312      	adds	r3, #18
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	e00b      	b.n	800a9d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a9c0:	78fb      	ldrb	r3, [r7, #3]
 800a9c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9c6:	68f9      	ldr	r1, [r7, #12]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4413      	add	r3, r2
 800a9ce:	00db      	lsls	r3, r3, #3
 800a9d0:	440b      	add	r3, r1
 800a9d2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a9d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bc80      	pop	{r7}
 800a9e0:	4770      	bx	lr

0800a9e2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a9fc:	78fa      	ldrb	r2, [r7, #3]
 800a9fe:	4611      	mov	r1, r2
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7f8 fe34 	bl	800366e <HAL_PCD_SetAddress>
 800aa06:	4603      	mov	r3, r0
 800aa08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 f881 	bl	800ab14 <USBD_Get_USB_Status>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa16:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	607a      	str	r2, [r7, #4]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	72fb      	strb	r3, [r7, #11]
 800aa30:	4613      	mov	r3, r2
 800aa32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aa42:	893b      	ldrh	r3, [r7, #8]
 800aa44:	7af9      	ldrb	r1, [r7, #11]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	f7f8 ff22 	bl	8003890 <HAL_PCD_EP_Transmit>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f000 f85e 	bl	800ab14 <USBD_Get_USB_Status>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa5c:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3718      	adds	r7, #24
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b086      	sub	sp, #24
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	60f8      	str	r0, [r7, #12]
 800aa6e:	607a      	str	r2, [r7, #4]
 800aa70:	461a      	mov	r2, r3
 800aa72:	460b      	mov	r3, r1
 800aa74:	72fb      	strb	r3, [r7, #11]
 800aa76:	4613      	mov	r3, r2
 800aa78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aa88:	893b      	ldrh	r3, [r7, #8]
 800aa8a:	7af9      	ldrb	r1, [r7, #11]
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	f7f8 feb7 	bl	8003800 <HAL_PCD_EP_Receive>
 800aa92:	4603      	mov	r3, r0
 800aa94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa96:	7dfb      	ldrb	r3, [r7, #23]
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f000 f83b 	bl	800ab14 <USBD_Get_USB_Status>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aaa2:	7dbb      	ldrb	r3, [r7, #22]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aabe:	78fa      	ldrb	r2, [r7, #3]
 800aac0:	4611      	mov	r1, r2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7f8 fecd 	bl	8003862 <HAL_PCD_EP_GetRxCount>
 800aac8:	4603      	mov	r3, r0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
	...

0800aad4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aadc:	4b02      	ldr	r3, [pc, #8]	@ (800aae8 <USBD_static_malloc+0x14>)
}
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bc80      	pop	{r7}
 800aae6:	4770      	bx	lr
 800aae8:	2000134c 	.word	0x2000134c

0800aaec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]

}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bc80      	pop	{r7}
 800aafc:	4770      	bx	lr

0800aafe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafe:	b480      	push	{r7}
 800ab00:	b083      	sub	sp, #12
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	460b      	mov	r3, r1
 800ab08:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ab0a:	bf00      	nop
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bc80      	pop	{r7}
 800ab12:	4770      	bx	lr

0800ab14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab22:	79fb      	ldrb	r3, [r7, #7]
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d817      	bhi.n	800ab58 <USBD_Get_USB_Status+0x44>
 800ab28:	a201      	add	r2, pc, #4	@ (adr r2, 800ab30 <USBD_Get_USB_Status+0x1c>)
 800ab2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2e:	bf00      	nop
 800ab30:	0800ab41 	.word	0x0800ab41
 800ab34:	0800ab47 	.word	0x0800ab47
 800ab38:	0800ab4d 	.word	0x0800ab4d
 800ab3c:	0800ab53 	.word	0x0800ab53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	73fb      	strb	r3, [r7, #15]
    break;
 800ab44:	e00b      	b.n	800ab5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab46:	2302      	movs	r3, #2
 800ab48:	73fb      	strb	r3, [r7, #15]
    break;
 800ab4a:	e008      	b.n	800ab5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab50:	e005      	b.n	800ab5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab52:	2302      	movs	r3, #2
 800ab54:	73fb      	strb	r3, [r7, #15]
    break;
 800ab56:	e002      	b.n	800ab5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab58:	2302      	movs	r3, #2
 800ab5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab5c:	bf00      	nop
  }
  return usb_status;
 800ab5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bc80      	pop	{r7}
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop

0800ab6c <siprintf>:
 800ab6c:	b40e      	push	{r1, r2, r3}
 800ab6e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab72:	b500      	push	{lr}
 800ab74:	b09c      	sub	sp, #112	@ 0x70
 800ab76:	ab1d      	add	r3, sp, #116	@ 0x74
 800ab78:	9002      	str	r0, [sp, #8]
 800ab7a:	9006      	str	r0, [sp, #24]
 800ab7c:	9107      	str	r1, [sp, #28]
 800ab7e:	9104      	str	r1, [sp, #16]
 800ab80:	4808      	ldr	r0, [pc, #32]	@ (800aba4 <siprintf+0x38>)
 800ab82:	4909      	ldr	r1, [pc, #36]	@ (800aba8 <siprintf+0x3c>)
 800ab84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab88:	9105      	str	r1, [sp, #20]
 800ab8a:	6800      	ldr	r0, [r0, #0]
 800ab8c:	a902      	add	r1, sp, #8
 800ab8e:	9301      	str	r3, [sp, #4]
 800ab90:	f000 f992 	bl	800aeb8 <_svfiprintf_r>
 800ab94:	2200      	movs	r2, #0
 800ab96:	9b02      	ldr	r3, [sp, #8]
 800ab98:	701a      	strb	r2, [r3, #0]
 800ab9a:	b01c      	add	sp, #112	@ 0x70
 800ab9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aba0:	b003      	add	sp, #12
 800aba2:	4770      	bx	lr
 800aba4:	2000017c 	.word	0x2000017c
 800aba8:	ffff0208 	.word	0xffff0208

0800abac <memset>:
 800abac:	4603      	mov	r3, r0
 800abae:	4402      	add	r2, r0
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d100      	bne.n	800abb6 <memset+0xa>
 800abb4:	4770      	bx	lr
 800abb6:	f803 1b01 	strb.w	r1, [r3], #1
 800abba:	e7f9      	b.n	800abb0 <memset+0x4>

0800abbc <__errno>:
 800abbc:	4b01      	ldr	r3, [pc, #4]	@ (800abc4 <__errno+0x8>)
 800abbe:	6818      	ldr	r0, [r3, #0]
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	2000017c 	.word	0x2000017c

0800abc8 <__libc_init_array>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	2600      	movs	r6, #0
 800abcc:	4d0c      	ldr	r5, [pc, #48]	@ (800ac00 <__libc_init_array+0x38>)
 800abce:	4c0d      	ldr	r4, [pc, #52]	@ (800ac04 <__libc_init_array+0x3c>)
 800abd0:	1b64      	subs	r4, r4, r5
 800abd2:	10a4      	asrs	r4, r4, #2
 800abd4:	42a6      	cmp	r6, r4
 800abd6:	d109      	bne.n	800abec <__libc_init_array+0x24>
 800abd8:	f000 fc78 	bl	800b4cc <_init>
 800abdc:	2600      	movs	r6, #0
 800abde:	4d0a      	ldr	r5, [pc, #40]	@ (800ac08 <__libc_init_array+0x40>)
 800abe0:	4c0a      	ldr	r4, [pc, #40]	@ (800ac0c <__libc_init_array+0x44>)
 800abe2:	1b64      	subs	r4, r4, r5
 800abe4:	10a4      	asrs	r4, r4, #2
 800abe6:	42a6      	cmp	r6, r4
 800abe8:	d105      	bne.n	800abf6 <__libc_init_array+0x2e>
 800abea:	bd70      	pop	{r4, r5, r6, pc}
 800abec:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf0:	4798      	blx	r3
 800abf2:	3601      	adds	r6, #1
 800abf4:	e7ee      	b.n	800abd4 <__libc_init_array+0xc>
 800abf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfa:	4798      	blx	r3
 800abfc:	3601      	adds	r6, #1
 800abfe:	e7f2      	b.n	800abe6 <__libc_init_array+0x1e>
 800ac00:	0800b5d4 	.word	0x0800b5d4
 800ac04:	0800b5d4 	.word	0x0800b5d4
 800ac08:	0800b5d4 	.word	0x0800b5d4
 800ac0c:	0800b5d8 	.word	0x0800b5d8

0800ac10 <__retarget_lock_acquire_recursive>:
 800ac10:	4770      	bx	lr

0800ac12 <__retarget_lock_release_recursive>:
 800ac12:	4770      	bx	lr

0800ac14 <_free_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	4605      	mov	r5, r0
 800ac18:	2900      	cmp	r1, #0
 800ac1a:	d040      	beq.n	800ac9e <_free_r+0x8a>
 800ac1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac20:	1f0c      	subs	r4, r1, #4
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	bfb8      	it	lt
 800ac26:	18e4      	addlt	r4, r4, r3
 800ac28:	f000 f8de 	bl	800ade8 <__malloc_lock>
 800ac2c:	4a1c      	ldr	r2, [pc, #112]	@ (800aca0 <_free_r+0x8c>)
 800ac2e:	6813      	ldr	r3, [r2, #0]
 800ac30:	b933      	cbnz	r3, 800ac40 <_free_r+0x2c>
 800ac32:	6063      	str	r3, [r4, #4]
 800ac34:	6014      	str	r4, [r2, #0]
 800ac36:	4628      	mov	r0, r5
 800ac38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac3c:	f000 b8da 	b.w	800adf4 <__malloc_unlock>
 800ac40:	42a3      	cmp	r3, r4
 800ac42:	d908      	bls.n	800ac56 <_free_r+0x42>
 800ac44:	6820      	ldr	r0, [r4, #0]
 800ac46:	1821      	adds	r1, r4, r0
 800ac48:	428b      	cmp	r3, r1
 800ac4a:	bf01      	itttt	eq
 800ac4c:	6819      	ldreq	r1, [r3, #0]
 800ac4e:	685b      	ldreq	r3, [r3, #4]
 800ac50:	1809      	addeq	r1, r1, r0
 800ac52:	6021      	streq	r1, [r4, #0]
 800ac54:	e7ed      	b.n	800ac32 <_free_r+0x1e>
 800ac56:	461a      	mov	r2, r3
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	b10b      	cbz	r3, 800ac60 <_free_r+0x4c>
 800ac5c:	42a3      	cmp	r3, r4
 800ac5e:	d9fa      	bls.n	800ac56 <_free_r+0x42>
 800ac60:	6811      	ldr	r1, [r2, #0]
 800ac62:	1850      	adds	r0, r2, r1
 800ac64:	42a0      	cmp	r0, r4
 800ac66:	d10b      	bne.n	800ac80 <_free_r+0x6c>
 800ac68:	6820      	ldr	r0, [r4, #0]
 800ac6a:	4401      	add	r1, r0
 800ac6c:	1850      	adds	r0, r2, r1
 800ac6e:	4283      	cmp	r3, r0
 800ac70:	6011      	str	r1, [r2, #0]
 800ac72:	d1e0      	bne.n	800ac36 <_free_r+0x22>
 800ac74:	6818      	ldr	r0, [r3, #0]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	4408      	add	r0, r1
 800ac7a:	6010      	str	r0, [r2, #0]
 800ac7c:	6053      	str	r3, [r2, #4]
 800ac7e:	e7da      	b.n	800ac36 <_free_r+0x22>
 800ac80:	d902      	bls.n	800ac88 <_free_r+0x74>
 800ac82:	230c      	movs	r3, #12
 800ac84:	602b      	str	r3, [r5, #0]
 800ac86:	e7d6      	b.n	800ac36 <_free_r+0x22>
 800ac88:	6820      	ldr	r0, [r4, #0]
 800ac8a:	1821      	adds	r1, r4, r0
 800ac8c:	428b      	cmp	r3, r1
 800ac8e:	bf01      	itttt	eq
 800ac90:	6819      	ldreq	r1, [r3, #0]
 800ac92:	685b      	ldreq	r3, [r3, #4]
 800ac94:	1809      	addeq	r1, r1, r0
 800ac96:	6021      	streq	r1, [r4, #0]
 800ac98:	6063      	str	r3, [r4, #4]
 800ac9a:	6054      	str	r4, [r2, #4]
 800ac9c:	e7cb      	b.n	800ac36 <_free_r+0x22>
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	200016b0 	.word	0x200016b0

0800aca4 <sbrk_aligned>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	4e0f      	ldr	r6, [pc, #60]	@ (800ace4 <sbrk_aligned+0x40>)
 800aca8:	460c      	mov	r4, r1
 800acaa:	6831      	ldr	r1, [r6, #0]
 800acac:	4605      	mov	r5, r0
 800acae:	b911      	cbnz	r1, 800acb6 <sbrk_aligned+0x12>
 800acb0:	f000 fbaa 	bl	800b408 <_sbrk_r>
 800acb4:	6030      	str	r0, [r6, #0]
 800acb6:	4621      	mov	r1, r4
 800acb8:	4628      	mov	r0, r5
 800acba:	f000 fba5 	bl	800b408 <_sbrk_r>
 800acbe:	1c43      	adds	r3, r0, #1
 800acc0:	d103      	bne.n	800acca <sbrk_aligned+0x26>
 800acc2:	f04f 34ff 	mov.w	r4, #4294967295
 800acc6:	4620      	mov	r0, r4
 800acc8:	bd70      	pop	{r4, r5, r6, pc}
 800acca:	1cc4      	adds	r4, r0, #3
 800accc:	f024 0403 	bic.w	r4, r4, #3
 800acd0:	42a0      	cmp	r0, r4
 800acd2:	d0f8      	beq.n	800acc6 <sbrk_aligned+0x22>
 800acd4:	1a21      	subs	r1, r4, r0
 800acd6:	4628      	mov	r0, r5
 800acd8:	f000 fb96 	bl	800b408 <_sbrk_r>
 800acdc:	3001      	adds	r0, #1
 800acde:	d1f2      	bne.n	800acc6 <sbrk_aligned+0x22>
 800ace0:	e7ef      	b.n	800acc2 <sbrk_aligned+0x1e>
 800ace2:	bf00      	nop
 800ace4:	200016ac 	.word	0x200016ac

0800ace8 <_malloc_r>:
 800ace8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acec:	1ccd      	adds	r5, r1, #3
 800acee:	f025 0503 	bic.w	r5, r5, #3
 800acf2:	3508      	adds	r5, #8
 800acf4:	2d0c      	cmp	r5, #12
 800acf6:	bf38      	it	cc
 800acf8:	250c      	movcc	r5, #12
 800acfa:	2d00      	cmp	r5, #0
 800acfc:	4606      	mov	r6, r0
 800acfe:	db01      	blt.n	800ad04 <_malloc_r+0x1c>
 800ad00:	42a9      	cmp	r1, r5
 800ad02:	d904      	bls.n	800ad0e <_malloc_r+0x26>
 800ad04:	230c      	movs	r3, #12
 800ad06:	6033      	str	r3, [r6, #0]
 800ad08:	2000      	movs	r0, #0
 800ad0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ade4 <_malloc_r+0xfc>
 800ad12:	f000 f869 	bl	800ade8 <__malloc_lock>
 800ad16:	f8d8 3000 	ldr.w	r3, [r8]
 800ad1a:	461c      	mov	r4, r3
 800ad1c:	bb44      	cbnz	r4, 800ad70 <_malloc_r+0x88>
 800ad1e:	4629      	mov	r1, r5
 800ad20:	4630      	mov	r0, r6
 800ad22:	f7ff ffbf 	bl	800aca4 <sbrk_aligned>
 800ad26:	1c43      	adds	r3, r0, #1
 800ad28:	4604      	mov	r4, r0
 800ad2a:	d158      	bne.n	800adde <_malloc_r+0xf6>
 800ad2c:	f8d8 4000 	ldr.w	r4, [r8]
 800ad30:	4627      	mov	r7, r4
 800ad32:	2f00      	cmp	r7, #0
 800ad34:	d143      	bne.n	800adbe <_malloc_r+0xd6>
 800ad36:	2c00      	cmp	r4, #0
 800ad38:	d04b      	beq.n	800add2 <_malloc_r+0xea>
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	4639      	mov	r1, r7
 800ad3e:	4630      	mov	r0, r6
 800ad40:	eb04 0903 	add.w	r9, r4, r3
 800ad44:	f000 fb60 	bl	800b408 <_sbrk_r>
 800ad48:	4581      	cmp	r9, r0
 800ad4a:	d142      	bne.n	800add2 <_malloc_r+0xea>
 800ad4c:	6821      	ldr	r1, [r4, #0]
 800ad4e:	4630      	mov	r0, r6
 800ad50:	1a6d      	subs	r5, r5, r1
 800ad52:	4629      	mov	r1, r5
 800ad54:	f7ff ffa6 	bl	800aca4 <sbrk_aligned>
 800ad58:	3001      	adds	r0, #1
 800ad5a:	d03a      	beq.n	800add2 <_malloc_r+0xea>
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	442b      	add	r3, r5
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	f8d8 3000 	ldr.w	r3, [r8]
 800ad66:	685a      	ldr	r2, [r3, #4]
 800ad68:	bb62      	cbnz	r2, 800adc4 <_malloc_r+0xdc>
 800ad6a:	f8c8 7000 	str.w	r7, [r8]
 800ad6e:	e00f      	b.n	800ad90 <_malloc_r+0xa8>
 800ad70:	6822      	ldr	r2, [r4, #0]
 800ad72:	1b52      	subs	r2, r2, r5
 800ad74:	d420      	bmi.n	800adb8 <_malloc_r+0xd0>
 800ad76:	2a0b      	cmp	r2, #11
 800ad78:	d917      	bls.n	800adaa <_malloc_r+0xc2>
 800ad7a:	1961      	adds	r1, r4, r5
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	6025      	str	r5, [r4, #0]
 800ad80:	bf18      	it	ne
 800ad82:	6059      	strne	r1, [r3, #4]
 800ad84:	6863      	ldr	r3, [r4, #4]
 800ad86:	bf08      	it	eq
 800ad88:	f8c8 1000 	streq.w	r1, [r8]
 800ad8c:	5162      	str	r2, [r4, r5]
 800ad8e:	604b      	str	r3, [r1, #4]
 800ad90:	4630      	mov	r0, r6
 800ad92:	f000 f82f 	bl	800adf4 <__malloc_unlock>
 800ad96:	f104 000b 	add.w	r0, r4, #11
 800ad9a:	1d23      	adds	r3, r4, #4
 800ad9c:	f020 0007 	bic.w	r0, r0, #7
 800ada0:	1ac2      	subs	r2, r0, r3
 800ada2:	bf1c      	itt	ne
 800ada4:	1a1b      	subne	r3, r3, r0
 800ada6:	50a3      	strne	r3, [r4, r2]
 800ada8:	e7af      	b.n	800ad0a <_malloc_r+0x22>
 800adaa:	6862      	ldr	r2, [r4, #4]
 800adac:	42a3      	cmp	r3, r4
 800adae:	bf0c      	ite	eq
 800adb0:	f8c8 2000 	streq.w	r2, [r8]
 800adb4:	605a      	strne	r2, [r3, #4]
 800adb6:	e7eb      	b.n	800ad90 <_malloc_r+0xa8>
 800adb8:	4623      	mov	r3, r4
 800adba:	6864      	ldr	r4, [r4, #4]
 800adbc:	e7ae      	b.n	800ad1c <_malloc_r+0x34>
 800adbe:	463c      	mov	r4, r7
 800adc0:	687f      	ldr	r7, [r7, #4]
 800adc2:	e7b6      	b.n	800ad32 <_malloc_r+0x4a>
 800adc4:	461a      	mov	r2, r3
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	42a3      	cmp	r3, r4
 800adca:	d1fb      	bne.n	800adc4 <_malloc_r+0xdc>
 800adcc:	2300      	movs	r3, #0
 800adce:	6053      	str	r3, [r2, #4]
 800add0:	e7de      	b.n	800ad90 <_malloc_r+0xa8>
 800add2:	230c      	movs	r3, #12
 800add4:	4630      	mov	r0, r6
 800add6:	6033      	str	r3, [r6, #0]
 800add8:	f000 f80c 	bl	800adf4 <__malloc_unlock>
 800addc:	e794      	b.n	800ad08 <_malloc_r+0x20>
 800adde:	6005      	str	r5, [r0, #0]
 800ade0:	e7d6      	b.n	800ad90 <_malloc_r+0xa8>
 800ade2:	bf00      	nop
 800ade4:	200016b0 	.word	0x200016b0

0800ade8 <__malloc_lock>:
 800ade8:	4801      	ldr	r0, [pc, #4]	@ (800adf0 <__malloc_lock+0x8>)
 800adea:	f7ff bf11 	b.w	800ac10 <__retarget_lock_acquire_recursive>
 800adee:	bf00      	nop
 800adf0:	200016a8 	.word	0x200016a8

0800adf4 <__malloc_unlock>:
 800adf4:	4801      	ldr	r0, [pc, #4]	@ (800adfc <__malloc_unlock+0x8>)
 800adf6:	f7ff bf0c 	b.w	800ac12 <__retarget_lock_release_recursive>
 800adfa:	bf00      	nop
 800adfc:	200016a8 	.word	0x200016a8

0800ae00 <__ssputs_r>:
 800ae00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae04:	461f      	mov	r7, r3
 800ae06:	688e      	ldr	r6, [r1, #8]
 800ae08:	4682      	mov	sl, r0
 800ae0a:	42be      	cmp	r6, r7
 800ae0c:	460c      	mov	r4, r1
 800ae0e:	4690      	mov	r8, r2
 800ae10:	680b      	ldr	r3, [r1, #0]
 800ae12:	d82d      	bhi.n	800ae70 <__ssputs_r+0x70>
 800ae14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae1c:	d026      	beq.n	800ae6c <__ssputs_r+0x6c>
 800ae1e:	6965      	ldr	r5, [r4, #20]
 800ae20:	6909      	ldr	r1, [r1, #16]
 800ae22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae26:	eba3 0901 	sub.w	r9, r3, r1
 800ae2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae2e:	1c7b      	adds	r3, r7, #1
 800ae30:	444b      	add	r3, r9
 800ae32:	106d      	asrs	r5, r5, #1
 800ae34:	429d      	cmp	r5, r3
 800ae36:	bf38      	it	cc
 800ae38:	461d      	movcc	r5, r3
 800ae3a:	0553      	lsls	r3, r2, #21
 800ae3c:	d527      	bpl.n	800ae8e <__ssputs_r+0x8e>
 800ae3e:	4629      	mov	r1, r5
 800ae40:	f7ff ff52 	bl	800ace8 <_malloc_r>
 800ae44:	4606      	mov	r6, r0
 800ae46:	b360      	cbz	r0, 800aea2 <__ssputs_r+0xa2>
 800ae48:	464a      	mov	r2, r9
 800ae4a:	6921      	ldr	r1, [r4, #16]
 800ae4c:	f000 fafa 	bl	800b444 <memcpy>
 800ae50:	89a3      	ldrh	r3, [r4, #12]
 800ae52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae5a:	81a3      	strh	r3, [r4, #12]
 800ae5c:	6126      	str	r6, [r4, #16]
 800ae5e:	444e      	add	r6, r9
 800ae60:	6026      	str	r6, [r4, #0]
 800ae62:	463e      	mov	r6, r7
 800ae64:	6165      	str	r5, [r4, #20]
 800ae66:	eba5 0509 	sub.w	r5, r5, r9
 800ae6a:	60a5      	str	r5, [r4, #8]
 800ae6c:	42be      	cmp	r6, r7
 800ae6e:	d900      	bls.n	800ae72 <__ssputs_r+0x72>
 800ae70:	463e      	mov	r6, r7
 800ae72:	4632      	mov	r2, r6
 800ae74:	4641      	mov	r1, r8
 800ae76:	6820      	ldr	r0, [r4, #0]
 800ae78:	f000 faac 	bl	800b3d4 <memmove>
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	68a3      	ldr	r3, [r4, #8]
 800ae80:	1b9b      	subs	r3, r3, r6
 800ae82:	60a3      	str	r3, [r4, #8]
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	4433      	add	r3, r6
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae8e:	462a      	mov	r2, r5
 800ae90:	f000 fae6 	bl	800b460 <_realloc_r>
 800ae94:	4606      	mov	r6, r0
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d1e0      	bne.n	800ae5c <__ssputs_r+0x5c>
 800ae9a:	4650      	mov	r0, sl
 800ae9c:	6921      	ldr	r1, [r4, #16]
 800ae9e:	f7ff feb9 	bl	800ac14 <_free_r>
 800aea2:	230c      	movs	r3, #12
 800aea4:	f8ca 3000 	str.w	r3, [sl]
 800aea8:	89a3      	ldrh	r3, [r4, #12]
 800aeaa:	f04f 30ff 	mov.w	r0, #4294967295
 800aeae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	e7e9      	b.n	800ae8a <__ssputs_r+0x8a>
	...

0800aeb8 <_svfiprintf_r>:
 800aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebc:	4698      	mov	r8, r3
 800aebe:	898b      	ldrh	r3, [r1, #12]
 800aec0:	4607      	mov	r7, r0
 800aec2:	061b      	lsls	r3, r3, #24
 800aec4:	460d      	mov	r5, r1
 800aec6:	4614      	mov	r4, r2
 800aec8:	b09d      	sub	sp, #116	@ 0x74
 800aeca:	d510      	bpl.n	800aeee <_svfiprintf_r+0x36>
 800aecc:	690b      	ldr	r3, [r1, #16]
 800aece:	b973      	cbnz	r3, 800aeee <_svfiprintf_r+0x36>
 800aed0:	2140      	movs	r1, #64	@ 0x40
 800aed2:	f7ff ff09 	bl	800ace8 <_malloc_r>
 800aed6:	6028      	str	r0, [r5, #0]
 800aed8:	6128      	str	r0, [r5, #16]
 800aeda:	b930      	cbnz	r0, 800aeea <_svfiprintf_r+0x32>
 800aedc:	230c      	movs	r3, #12
 800aede:	603b      	str	r3, [r7, #0]
 800aee0:	f04f 30ff 	mov.w	r0, #4294967295
 800aee4:	b01d      	add	sp, #116	@ 0x74
 800aee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeea:	2340      	movs	r3, #64	@ 0x40
 800aeec:	616b      	str	r3, [r5, #20]
 800aeee:	2300      	movs	r3, #0
 800aef0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aef2:	2320      	movs	r3, #32
 800aef4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aef8:	2330      	movs	r3, #48	@ 0x30
 800aefa:	f04f 0901 	mov.w	r9, #1
 800aefe:	f8cd 800c 	str.w	r8, [sp, #12]
 800af02:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b09c <_svfiprintf_r+0x1e4>
 800af06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af0a:	4623      	mov	r3, r4
 800af0c:	469a      	mov	sl, r3
 800af0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af12:	b10a      	cbz	r2, 800af18 <_svfiprintf_r+0x60>
 800af14:	2a25      	cmp	r2, #37	@ 0x25
 800af16:	d1f9      	bne.n	800af0c <_svfiprintf_r+0x54>
 800af18:	ebba 0b04 	subs.w	fp, sl, r4
 800af1c:	d00b      	beq.n	800af36 <_svfiprintf_r+0x7e>
 800af1e:	465b      	mov	r3, fp
 800af20:	4622      	mov	r2, r4
 800af22:	4629      	mov	r1, r5
 800af24:	4638      	mov	r0, r7
 800af26:	f7ff ff6b 	bl	800ae00 <__ssputs_r>
 800af2a:	3001      	adds	r0, #1
 800af2c:	f000 80a7 	beq.w	800b07e <_svfiprintf_r+0x1c6>
 800af30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af32:	445a      	add	r2, fp
 800af34:	9209      	str	r2, [sp, #36]	@ 0x24
 800af36:	f89a 3000 	ldrb.w	r3, [sl]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f000 809f 	beq.w	800b07e <_svfiprintf_r+0x1c6>
 800af40:	2300      	movs	r3, #0
 800af42:	f04f 32ff 	mov.w	r2, #4294967295
 800af46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af4a:	f10a 0a01 	add.w	sl, sl, #1
 800af4e:	9304      	str	r3, [sp, #16]
 800af50:	9307      	str	r3, [sp, #28]
 800af52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af56:	931a      	str	r3, [sp, #104]	@ 0x68
 800af58:	4654      	mov	r4, sl
 800af5a:	2205      	movs	r2, #5
 800af5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af60:	484e      	ldr	r0, [pc, #312]	@ (800b09c <_svfiprintf_r+0x1e4>)
 800af62:	f000 fa61 	bl	800b428 <memchr>
 800af66:	9a04      	ldr	r2, [sp, #16]
 800af68:	b9d8      	cbnz	r0, 800afa2 <_svfiprintf_r+0xea>
 800af6a:	06d0      	lsls	r0, r2, #27
 800af6c:	bf44      	itt	mi
 800af6e:	2320      	movmi	r3, #32
 800af70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af74:	0711      	lsls	r1, r2, #28
 800af76:	bf44      	itt	mi
 800af78:	232b      	movmi	r3, #43	@ 0x2b
 800af7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af7e:	f89a 3000 	ldrb.w	r3, [sl]
 800af82:	2b2a      	cmp	r3, #42	@ 0x2a
 800af84:	d015      	beq.n	800afb2 <_svfiprintf_r+0xfa>
 800af86:	4654      	mov	r4, sl
 800af88:	2000      	movs	r0, #0
 800af8a:	f04f 0c0a 	mov.w	ip, #10
 800af8e:	9a07      	ldr	r2, [sp, #28]
 800af90:	4621      	mov	r1, r4
 800af92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af96:	3b30      	subs	r3, #48	@ 0x30
 800af98:	2b09      	cmp	r3, #9
 800af9a:	d94b      	bls.n	800b034 <_svfiprintf_r+0x17c>
 800af9c:	b1b0      	cbz	r0, 800afcc <_svfiprintf_r+0x114>
 800af9e:	9207      	str	r2, [sp, #28]
 800afa0:	e014      	b.n	800afcc <_svfiprintf_r+0x114>
 800afa2:	eba0 0308 	sub.w	r3, r0, r8
 800afa6:	fa09 f303 	lsl.w	r3, r9, r3
 800afaa:	4313      	orrs	r3, r2
 800afac:	46a2      	mov	sl, r4
 800afae:	9304      	str	r3, [sp, #16]
 800afb0:	e7d2      	b.n	800af58 <_svfiprintf_r+0xa0>
 800afb2:	9b03      	ldr	r3, [sp, #12]
 800afb4:	1d19      	adds	r1, r3, #4
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	9103      	str	r1, [sp, #12]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	bfbb      	ittet	lt
 800afbe:	425b      	neglt	r3, r3
 800afc0:	f042 0202 	orrlt.w	r2, r2, #2
 800afc4:	9307      	strge	r3, [sp, #28]
 800afc6:	9307      	strlt	r3, [sp, #28]
 800afc8:	bfb8      	it	lt
 800afca:	9204      	strlt	r2, [sp, #16]
 800afcc:	7823      	ldrb	r3, [r4, #0]
 800afce:	2b2e      	cmp	r3, #46	@ 0x2e
 800afd0:	d10a      	bne.n	800afe8 <_svfiprintf_r+0x130>
 800afd2:	7863      	ldrb	r3, [r4, #1]
 800afd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800afd6:	d132      	bne.n	800b03e <_svfiprintf_r+0x186>
 800afd8:	9b03      	ldr	r3, [sp, #12]
 800afda:	3402      	adds	r4, #2
 800afdc:	1d1a      	adds	r2, r3, #4
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	9203      	str	r2, [sp, #12]
 800afe2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afe6:	9305      	str	r3, [sp, #20]
 800afe8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b0a0 <_svfiprintf_r+0x1e8>
 800afec:	2203      	movs	r2, #3
 800afee:	4650      	mov	r0, sl
 800aff0:	7821      	ldrb	r1, [r4, #0]
 800aff2:	f000 fa19 	bl	800b428 <memchr>
 800aff6:	b138      	cbz	r0, 800b008 <_svfiprintf_r+0x150>
 800aff8:	2240      	movs	r2, #64	@ 0x40
 800affa:	9b04      	ldr	r3, [sp, #16]
 800affc:	eba0 000a 	sub.w	r0, r0, sl
 800b000:	4082      	lsls	r2, r0
 800b002:	4313      	orrs	r3, r2
 800b004:	3401      	adds	r4, #1
 800b006:	9304      	str	r3, [sp, #16]
 800b008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b00c:	2206      	movs	r2, #6
 800b00e:	4825      	ldr	r0, [pc, #148]	@ (800b0a4 <_svfiprintf_r+0x1ec>)
 800b010:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b014:	f000 fa08 	bl	800b428 <memchr>
 800b018:	2800      	cmp	r0, #0
 800b01a:	d036      	beq.n	800b08a <_svfiprintf_r+0x1d2>
 800b01c:	4b22      	ldr	r3, [pc, #136]	@ (800b0a8 <_svfiprintf_r+0x1f0>)
 800b01e:	bb1b      	cbnz	r3, 800b068 <_svfiprintf_r+0x1b0>
 800b020:	9b03      	ldr	r3, [sp, #12]
 800b022:	3307      	adds	r3, #7
 800b024:	f023 0307 	bic.w	r3, r3, #7
 800b028:	3308      	adds	r3, #8
 800b02a:	9303      	str	r3, [sp, #12]
 800b02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b02e:	4433      	add	r3, r6
 800b030:	9309      	str	r3, [sp, #36]	@ 0x24
 800b032:	e76a      	b.n	800af0a <_svfiprintf_r+0x52>
 800b034:	460c      	mov	r4, r1
 800b036:	2001      	movs	r0, #1
 800b038:	fb0c 3202 	mla	r2, ip, r2, r3
 800b03c:	e7a8      	b.n	800af90 <_svfiprintf_r+0xd8>
 800b03e:	2300      	movs	r3, #0
 800b040:	f04f 0c0a 	mov.w	ip, #10
 800b044:	4619      	mov	r1, r3
 800b046:	3401      	adds	r4, #1
 800b048:	9305      	str	r3, [sp, #20]
 800b04a:	4620      	mov	r0, r4
 800b04c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b050:	3a30      	subs	r2, #48	@ 0x30
 800b052:	2a09      	cmp	r2, #9
 800b054:	d903      	bls.n	800b05e <_svfiprintf_r+0x1a6>
 800b056:	2b00      	cmp	r3, #0
 800b058:	d0c6      	beq.n	800afe8 <_svfiprintf_r+0x130>
 800b05a:	9105      	str	r1, [sp, #20]
 800b05c:	e7c4      	b.n	800afe8 <_svfiprintf_r+0x130>
 800b05e:	4604      	mov	r4, r0
 800b060:	2301      	movs	r3, #1
 800b062:	fb0c 2101 	mla	r1, ip, r1, r2
 800b066:	e7f0      	b.n	800b04a <_svfiprintf_r+0x192>
 800b068:	ab03      	add	r3, sp, #12
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	462a      	mov	r2, r5
 800b06e:	4638      	mov	r0, r7
 800b070:	4b0e      	ldr	r3, [pc, #56]	@ (800b0ac <_svfiprintf_r+0x1f4>)
 800b072:	a904      	add	r1, sp, #16
 800b074:	f3af 8000 	nop.w
 800b078:	1c42      	adds	r2, r0, #1
 800b07a:	4606      	mov	r6, r0
 800b07c:	d1d6      	bne.n	800b02c <_svfiprintf_r+0x174>
 800b07e:	89ab      	ldrh	r3, [r5, #12]
 800b080:	065b      	lsls	r3, r3, #25
 800b082:	f53f af2d 	bmi.w	800aee0 <_svfiprintf_r+0x28>
 800b086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b088:	e72c      	b.n	800aee4 <_svfiprintf_r+0x2c>
 800b08a:	ab03      	add	r3, sp, #12
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	462a      	mov	r2, r5
 800b090:	4638      	mov	r0, r7
 800b092:	4b06      	ldr	r3, [pc, #24]	@ (800b0ac <_svfiprintf_r+0x1f4>)
 800b094:	a904      	add	r1, sp, #16
 800b096:	f000 f87d 	bl	800b194 <_printf_i>
 800b09a:	e7ed      	b.n	800b078 <_svfiprintf_r+0x1c0>
 800b09c:	0800b596 	.word	0x0800b596
 800b0a0:	0800b59c 	.word	0x0800b59c
 800b0a4:	0800b5a0 	.word	0x0800b5a0
 800b0a8:	00000000 	.word	0x00000000
 800b0ac:	0800ae01 	.word	0x0800ae01

0800b0b0 <_printf_common>:
 800b0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b4:	4616      	mov	r6, r2
 800b0b6:	4698      	mov	r8, r3
 800b0b8:	688a      	ldr	r2, [r1, #8]
 800b0ba:	690b      	ldr	r3, [r1, #16]
 800b0bc:	4607      	mov	r7, r0
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	bfb8      	it	lt
 800b0c2:	4613      	movlt	r3, r2
 800b0c4:	6033      	str	r3, [r6, #0]
 800b0c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0d0:	b10a      	cbz	r2, 800b0d6 <_printf_common+0x26>
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	6033      	str	r3, [r6, #0]
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	0699      	lsls	r1, r3, #26
 800b0da:	bf42      	ittt	mi
 800b0dc:	6833      	ldrmi	r3, [r6, #0]
 800b0de:	3302      	addmi	r3, #2
 800b0e0:	6033      	strmi	r3, [r6, #0]
 800b0e2:	6825      	ldr	r5, [r4, #0]
 800b0e4:	f015 0506 	ands.w	r5, r5, #6
 800b0e8:	d106      	bne.n	800b0f8 <_printf_common+0x48>
 800b0ea:	f104 0a19 	add.w	sl, r4, #25
 800b0ee:	68e3      	ldr	r3, [r4, #12]
 800b0f0:	6832      	ldr	r2, [r6, #0]
 800b0f2:	1a9b      	subs	r3, r3, r2
 800b0f4:	42ab      	cmp	r3, r5
 800b0f6:	dc2b      	bgt.n	800b150 <_printf_common+0xa0>
 800b0f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b0fc:	6822      	ldr	r2, [r4, #0]
 800b0fe:	3b00      	subs	r3, #0
 800b100:	bf18      	it	ne
 800b102:	2301      	movne	r3, #1
 800b104:	0692      	lsls	r2, r2, #26
 800b106:	d430      	bmi.n	800b16a <_printf_common+0xba>
 800b108:	4641      	mov	r1, r8
 800b10a:	4638      	mov	r0, r7
 800b10c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b110:	47c8      	blx	r9
 800b112:	3001      	adds	r0, #1
 800b114:	d023      	beq.n	800b15e <_printf_common+0xae>
 800b116:	6823      	ldr	r3, [r4, #0]
 800b118:	6922      	ldr	r2, [r4, #16]
 800b11a:	f003 0306 	and.w	r3, r3, #6
 800b11e:	2b04      	cmp	r3, #4
 800b120:	bf14      	ite	ne
 800b122:	2500      	movne	r5, #0
 800b124:	6833      	ldreq	r3, [r6, #0]
 800b126:	f04f 0600 	mov.w	r6, #0
 800b12a:	bf08      	it	eq
 800b12c:	68e5      	ldreq	r5, [r4, #12]
 800b12e:	f104 041a 	add.w	r4, r4, #26
 800b132:	bf08      	it	eq
 800b134:	1aed      	subeq	r5, r5, r3
 800b136:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b13a:	bf08      	it	eq
 800b13c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b140:	4293      	cmp	r3, r2
 800b142:	bfc4      	itt	gt
 800b144:	1a9b      	subgt	r3, r3, r2
 800b146:	18ed      	addgt	r5, r5, r3
 800b148:	42b5      	cmp	r5, r6
 800b14a:	d11a      	bne.n	800b182 <_printf_common+0xd2>
 800b14c:	2000      	movs	r0, #0
 800b14e:	e008      	b.n	800b162 <_printf_common+0xb2>
 800b150:	2301      	movs	r3, #1
 800b152:	4652      	mov	r2, sl
 800b154:	4641      	mov	r1, r8
 800b156:	4638      	mov	r0, r7
 800b158:	47c8      	blx	r9
 800b15a:	3001      	adds	r0, #1
 800b15c:	d103      	bne.n	800b166 <_printf_common+0xb6>
 800b15e:	f04f 30ff 	mov.w	r0, #4294967295
 800b162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b166:	3501      	adds	r5, #1
 800b168:	e7c1      	b.n	800b0ee <_printf_common+0x3e>
 800b16a:	2030      	movs	r0, #48	@ 0x30
 800b16c:	18e1      	adds	r1, r4, r3
 800b16e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b172:	1c5a      	adds	r2, r3, #1
 800b174:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b178:	4422      	add	r2, r4
 800b17a:	3302      	adds	r3, #2
 800b17c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b180:	e7c2      	b.n	800b108 <_printf_common+0x58>
 800b182:	2301      	movs	r3, #1
 800b184:	4622      	mov	r2, r4
 800b186:	4641      	mov	r1, r8
 800b188:	4638      	mov	r0, r7
 800b18a:	47c8      	blx	r9
 800b18c:	3001      	adds	r0, #1
 800b18e:	d0e6      	beq.n	800b15e <_printf_common+0xae>
 800b190:	3601      	adds	r6, #1
 800b192:	e7d9      	b.n	800b148 <_printf_common+0x98>

0800b194 <_printf_i>:
 800b194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b198:	7e0f      	ldrb	r7, [r1, #24]
 800b19a:	4691      	mov	r9, r2
 800b19c:	2f78      	cmp	r7, #120	@ 0x78
 800b19e:	4680      	mov	r8, r0
 800b1a0:	460c      	mov	r4, r1
 800b1a2:	469a      	mov	sl, r3
 800b1a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b1aa:	d807      	bhi.n	800b1bc <_printf_i+0x28>
 800b1ac:	2f62      	cmp	r7, #98	@ 0x62
 800b1ae:	d80a      	bhi.n	800b1c6 <_printf_i+0x32>
 800b1b0:	2f00      	cmp	r7, #0
 800b1b2:	f000 80d3 	beq.w	800b35c <_printf_i+0x1c8>
 800b1b6:	2f58      	cmp	r7, #88	@ 0x58
 800b1b8:	f000 80ba 	beq.w	800b330 <_printf_i+0x19c>
 800b1bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b1c4:	e03a      	b.n	800b23c <_printf_i+0xa8>
 800b1c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b1ca:	2b15      	cmp	r3, #21
 800b1cc:	d8f6      	bhi.n	800b1bc <_printf_i+0x28>
 800b1ce:	a101      	add	r1, pc, #4	@ (adr r1, 800b1d4 <_printf_i+0x40>)
 800b1d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1d4:	0800b22d 	.word	0x0800b22d
 800b1d8:	0800b241 	.word	0x0800b241
 800b1dc:	0800b1bd 	.word	0x0800b1bd
 800b1e0:	0800b1bd 	.word	0x0800b1bd
 800b1e4:	0800b1bd 	.word	0x0800b1bd
 800b1e8:	0800b1bd 	.word	0x0800b1bd
 800b1ec:	0800b241 	.word	0x0800b241
 800b1f0:	0800b1bd 	.word	0x0800b1bd
 800b1f4:	0800b1bd 	.word	0x0800b1bd
 800b1f8:	0800b1bd 	.word	0x0800b1bd
 800b1fc:	0800b1bd 	.word	0x0800b1bd
 800b200:	0800b343 	.word	0x0800b343
 800b204:	0800b26b 	.word	0x0800b26b
 800b208:	0800b2fd 	.word	0x0800b2fd
 800b20c:	0800b1bd 	.word	0x0800b1bd
 800b210:	0800b1bd 	.word	0x0800b1bd
 800b214:	0800b365 	.word	0x0800b365
 800b218:	0800b1bd 	.word	0x0800b1bd
 800b21c:	0800b26b 	.word	0x0800b26b
 800b220:	0800b1bd 	.word	0x0800b1bd
 800b224:	0800b1bd 	.word	0x0800b1bd
 800b228:	0800b305 	.word	0x0800b305
 800b22c:	6833      	ldr	r3, [r6, #0]
 800b22e:	1d1a      	adds	r2, r3, #4
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	6032      	str	r2, [r6, #0]
 800b234:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b238:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b23c:	2301      	movs	r3, #1
 800b23e:	e09e      	b.n	800b37e <_printf_i+0x1ea>
 800b240:	6833      	ldr	r3, [r6, #0]
 800b242:	6820      	ldr	r0, [r4, #0]
 800b244:	1d19      	adds	r1, r3, #4
 800b246:	6031      	str	r1, [r6, #0]
 800b248:	0606      	lsls	r6, r0, #24
 800b24a:	d501      	bpl.n	800b250 <_printf_i+0xbc>
 800b24c:	681d      	ldr	r5, [r3, #0]
 800b24e:	e003      	b.n	800b258 <_printf_i+0xc4>
 800b250:	0645      	lsls	r5, r0, #25
 800b252:	d5fb      	bpl.n	800b24c <_printf_i+0xb8>
 800b254:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b258:	2d00      	cmp	r5, #0
 800b25a:	da03      	bge.n	800b264 <_printf_i+0xd0>
 800b25c:	232d      	movs	r3, #45	@ 0x2d
 800b25e:	426d      	negs	r5, r5
 800b260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b264:	230a      	movs	r3, #10
 800b266:	4859      	ldr	r0, [pc, #356]	@ (800b3cc <_printf_i+0x238>)
 800b268:	e011      	b.n	800b28e <_printf_i+0xfa>
 800b26a:	6821      	ldr	r1, [r4, #0]
 800b26c:	6833      	ldr	r3, [r6, #0]
 800b26e:	0608      	lsls	r0, r1, #24
 800b270:	f853 5b04 	ldr.w	r5, [r3], #4
 800b274:	d402      	bmi.n	800b27c <_printf_i+0xe8>
 800b276:	0649      	lsls	r1, r1, #25
 800b278:	bf48      	it	mi
 800b27a:	b2ad      	uxthmi	r5, r5
 800b27c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b27e:	6033      	str	r3, [r6, #0]
 800b280:	bf14      	ite	ne
 800b282:	230a      	movne	r3, #10
 800b284:	2308      	moveq	r3, #8
 800b286:	4851      	ldr	r0, [pc, #324]	@ (800b3cc <_printf_i+0x238>)
 800b288:	2100      	movs	r1, #0
 800b28a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b28e:	6866      	ldr	r6, [r4, #4]
 800b290:	2e00      	cmp	r6, #0
 800b292:	bfa8      	it	ge
 800b294:	6821      	ldrge	r1, [r4, #0]
 800b296:	60a6      	str	r6, [r4, #8]
 800b298:	bfa4      	itt	ge
 800b29a:	f021 0104 	bicge.w	r1, r1, #4
 800b29e:	6021      	strge	r1, [r4, #0]
 800b2a0:	b90d      	cbnz	r5, 800b2a6 <_printf_i+0x112>
 800b2a2:	2e00      	cmp	r6, #0
 800b2a4:	d04b      	beq.n	800b33e <_printf_i+0x1aa>
 800b2a6:	4616      	mov	r6, r2
 800b2a8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b2ac:	fb03 5711 	mls	r7, r3, r1, r5
 800b2b0:	5dc7      	ldrb	r7, [r0, r7]
 800b2b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b2b6:	462f      	mov	r7, r5
 800b2b8:	42bb      	cmp	r3, r7
 800b2ba:	460d      	mov	r5, r1
 800b2bc:	d9f4      	bls.n	800b2a8 <_printf_i+0x114>
 800b2be:	2b08      	cmp	r3, #8
 800b2c0:	d10b      	bne.n	800b2da <_printf_i+0x146>
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	07df      	lsls	r7, r3, #31
 800b2c6:	d508      	bpl.n	800b2da <_printf_i+0x146>
 800b2c8:	6923      	ldr	r3, [r4, #16]
 800b2ca:	6861      	ldr	r1, [r4, #4]
 800b2cc:	4299      	cmp	r1, r3
 800b2ce:	bfde      	ittt	le
 800b2d0:	2330      	movle	r3, #48	@ 0x30
 800b2d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b2d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b2da:	1b92      	subs	r2, r2, r6
 800b2dc:	6122      	str	r2, [r4, #16]
 800b2de:	464b      	mov	r3, r9
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4640      	mov	r0, r8
 800b2e4:	f8cd a000 	str.w	sl, [sp]
 800b2e8:	aa03      	add	r2, sp, #12
 800b2ea:	f7ff fee1 	bl	800b0b0 <_printf_common>
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	d14a      	bne.n	800b388 <_printf_i+0x1f4>
 800b2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f6:	b004      	add	sp, #16
 800b2f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2fc:	6823      	ldr	r3, [r4, #0]
 800b2fe:	f043 0320 	orr.w	r3, r3, #32
 800b302:	6023      	str	r3, [r4, #0]
 800b304:	2778      	movs	r7, #120	@ 0x78
 800b306:	4832      	ldr	r0, [pc, #200]	@ (800b3d0 <_printf_i+0x23c>)
 800b308:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	6831      	ldr	r1, [r6, #0]
 800b310:	061f      	lsls	r7, r3, #24
 800b312:	f851 5b04 	ldr.w	r5, [r1], #4
 800b316:	d402      	bmi.n	800b31e <_printf_i+0x18a>
 800b318:	065f      	lsls	r7, r3, #25
 800b31a:	bf48      	it	mi
 800b31c:	b2ad      	uxthmi	r5, r5
 800b31e:	6031      	str	r1, [r6, #0]
 800b320:	07d9      	lsls	r1, r3, #31
 800b322:	bf44      	itt	mi
 800b324:	f043 0320 	orrmi.w	r3, r3, #32
 800b328:	6023      	strmi	r3, [r4, #0]
 800b32a:	b11d      	cbz	r5, 800b334 <_printf_i+0x1a0>
 800b32c:	2310      	movs	r3, #16
 800b32e:	e7ab      	b.n	800b288 <_printf_i+0xf4>
 800b330:	4826      	ldr	r0, [pc, #152]	@ (800b3cc <_printf_i+0x238>)
 800b332:	e7e9      	b.n	800b308 <_printf_i+0x174>
 800b334:	6823      	ldr	r3, [r4, #0]
 800b336:	f023 0320 	bic.w	r3, r3, #32
 800b33a:	6023      	str	r3, [r4, #0]
 800b33c:	e7f6      	b.n	800b32c <_printf_i+0x198>
 800b33e:	4616      	mov	r6, r2
 800b340:	e7bd      	b.n	800b2be <_printf_i+0x12a>
 800b342:	6833      	ldr	r3, [r6, #0]
 800b344:	6825      	ldr	r5, [r4, #0]
 800b346:	1d18      	adds	r0, r3, #4
 800b348:	6961      	ldr	r1, [r4, #20]
 800b34a:	6030      	str	r0, [r6, #0]
 800b34c:	062e      	lsls	r6, r5, #24
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	d501      	bpl.n	800b356 <_printf_i+0x1c2>
 800b352:	6019      	str	r1, [r3, #0]
 800b354:	e002      	b.n	800b35c <_printf_i+0x1c8>
 800b356:	0668      	lsls	r0, r5, #25
 800b358:	d5fb      	bpl.n	800b352 <_printf_i+0x1be>
 800b35a:	8019      	strh	r1, [r3, #0]
 800b35c:	2300      	movs	r3, #0
 800b35e:	4616      	mov	r6, r2
 800b360:	6123      	str	r3, [r4, #16]
 800b362:	e7bc      	b.n	800b2de <_printf_i+0x14a>
 800b364:	6833      	ldr	r3, [r6, #0]
 800b366:	2100      	movs	r1, #0
 800b368:	1d1a      	adds	r2, r3, #4
 800b36a:	6032      	str	r2, [r6, #0]
 800b36c:	681e      	ldr	r6, [r3, #0]
 800b36e:	6862      	ldr	r2, [r4, #4]
 800b370:	4630      	mov	r0, r6
 800b372:	f000 f859 	bl	800b428 <memchr>
 800b376:	b108      	cbz	r0, 800b37c <_printf_i+0x1e8>
 800b378:	1b80      	subs	r0, r0, r6
 800b37a:	6060      	str	r0, [r4, #4]
 800b37c:	6863      	ldr	r3, [r4, #4]
 800b37e:	6123      	str	r3, [r4, #16]
 800b380:	2300      	movs	r3, #0
 800b382:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b386:	e7aa      	b.n	800b2de <_printf_i+0x14a>
 800b388:	4632      	mov	r2, r6
 800b38a:	4649      	mov	r1, r9
 800b38c:	4640      	mov	r0, r8
 800b38e:	6923      	ldr	r3, [r4, #16]
 800b390:	47d0      	blx	sl
 800b392:	3001      	adds	r0, #1
 800b394:	d0ad      	beq.n	800b2f2 <_printf_i+0x15e>
 800b396:	6823      	ldr	r3, [r4, #0]
 800b398:	079b      	lsls	r3, r3, #30
 800b39a:	d413      	bmi.n	800b3c4 <_printf_i+0x230>
 800b39c:	68e0      	ldr	r0, [r4, #12]
 800b39e:	9b03      	ldr	r3, [sp, #12]
 800b3a0:	4298      	cmp	r0, r3
 800b3a2:	bfb8      	it	lt
 800b3a4:	4618      	movlt	r0, r3
 800b3a6:	e7a6      	b.n	800b2f6 <_printf_i+0x162>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	4632      	mov	r2, r6
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	4640      	mov	r0, r8
 800b3b0:	47d0      	blx	sl
 800b3b2:	3001      	adds	r0, #1
 800b3b4:	d09d      	beq.n	800b2f2 <_printf_i+0x15e>
 800b3b6:	3501      	adds	r5, #1
 800b3b8:	68e3      	ldr	r3, [r4, #12]
 800b3ba:	9903      	ldr	r1, [sp, #12]
 800b3bc:	1a5b      	subs	r3, r3, r1
 800b3be:	42ab      	cmp	r3, r5
 800b3c0:	dcf2      	bgt.n	800b3a8 <_printf_i+0x214>
 800b3c2:	e7eb      	b.n	800b39c <_printf_i+0x208>
 800b3c4:	2500      	movs	r5, #0
 800b3c6:	f104 0619 	add.w	r6, r4, #25
 800b3ca:	e7f5      	b.n	800b3b8 <_printf_i+0x224>
 800b3cc:	0800b5a7 	.word	0x0800b5a7
 800b3d0:	0800b5b8 	.word	0x0800b5b8

0800b3d4 <memmove>:
 800b3d4:	4288      	cmp	r0, r1
 800b3d6:	b510      	push	{r4, lr}
 800b3d8:	eb01 0402 	add.w	r4, r1, r2
 800b3dc:	d902      	bls.n	800b3e4 <memmove+0x10>
 800b3de:	4284      	cmp	r4, r0
 800b3e0:	4623      	mov	r3, r4
 800b3e2:	d807      	bhi.n	800b3f4 <memmove+0x20>
 800b3e4:	1e43      	subs	r3, r0, #1
 800b3e6:	42a1      	cmp	r1, r4
 800b3e8:	d008      	beq.n	800b3fc <memmove+0x28>
 800b3ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3f2:	e7f8      	b.n	800b3e6 <memmove+0x12>
 800b3f4:	4601      	mov	r1, r0
 800b3f6:	4402      	add	r2, r0
 800b3f8:	428a      	cmp	r2, r1
 800b3fa:	d100      	bne.n	800b3fe <memmove+0x2a>
 800b3fc:	bd10      	pop	{r4, pc}
 800b3fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b406:	e7f7      	b.n	800b3f8 <memmove+0x24>

0800b408 <_sbrk_r>:
 800b408:	b538      	push	{r3, r4, r5, lr}
 800b40a:	2300      	movs	r3, #0
 800b40c:	4d05      	ldr	r5, [pc, #20]	@ (800b424 <_sbrk_r+0x1c>)
 800b40e:	4604      	mov	r4, r0
 800b410:	4608      	mov	r0, r1
 800b412:	602b      	str	r3, [r5, #0]
 800b414:	f7f6 fae8 	bl	80019e8 <_sbrk>
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	d102      	bne.n	800b422 <_sbrk_r+0x1a>
 800b41c:	682b      	ldr	r3, [r5, #0]
 800b41e:	b103      	cbz	r3, 800b422 <_sbrk_r+0x1a>
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	bd38      	pop	{r3, r4, r5, pc}
 800b424:	200016a4 	.word	0x200016a4

0800b428 <memchr>:
 800b428:	4603      	mov	r3, r0
 800b42a:	b510      	push	{r4, lr}
 800b42c:	b2c9      	uxtb	r1, r1
 800b42e:	4402      	add	r2, r0
 800b430:	4293      	cmp	r3, r2
 800b432:	4618      	mov	r0, r3
 800b434:	d101      	bne.n	800b43a <memchr+0x12>
 800b436:	2000      	movs	r0, #0
 800b438:	e003      	b.n	800b442 <memchr+0x1a>
 800b43a:	7804      	ldrb	r4, [r0, #0]
 800b43c:	3301      	adds	r3, #1
 800b43e:	428c      	cmp	r4, r1
 800b440:	d1f6      	bne.n	800b430 <memchr+0x8>
 800b442:	bd10      	pop	{r4, pc}

0800b444 <memcpy>:
 800b444:	440a      	add	r2, r1
 800b446:	4291      	cmp	r1, r2
 800b448:	f100 33ff 	add.w	r3, r0, #4294967295
 800b44c:	d100      	bne.n	800b450 <memcpy+0xc>
 800b44e:	4770      	bx	lr
 800b450:	b510      	push	{r4, lr}
 800b452:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b456:	4291      	cmp	r1, r2
 800b458:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b45c:	d1f9      	bne.n	800b452 <memcpy+0xe>
 800b45e:	bd10      	pop	{r4, pc}

0800b460 <_realloc_r>:
 800b460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b464:	4680      	mov	r8, r0
 800b466:	4615      	mov	r5, r2
 800b468:	460c      	mov	r4, r1
 800b46a:	b921      	cbnz	r1, 800b476 <_realloc_r+0x16>
 800b46c:	4611      	mov	r1, r2
 800b46e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b472:	f7ff bc39 	b.w	800ace8 <_malloc_r>
 800b476:	b92a      	cbnz	r2, 800b484 <_realloc_r+0x24>
 800b478:	f7ff fbcc 	bl	800ac14 <_free_r>
 800b47c:	2400      	movs	r4, #0
 800b47e:	4620      	mov	r0, r4
 800b480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b484:	f000 f81a 	bl	800b4bc <_malloc_usable_size_r>
 800b488:	4285      	cmp	r5, r0
 800b48a:	4606      	mov	r6, r0
 800b48c:	d802      	bhi.n	800b494 <_realloc_r+0x34>
 800b48e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b492:	d8f4      	bhi.n	800b47e <_realloc_r+0x1e>
 800b494:	4629      	mov	r1, r5
 800b496:	4640      	mov	r0, r8
 800b498:	f7ff fc26 	bl	800ace8 <_malloc_r>
 800b49c:	4607      	mov	r7, r0
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d0ec      	beq.n	800b47c <_realloc_r+0x1c>
 800b4a2:	42b5      	cmp	r5, r6
 800b4a4:	462a      	mov	r2, r5
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	bf28      	it	cs
 800b4aa:	4632      	movcs	r2, r6
 800b4ac:	f7ff ffca 	bl	800b444 <memcpy>
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	4640      	mov	r0, r8
 800b4b4:	f7ff fbae 	bl	800ac14 <_free_r>
 800b4b8:	463c      	mov	r4, r7
 800b4ba:	e7e0      	b.n	800b47e <_realloc_r+0x1e>

0800b4bc <_malloc_usable_size_r>:
 800b4bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4c0:	1f18      	subs	r0, r3, #4
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	bfbc      	itt	lt
 800b4c6:	580b      	ldrlt	r3, [r1, r0]
 800b4c8:	18c0      	addlt	r0, r0, r3
 800b4ca:	4770      	bx	lr

0800b4cc <_init>:
 800b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ce:	bf00      	nop
 800b4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4d2:	bc08      	pop	{r3}
 800b4d4:	469e      	mov	lr, r3
 800b4d6:	4770      	bx	lr

0800b4d8 <_fini>:
 800b4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4da:	bf00      	nop
 800b4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4de:	bc08      	pop	{r3}
 800b4e0:	469e      	mov	lr, r3
 800b4e2:	4770      	bx	lr
